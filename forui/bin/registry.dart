// // GENERATED CODE - DO NOT MODIFY BY HAND
//
// **************************************************************************
// forui
// **************************************************************************
//
// ignore_for_file: type=lint
// ignore_for_file: deprecated_member_use

///

/// The registry for all styles in Forui. This was generated by tool/style_preprocessor.
enum Registry {
  fsheetstyle(
    'FSheetStyle',
    12,
    'FSheetStyle sheetStyle({required FColorScheme color}) =>\n    FSheetStyle(barrierColor: color.barrier, backgroundColor: color.background);\n',
    <String>['FSheetStyle'],
  ),
  falertstyles(
    'FAlertStyles',
    13,
    'FAlertStyles alertStyles({required FColorScheme color, required FTypography text, required FStyle style}) =>\n    FAlertStyles(\n      primary: FAlertStyle(\n        iconStyle: IconThemeData(color: color.foreground, size: 20),\n        titleTextStyle: text.base.copyWith(fontWeight: FontWeight.w500, color: color.foreground, height: 1.2),\n        subtitleTextStyle: text.sm.copyWith(color: color.foreground),\n        decoration: BoxDecoration(\n          border: Border.all(color: color.border),\n          borderRadius: style.borderRadius,\n          color: color.background,\n        ),\n      ),\n      destructive: FAlertStyle(\n        iconStyle: IconThemeData(color: color.destructive, size: 20),\n        titleTextStyle: text.base.copyWith(fontWeight: FontWeight.w500, color: color.destructive, height: 1.2),\n        subtitleTextStyle: text.sm.copyWith(color: color.destructive),\n        decoration: BoxDecoration(\n          border: Border.all(color: color.destructive),\n          borderRadius: style.borderRadius,\n          color: color.background,\n        ),\n      ),\n    );\n',
    <String>['FAlertStyles'],
  ),
  fdividerstyles(
    'FDividerStyles',
    15,
    'FDividerStyles dividerStyles({required FColorScheme color, required FStyle style}) => FDividerStyles(\n  horizontalStyle: FDividerStyle(\n    color: color.secondary,\n    padding: FDividerStyle.defaultPadding.horizontalStyle,\n    width: style.borderWidth,\n  ),\n  verticalStyle: FDividerStyle(\n    color: color.secondary,\n    padding: FDividerStyle.defaultPadding.verticalStyle,\n    width: style.borderWidth,\n  ),\n);\n',
    <String>['FDividerStyles'],
  ),
  ftilecontentstyle(
    'FTileContentStyle',
    18,
    'FTileContentStyle tileContentStyle({required FColorScheme color, required FTypography text}) => FTileContentStyle(\n  enabledStyle: FTileContentStateStyle(\n    prefixIconStyle: IconThemeData(color: color.primary, size: 18),\n    titleTextStyle: text.base,\n    subtitleTextStyle: text.xs.copyWith(color: color.mutedForeground),\n    detailsTextStyle: text.base.copyWith(color: color.mutedForeground),\n    suffixIconStyle: IconThemeData(color: color.mutedForeground, size: 18),\n  ),\n  enabledHoveredStyle: FTileContentStateStyle(\n    prefixIconStyle: IconThemeData(color: color.primary, size: 18),\n    titleTextStyle: text.base,\n    subtitleTextStyle: text.xs.copyWith(color: color.mutedForeground),\n    detailsTextStyle: text.base.copyWith(color: color.mutedForeground),\n    suffixIconStyle: IconThemeData(color: color.mutedForeground, size: 18),\n  ),\n  disabledStyle: FTileContentStateStyle(\n    prefixIconStyle: IconThemeData(color: color.disable(color.primary), size: 18),\n    titleTextStyle: text.base.copyWith(color: color.disable(color.primary)),\n    subtitleTextStyle: text.xs.copyWith(color: color.disable(color.mutedForeground)),\n    detailsTextStyle: text.base.copyWith(color: color.disable(color.mutedForeground)),\n    suffixIconStyle: IconThemeData(color: color.disable(color.mutedForeground), size: 18),\n  ),\n);\n',
    <String>['FTileContentStyle'],
  ),
  ftilestyle(
    'FTileStyle',
    11,
    'FTileStyle tileStyle({required FColorScheme color, required FTypography text, required FStyle style}) => FTileStyle(\n  border: Border.all(width: style.borderWidth, color: color.border),\n  focusedBorder: Border.all(width: style.borderWidth, color: color.primary),\n  borderRadius: style.borderRadius,\n  enabledBackgroundColor: color.background,\n  enabledHoveredBackgroundColor: color.secondary,\n  disabledBackgroundColor: color.disable(color.secondary),\n  dividerStyle: FDividerStyle(color: color.border, width: style.borderWidth, padding: EdgeInsets.zero),\n  focusedDividerStyle: FDividerStyle(color: color.primary, width: style.borderWidth, padding: EdgeInsets.zero),\n  tappableStyle: style.tappableStyle.copyWith(\n    touchHoverEnterDuration: Duration.zero,\n    touchHoverExitDuration: const Duration(milliseconds: 25),\n  ),\n  contentStyle: _tileContentStyle(color: color, text: text),\n);\n',
    <String>['FTileStyle', 'FTileContentStyle'],
  ),
  ftilegroupstyle(
    'FTileGroupStyle',
    16,
    'FTileGroupStyle tileGroupStyle({required FColorScheme color, required FTypography text, required FStyle style}) =>\n    FTileGroupStyle(\n      borderColor: color.border,\n      borderWidth: style.borderWidth,\n      borderRadius: style.borderRadius,\n      tileStyle: _tileStyle(color: color, text: text, style: style),\n      enabledStyle: FFormFieldStyle(\n        labelTextStyle: text.base.copyWith(\n          color: style.enabledFormFieldStyle.labelTextStyle.color,\n          fontWeight: FontWeight.w600,\n        ),\n        descriptionTextStyle: text.xs.copyWith(color: style.enabledFormFieldStyle.descriptionTextStyle.color),\n      ),\n      disabledStyle: FFormFieldStyle(\n        labelTextStyle: text.base.copyWith(\n          color: style.disabledFormFieldStyle.labelTextStyle.color,\n          fontWeight: FontWeight.w600,\n        ),\n        descriptionTextStyle: text.xs.copyWith(color: style.disabledFormFieldStyle.descriptionTextStyle.color),\n      ),\n      errorStyle: FFormFieldErrorStyle(\n        labelTextStyle: text.base.copyWith(\n          color: style.enabledFormFieldStyle.labelTextStyle.color,\n          fontWeight: FontWeight.w600,\n        ),\n        descriptionTextStyle: text.xs.copyWith(color: style.errorFormFieldStyle.descriptionTextStyle.color),\n        errorTextStyle: text.xs.copyWith(color: style.errorFormFieldStyle.errorTextStyle.color),\n      ),\n    );\n',
    <String>['FTileGroupStyle', 'FTileStyle', 'FTileContentStyle'],
  ),
  fdialogstyle(
    'FDialogStyle',
    13,
    'FDialogStyle dialogStyle({required FStyle style, required FColorScheme color, required FTypography text}) {\n  final title = text.lg.copyWith(fontWeight: FontWeight.w600, color: color.foreground);\n  final body = text.sm.copyWith(color: color.mutedForeground);\n  return FDialogStyle(\n    decoration: BoxDecoration(borderRadius: style.borderRadius, color: color.background),\n    horizontalStyle: FDialogContentStyle(\n      titleTextStyle: title,\n      bodyTextStyle: body,\n      padding: const EdgeInsets.symmetric(horizontal: 25, vertical: 25),\n      actionSpacing: 7,\n    ),\n    verticalStyle: FDialogContentStyle(\n      titleTextStyle: title,\n      bodyTextStyle: body,\n      padding: const EdgeInsets.symmetric(horizontal: 30, vertical: 25),\n      actionSpacing: 8,\n    ),\n  );\n}\n',
    <String>['FDialogStyle'],
  ),
  fbuttonstyles(
    'FButtonStyles',
    14,
    'FButtonStyles buttonStyles({required FColorScheme color, required FTypography text, required FStyle style}) =>\n    FButtonStyles(\n      primary: _buttonStyle(\n        color: color,\n        style: style,\n        text: text,\n        background: color.primary,\n        foreground: color.primaryForeground,\n      ),\n      secondary: _buttonStyle(\n        color: color,\n        style: style,\n        text: text,\n        background: color.secondary,\n        foreground: color.secondaryForeground,\n      ),\n      destructive: _buttonStyle(\n        color: color,\n        style: style,\n        text: text,\n        background: color.destructive,\n        foreground: color.destructiveForeground,\n      ),\n      outline: FButtonStyle(\n        enabledBoxDecoration: BoxDecoration(border: Border.all(color: color.border), borderRadius: style.borderRadius),\n        enabledHoverBoxDecoration: BoxDecoration(\n          border: Border.all(color: color.border),\n          borderRadius: style.borderRadius,\n          color: color.secondary,\n        ),\n        disabledBoxDecoration: BoxDecoration(\n          border: Border.all(color: color.disable(color.border)),\n          borderRadius: style.borderRadius,\n        ),\n        focusedOutlineStyle: style.focusedOutlineStyle,\n        contentStyle: _buttonContentStyle(\n          text: text,\n          enabled: color.secondaryForeground,\n          disabled: color.disable(color.secondaryForeground),\n        ),\n        iconContentStyle: FButtonIconContentStyle(\n          enabledStyle: IconThemeData(color: color.secondaryForeground, size: 20),\n          disabledStyle: IconThemeData(color: color.disable(color.secondaryForeground), size: 20),\n        ),\n        tappableStyle: style.tappableStyle,\n      ),\n      ghost: FButtonStyle(\n        enabledBoxDecoration: BoxDecoration(borderRadius: style.borderRadius),\n        enabledHoverBoxDecoration: BoxDecoration(borderRadius: style.borderRadius, color: color.secondary),\n        disabledBoxDecoration: BoxDecoration(borderRadius: style.borderRadius),\n        focusedOutlineStyle: style.focusedOutlineStyle,\n        contentStyle: _buttonContentStyle(\n          text: text,\n          enabled: color.secondaryForeground,\n          disabled: color.disable(color.secondaryForeground),\n        ),\n        iconContentStyle: FButtonIconContentStyle(\n          enabledStyle: IconThemeData(color: color.secondaryForeground, size: 20),\n          disabledStyle: IconThemeData(color: color.disable(color.secondaryForeground), size: 20),\n        ),\n        tappableStyle: style.tappableStyle,\n      ),\n    );\n',
    <String>['FButtonStyles', 'FButtonStyle', 'FButtonContentStyle'],
  ),
  fbuttoncontentstyle(
    'FButtonContentStyle',
    20,
    'FButtonContentStyle buttonContentStyle({required FTypography text, required Color enabled, required Color disabled}) =>\n    FButtonContentStyle(\n      enabledTextStyle: text.base.copyWith(color: enabled, fontWeight: FontWeight.w500, height: 1),\n      disabledTextStyle: text.base.copyWith(color: disabled, fontWeight: FontWeight.w500, height: 1),\n      enabledIconStyle: IconThemeData(color: enabled, size: 20),\n      disabledIconStyle: IconThemeData(color: disabled, size: 20),\n    );\n',
    <String>['FButtonContentStyle'],
  ),
  fbuttonstyle(
    'FButtonStyle',
    13,
    'FButtonStyle buttonStyle({\n  required FColorScheme color,\n  required FTypography text,\n  required FStyle style,\n  required Color background,\n  required Color foreground,\n}) => FButtonStyle(\n  enabledBoxDecoration: BoxDecoration(borderRadius: style.borderRadius, color: background),\n  enabledHoverBoxDecoration: BoxDecoration(borderRadius: style.borderRadius, color: color.hover(background)),\n  disabledBoxDecoration: BoxDecoration(borderRadius: style.borderRadius, color: color.disable(background)),\n  focusedOutlineStyle: style.focusedOutlineStyle,\n  contentStyle: _buttonContentStyle(\n    text: text,\n    enabled: foreground,\n    disabled: color.disable(foreground, color.disable(background)),\n  ),\n  iconContentStyle: FButtonIconContentStyle(\n    enabledStyle: IconThemeData(color: foreground, size: 20),\n    disabledStyle: IconThemeData(color: color.disable(foreground, color.disable(background)), size: 20),\n  ),\n  tappableStyle: style.tappableStyle,\n);\n',
    <String>['FButtonStyle', 'FButtonContentStyle'],
  ),
  fscaffoldstyle(
    'FScaffoldStyle',
    15,
    'FScaffoldStyle scaffoldStyle({required FColorScheme color, required FStyle style}) => FScaffoldStyle(\n  backgroundColor: color.background,\n  childPadding: style.pagePadding.copyWith(top: 0, bottom: 0),\n  footerDecoration: BoxDecoration(border: Border(top: BorderSide(color: color.border, width: style.borderWidth))),\n);\n',
    <String>['FScaffoldStyle'],
  ),
  fbadgestyles(
    'FBadgeStyles',
    13,
    'FBadgeStyles badgeStyles({required FColorScheme color, required FTypography text, required FStyle style}) =>\n    FBadgeStyles(\n      primary: FBadgeStyle(\n        decoration: BoxDecoration(color: color.primary, borderRadius: const BorderRadius.all(Radius.circular(100))),\n        contentStyle: FBadgeContentStyle(\n          labelTextStyle: text.sm.copyWith(color: color.primaryForeground, fontWeight: FontWeight.w600),\n        ),\n      ),\n      secondary: FBadgeStyle(\n        decoration: BoxDecoration(color: color.secondary, borderRadius: const BorderRadius.all(Radius.circular(100))),\n        contentStyle: FBadgeContentStyle(\n          labelTextStyle: text.sm.copyWith(color: color.secondaryForeground, fontWeight: FontWeight.w600),\n        ),\n      ),\n      outline: FBadgeStyle(\n        decoration: BoxDecoration(\n          border: Border.all(color: color.border, width: style.borderWidth),\n          borderRadius: const BorderRadius.all(Radius.circular(100)),\n        ),\n        contentStyle: FBadgeContentStyle(\n          labelTextStyle: text.sm.copyWith(color: color.foreground, fontWeight: FontWeight.w600),\n        ),\n      ),\n      destructive: FBadgeStyle(\n        decoration: BoxDecoration(color: color.destructive, borderRadius: const BorderRadius.all(Radius.circular(100))),\n        contentStyle: FBadgeContentStyle(\n          labelTextStyle: text.sm.copyWith(color: color.destructiveForeground, fontWeight: FontWeight.w600),\n        ),\n      ),\n    );\n',
    <String>['FBadgeStyles'],
  ),
  fpopoverstyle(
    'FPopoverStyle',
    14,
    'FPopoverStyle popoverStyle({required FColorScheme color, required FStyle style}) => FPopoverStyle(\n  decoration: BoxDecoration(\n    color: color.background,\n    borderRadius: style.borderRadius,\n    border: Border.all(width: style.borderWidth, color: color.border),\n    boxShadow: style.shadow,\n  ),\n);\n',
    <String>['FPopoverStyle'],
  ),
  flinecalendarstyle(
    'FLineCalendarStyle',
    19,
    'FLineCalendarStyle lineCalendarStyle({required FColorScheme color, required FTypography text, required FStyle style}) {\n  final focused = BoxDecoration(\n    border: Border.all(color: color.primary, width: style.borderWidth),\n    borderRadius: style.borderRadius,\n  );\n  final selectedDate = text.xl.copyWith(color: color.primaryForeground, fontWeight: FontWeight.w500, height: 0);\n  final selectedWeekday = text.xs.copyWith(color: color.primaryForeground, fontWeight: FontWeight.w500, height: 0);\n  final date = text.xl.copyWith(color: color.primary, fontWeight: FontWeight.w500, height: 0);\n  final weekday = text.xs.copyWith(color: color.mutedForeground, fontWeight: FontWeight.w500, height: 0);\n  return FLineCalendarStyle(\n    selectedItemStyle: FLineCalendarItemStyle(\n      decoration: BoxDecoration(color: color.primary, borderRadius: style.borderRadius),\n      focusedDecoration: focused.copyWith(color: color.primary),\n      todayIndicatorColor: color.primaryForeground,\n      dateTextStyle: selectedDate,\n      weekdayTextStyle: selectedWeekday,\n    ),\n    selectedHoveredItemStyle: FLineCalendarItemStyle(\n      decoration: BoxDecoration(color: color.hover(color.primary), borderRadius: style.borderRadius),\n      focusedDecoration: focused.copyWith(color: color.hover(color.primary)),\n      todayIndicatorColor: color.hover(color.primaryForeground),\n      dateTextStyle: selectedDate,\n      weekdayTextStyle: selectedWeekday,\n    ),\n    unselectedItemStyle: FLineCalendarItemStyle(\n      decoration: BoxDecoration(\n        color: color.background,\n        border: Border.all(color: color.border),\n        borderRadius: style.borderRadius,\n      ),\n      focusedDecoration: focused.copyWith(color: color.background),\n      todayIndicatorColor: color.primary,\n      dateTextStyle: date,\n      weekdayTextStyle: weekday,\n    ),\n    unselectedHoveredItemStyle: FLineCalendarItemStyle(\n      decoration: BoxDecoration(\n        color: color.secondary,\n        border: Border.all(color: color.border),\n        borderRadius: style.borderRadius,\n      ),\n      focusedDecoration: focused.copyWith(color: color.secondary),\n      todayIndicatorColor: color.hover(color.primary),\n      dateTextStyle: date,\n      weekdayTextStyle: weekday,\n    ),\n    tappableStyle: style.tappableStyle,\n  );\n}\n',
    <String>['FLineCalendarStyle'],
  ),
  fbreadcrumbstyle(
    'FBreadcrumbStyle',
    17,
    'FBreadcrumbStyle breadcrumbStyle({required FColorScheme color, required FTypography text, required FStyle style}) =>\n    FBreadcrumbStyle(\n      selectedTextStyle: text.sm.copyWith(fontWeight: FontWeight.w400, color: color.foreground),\n      unselectedTextStyle: text.sm.copyWith(fontWeight: FontWeight.w400, color: color.mutedForeground),\n      hoveredTextStyle: text.sm.copyWith(\n        fontWeight: FontWeight.w400,\n        color: color.primary,\n        decoration: TextDecoration.underline,\n      ),\n      iconStyle: IconThemeData(color: color.mutedForeground, size: 16),\n      tappableStyle: style.tappableStyle,\n    );\n',
    <String>['FBreadcrumbStyle'],
  ),
  fdatefieldstyle(
    'FDateFieldStyle',
    16,
    'FDateFieldStyle dateFieldStyle({required FColorScheme color, required FTypography text, required FStyle style}) =>\n    FDateFieldStyle(\n      textFieldStyle: _textFieldStyle(color: color, text: text, style: style),\n      popoverStyle: _popoverStyle(color: color, style: style),\n      calendarStyle: _calendarStyle(color: color, text: text, style: style),\n      iconStyle: IconThemeData(color: color.mutedForeground, size: 18),\n    );\n',
    <String>[
      'FDateFieldStyle',
      'FTextFieldStyle',
      'FLabelStyles',
      'FLabelStateStyles',
      'FTextFieldStateStyle',
      'FTextFieldBorderStyle',
      'FTextFieldErrorStyle',
      'FPopoverStyle',
      'FCalendarStyle',
      'FCalendarHeaderStyle',
      'FButtonStyles',
      'FButtonStyle',
      'FButtonContentStyle',
      'FCalendarDayPickerStyle',
      'FCalendarYearMonthPickerStyle',
    ],
  ),
  favatarstyle(
    'FAvatarStyle',
    13,
    'FAvatarStyle avatarStyle({required FColorScheme color, required FTypography text}) => FAvatarStyle(\n  backgroundColor: color.muted,\n  foregroundColor: color.mutedForeground,\n  textStyle: text.base.copyWith(color: color.mutedForeground, height: 0),\n);\n',
    <String>['FAvatarStyle'],
  ),
  fselectgroupstyle(
    'FSelectGroupStyle',
    18,
    'FSelectGroupStyle selectGroupStyle({required FColorScheme color, required FTypography text, required FStyle style}) =>\n    FSelectGroupStyle(\n      labelLayoutStyle: _labelStyles(style: style).verticalStyle.layout,\n      enabledStyle: FSelectGroupStateStyle(\n        labelTextStyle: style.enabledFormFieldStyle.labelTextStyle,\n        descriptionTextStyle: style.enabledFormFieldStyle.descriptionTextStyle,\n      ),\n      disabledStyle: FSelectGroupStateStyle(\n        labelTextStyle: style.disabledFormFieldStyle.labelTextStyle,\n        descriptionTextStyle: style.disabledFormFieldStyle.descriptionTextStyle,\n      ),\n      errorStyle: FSelectGroupErrorStyle(\n        labelTextStyle: style.errorFormFieldStyle.labelTextStyle,\n        descriptionTextStyle: style.errorFormFieldStyle.descriptionTextStyle,\n        errorTextStyle: style.errorFormFieldStyle.errorTextStyle,\n      ),\n      checkboxStyle: _checkboxSelectGroupStyle(\n        style: _checkboxStyle(color: color, style: style).transform(\n          (style) => style.copyWith(\n            enabledStyle: style.enabledStyle.copyWith(\n              labelTextStyle: text.sm.copyWith(color: color.primary, fontWeight: FontWeight.w500),\n              descriptionTextStyle: text.sm.copyWith(color: color.mutedForeground),\n            ),\n            disabledStyle: style.disabledStyle.copyWith(\n              labelTextStyle: text.sm.copyWith(color: color.disable(color.primary), fontWeight: FontWeight.w500),\n              descriptionTextStyle: text.sm.copyWith(color: color.disable(color.mutedForeground)),\n            ),\n            errorStyle: style.errorStyle.copyWith(\n              labelTextStyle: text.sm.copyWith(color: color.primary, fontWeight: FontWeight.w500),\n              descriptionTextStyle: text.sm.copyWith(color: color.mutedForeground),\n              errorTextStyle: text.sm.copyWith(color: color.error, fontWeight: FontWeight.w500),\n            ),\n          ),\n        ),\n      ),\n      radioStyle: _radioSelectGroupStyle(\n        style: _radioStyle(color: color, style: style).transform(\n          (style) => style.copyWith(\n            enabledStyle: style.enabledStyle.copyWith(\n              labelTextStyle: text.sm.copyWith(color: color.primary, fontWeight: FontWeight.w500),\n              descriptionTextStyle: text.sm.copyWith(color: color.mutedForeground),\n            ),\n            disabledStyle: style.disabledStyle.copyWith(\n              labelTextStyle: text.sm.copyWith(color: color.disable(color.primary), fontWeight: FontWeight.w500),\n              descriptionTextStyle: text.sm.copyWith(color: color.disable(color.mutedForeground)),\n            ),\n            errorStyle: style.errorStyle.copyWith(\n              labelTextStyle: text.sm.copyWith(color: color.primary, fontWeight: FontWeight.w500),\n              descriptionTextStyle: text.sm.copyWith(color: color.mutedForeground),\n              errorTextStyle: text.sm.copyWith(color: color.error, fontWeight: FontWeight.w500),\n            ),\n          ),\n        ),\n      ),\n    );\n',
    <String>[
      'FSelectGroupStyle',
      'FCheckboxSelectGroupStyle',
      'FCheckboxStyle',
      'FRadioSelectGroupStyle',
      'FRadioStyle',
      'FLabelStyles',
      'FLabelStateStyles',
    ],
  ),
  fcheckboxselectgroupstyle(
    'FCheckboxSelectGroupStyle',
    26,
    'FCheckboxSelectGroupStyle checkboxSelectGroupStyle({required FCheckboxStyle style}) => FCheckboxSelectGroupStyle(\n  labelLayoutStyle: style.labelLayoutStyle,\n  focusedOutlineStyle: style.focusedOutlineStyle,\n  enabledStyle: style.enabledStyle,\n  disabledStyle: style.disabledStyle,\n  errorStyle: style.errorStyle,\n);\n',
    <String>['FCheckboxSelectGroupStyle'],
  ),
  fradioselectgroupstyle(
    'FRadioSelectGroupStyle',
    23,
    'FRadioSelectGroupStyle radioSelectGroupStyle({required FRadioStyle style}) => FRadioSelectGroupStyle(\n  animationDuration: style.animationDuration,\n  curve: style.curve,\n  labelLayoutStyle: style.labelLayoutStyle,\n  focusedOutlineStyle: style.focusedOutlineStyle,\n  enabledStyle: style.enabledStyle,\n  disabledStyle: style.disabledStyle,\n  errorStyle: style.errorStyle,\n);\n',
    <String>['FRadioSelectGroupStyle'],
  ),
  fcheckboxstyle(
    'FCheckboxStyle',
    15,
    'FCheckboxStyle checkboxStyle({required FColorScheme color, required FStyle style}) => FCheckboxStyle(\n  labelLayoutStyle: _labelStyles(style: style).horizontalStyle.layout,\n  focusedOutlineStyle: FFocusedOutlineStyle(\n    color: style.focusedOutlineStyle.color,\n    borderRadius: BorderRadius.circular(4),\n  ),\n  enabledStyle: FCheckboxStateStyle(\n    labelTextStyle: style.enabledFormFieldStyle.labelTextStyle,\n    descriptionTextStyle: style.enabledFormFieldStyle.descriptionTextStyle,\n    borderColor: color.primary,\n    iconStyle: IconThemeData(color: color.primaryForeground, size: 14),\n    checkedBackgroundColor: color.primary,\n    uncheckedBackgroundColor: color.background,\n  ),\n  disabledStyle: FCheckboxStateStyle(\n    labelTextStyle: style.disabledFormFieldStyle.labelTextStyle,\n    descriptionTextStyle: style.disabledFormFieldStyle.descriptionTextStyle,\n    borderColor: color.disable(color.primary),\n    iconStyle: IconThemeData(color: color.disable(color.primaryForeground), size: 14),\n    checkedBackgroundColor: color.disable(color.primary),\n    uncheckedBackgroundColor: color.disable(color.background),\n  ),\n  errorStyle: FCheckboxErrorStyle(\n    labelTextStyle: style.errorFormFieldStyle.labelTextStyle,\n    descriptionTextStyle: style.errorFormFieldStyle.descriptionTextStyle,\n    errorTextStyle: style.errorFormFieldStyle.errorTextStyle,\n    borderColor: color.error,\n    iconStyle: IconThemeData(color: color.errorForeground, size: 14),\n    checkedBackgroundColor: color.error,\n    uncheckedBackgroundColor: color.background,\n  ),\n);\n',
    <String>['FCheckboxStyle', 'FLabelStyles', 'FLabelStateStyles'],
  ),
  ftimefieldstyle(
    'FTimeFieldStyle',
    16,
    'FTimeFieldStyle timeFieldStyle({required FColorScheme color, required FTypography text, required FStyle style}) =>\n    FTimeFieldStyle(\n      textFieldStyle: _textFieldStyle(color: color, text: text, style: style),\n      popoverStyle: _popoverStyle(color: color, style: style),\n      pickerStyle: _timePickerStyle(color: color, text: text, style: style),\n      iconStyle: IconThemeData(color: color.mutedForeground, size: 18),\n    );\n',
    <String>[
      'FTimeFieldStyle',
      'FTextFieldStyle',
      'FLabelStyles',
      'FLabelStateStyles',
      'FButtonStyles',
      'FButtonStyle',
      'FButtonContentStyle',
      'FTextFieldStateStyle',
      'FTextFieldBorderStyle',
      'FTextFieldErrorStyle',
      'FPopoverStyle',
      'FTimePickerStyle',
    ],
  ),
  fsliderstyles(
    'FSliderStyles',
    14,
    'FSliderStyles sliderStyles({required FColorScheme color, required FTypography text, required FStyle style}) {\n  final enabledHorizontalStyle = FSliderStateStyle(\n    labelTextStyle: style.enabledFormFieldStyle.labelTextStyle,\n    descriptionTextStyle: style.enabledFormFieldStyle.descriptionTextStyle,\n    activeColor: color.primary,\n    inactiveColor: color.secondary,\n    markStyle: FSliderMarkStyle(\n      tickColor: color.mutedForeground,\n      labelTextStyle: text.xs.copyWith(color: color.mutedForeground),\n      labelAnchor: Alignment.topCenter,\n      labelOffset: 10,\n    ),\n    tooltipStyle: _tooltipStyle(color: color, text: text, style: style),\n    thumbStyle: FSliderThumbStyle(\n      color: color.primaryForeground,\n      borderColor: color.primary,\n      focusedOutlineStyle: style.focusedOutlineStyle,\n    ),\n  );\n  final disabledHorizontalStyle = FSliderStateStyle(\n    labelTextStyle: style.disabledFormFieldStyle.labelTextStyle,\n    descriptionTextStyle: style.disabledFormFieldStyle.descriptionTextStyle,\n    activeColor: color.disable(color.primary, color.secondary),\n    inactiveColor: color.secondary,\n    markStyle: FSliderMarkStyle(\n      tickColor: color.mutedForeground,\n      labelTextStyle: text.xs.copyWith(color: color.mutedForeground),\n      labelAnchor: Alignment.topCenter,\n      labelOffset: 10,\n    ),\n    tooltipStyle: _tooltipStyle(color: color, text: text, style: style),\n    thumbStyle: FSliderThumbStyle(\n      color: color.primaryForeground,\n      borderColor: color.disable(color.primary),\n      focusedOutlineStyle: style.focusedOutlineStyle,\n    ),\n  );\n  final errorHorizontalStyle = FSliderErrorStyle(\n    labelTextStyle: style.errorFormFieldStyle.labelTextStyle,\n    descriptionTextStyle: style.errorFormFieldStyle.descriptionTextStyle,\n    errorTextStyle: style.errorFormFieldStyle.errorTextStyle,\n    activeColor: color.error,\n    inactiveColor: color.secondary,\n    markStyle: FSliderMarkStyle(\n      tickColor: color.mutedForeground,\n      labelTextStyle: text.xs.copyWith(color: color.error),\n      labelAnchor: Alignment.topCenter,\n      labelOffset: 10,\n    ),\n    tooltipStyle: _tooltipStyle(color: color, text: text, style: style),\n    thumbStyle: FSliderThumbStyle(\n      color: color.errorForeground,\n      borderColor: color.error,\n      focusedOutlineStyle: style.focusedOutlineStyle,\n    ),\n  );\n  return FSliderStyles(\n    horizontalStyle: FSliderStyle(\n      labelLayoutStyle: const FLabelLayoutStyle(\n        labelPadding: EdgeInsets.only(bottom: 5),\n        childPadding: EdgeInsets.only(top: 10, bottom: 20, left: 10, right: 10),\n        descriptionPadding: EdgeInsets.only(top: 10),\n        errorPadding: EdgeInsets.only(top: 5),\n      ),\n      enabledStyle: enabledHorizontalStyle,\n      disabledStyle: disabledHorizontalStyle,\n      errorStyle: errorHorizontalStyle,\n    ),\n    verticalStyle: FSliderStyle(\n      labelLayoutStyle: const FLabelLayoutStyle(\n        labelPadding: EdgeInsets.only(bottom: 5),\n        childPadding: EdgeInsets.all(10),\n        descriptionPadding: EdgeInsets.only(top: 5),\n        errorPadding: EdgeInsets.only(top: 5),\n      ),\n      enabledStyle: enabledHorizontalStyle.transform(\n        (style) =>\n            style.copyWith(markStyle: style.markStyle.copyWith(labelAnchor: Alignment.centerRight, labelOffset: -10)),\n      ),\n      disabledStyle: disabledHorizontalStyle.transform(\n        (style) =>\n            style.copyWith(markStyle: style.markStyle.copyWith(labelAnchor: Alignment.centerRight, labelOffset: -10)),\n      ),\n      errorStyle: errorHorizontalStyle.transform(\n        (style) =>\n            style.copyWith(markStyle: style.markStyle.copyWith(labelAnchor: Alignment.centerRight, labelOffset: -10)),\n      ),\n      tooltipTipAnchor: FTouch.primary ? Alignment.bottomCenter : Alignment.centerLeft,\n      tooltipThumbAnchor: FTouch.primary ? Alignment.topCenter : Alignment.centerRight,\n    ),\n  );\n}\n',
    <String>['FSliderStyles', 'FTooltipStyle'],
  ),
  ftextfieldstatestyle(
    'FTextFieldStateStyle',
    21,
    'FTextFieldStateStyle textFieldStateStyle({\n  required Color contentColor,\n  required Color hintColor,\n  required Color focusedBorderColor,\n  required Color unfocusedBorderColor,\n  required FFormFieldStyle formFieldStyle,\n  required FTypography text,\n  required FStyle style,\n}) => FTextFieldStateStyle(\n  labelTextStyle: formFieldStyle.labelTextStyle,\n  contentTextStyle: text.sm.copyWith(fontFamily: text.defaultFontFamily, color: contentColor),\n  hintTextStyle: text.sm.copyWith(fontFamily: text.defaultFontFamily, color: hintColor),\n  counterTextStyle: text.sm.copyWith(fontFamily: text.defaultFontFamily, color: contentColor),\n  descriptionTextStyle: formFieldStyle.descriptionTextStyle,\n  focusedStyle: _textFieldBorderStyle(color: focusedBorderColor, style: style),\n  unfocusedStyle: _textFieldBorderStyle(color: unfocusedBorderColor, style: style),\n);\n',
    <String>['FTextFieldStateStyle', 'FTextFieldBorderStyle'],
  ),
  ftextfielderrorstyle(
    'FTextFieldErrorStyle',
    21,
    'FTextFieldErrorStyle textFieldErrorStyle({\n  required FFormFieldErrorStyle formFieldErrorStyle,\n  required Color contentColor,\n  required Color hintColor,\n  required Color focusedBorderColor,\n  required Color unfocusedBorderColor,\n  required FTypography text,\n  required FStyle style,\n}) => FTextFieldErrorStyle.inherit(\n  formFieldErrorStyle: formFieldErrorStyle,\n  contentColor: contentColor,\n  hintColor: hintColor,\n  focusedBorderColor: focusedBorderColor,\n  unfocusedBorderColor: unfocusedBorderColor,\n  text: text,\n  style: style,\n);\n',
    <String>['FTextFieldErrorStyle'],
  ),
  ftextfieldborderstyle(
    'FTextFieldBorderStyle',
    22,
    'FTextFieldBorderStyle textFieldBorderStyle({required Color color, required FStyle style}) =>\n    FTextFieldBorderStyle(color: color, width: style.borderWidth, radius: style.borderRadius);\n',
    <String>['FTextFieldBorderStyle'],
  ),
  ftextfieldstyle(
    'FTextFieldStyle',
    16,
    'FTextFieldStyle textFieldStyle({required FColorScheme color, required FTypography text, required FStyle style}) =>\n    FTextFieldStyle(\n      keyboardAppearance: color.brightness,\n      labelLayoutStyle: _labelStyles(style: style).verticalStyle.layout,\n      clearButtonStyle: _buttonStyles(color: color, text: text, style: style).ghost.transform(\n        (ghost) => ghost.copyWith(\n          iconContentStyle: ghost.iconContentStyle.copyWith(\n            enabledStyle: IconThemeData(color: color.mutedForeground, size: 17),\n          ),\n        ),\n      ),\n      enabledStyle: _textFieldStateStyle(\n        contentColor: color.primary,\n        hintColor: color.mutedForeground,\n        focusedBorderColor: color.primary,\n        unfocusedBorderColor: color.border,\n        formFieldStyle: style.enabledFormFieldStyle,\n        text: text,\n        style: style,\n      ),\n      disabledStyle: _textFieldStateStyle(\n        contentColor: color.disable(color.primary),\n        hintColor: color.disable(color.border),\n        focusedBorderColor: color.disable(color.border),\n        unfocusedBorderColor: color.disable(color.border),\n        formFieldStyle: style.disabledFormFieldStyle,\n        text: text,\n        style: style,\n      ),\n      errorStyle: _textFieldErrorStyle(\n        contentColor: color.primary,\n        hintColor: color.mutedForeground,\n        focusedBorderColor: color.error,\n        unfocusedBorderColor: color.error,\n        formFieldErrorStyle: style.errorFormFieldStyle,\n        text: text,\n        style: style,\n      ),\n    );\n',
    <String>[
      'FTextFieldStyle',
      'FLabelStyles',
      'FLabelStateStyles',
      'FButtonStyles',
      'FButtonStyle',
      'FButtonContentStyle',
      'FTextFieldStateStyle',
      'FTextFieldBorderStyle',
      'FTextFieldErrorStyle',
    ],
  ),
  fcardstyle(
    'FCardStyle',
    11,
    'FCardStyle cardStyle({required FColorScheme color, required FTypography text, required FStyle style}) => FCardStyle(\n  decoration: BoxDecoration(\n    border: Border.all(color: color.border),\n    borderRadius: style.borderRadius,\n    color: color.background,\n  ),\n  contentStyle: FCardContentStyle(\n    titleTextStyle: text.xl2.copyWith(fontWeight: FontWeight.w600, color: color.foreground, height: 1.5),\n    subtitleTextStyle: text.sm.copyWith(color: color.mutedForeground),\n  ),\n);\n',
    <String>['FCardStyle'],
  ),
  fresizablestyle(
    'FResizableStyle',
    16,
    'FResizableStyle resizableStyle({required FColorScheme color, required FStyle style}) => FResizableStyle(\n  horizontalDividerStyle: FResizableDividerStyle(\n    color: color.border,\n    focusedOutlineStyle: style.focusedOutlineStyle,\n    thumbStyle: FResizableDividerThumbStyle(\n      decoration: BoxDecoration(color: color.border, borderRadius: style.borderRadius),\n      foregroundColor: color.foreground,\n      height: 20,\n      width: 10,\n    ),\n  ),\n  verticalDividerStyle: FResizableDividerStyle(\n    color: color.border,\n    focusedOutlineStyle: style.focusedOutlineStyle,\n    thumbStyle: FResizableDividerThumbStyle(\n      decoration: BoxDecoration(color: color.border, borderRadius: style.borderRadius),\n      foregroundColor: color.foreground,\n      height: 10,\n      width: 20,\n    ),\n  ),\n);\n',
    <String>['FResizableStyle'],
  ),
  fradiostyle(
    'FRadioStyle',
    12,
    'FRadioStyle radioStyle({required FColorScheme color, required FStyle style}) => FRadioStyle(\n  labelLayoutStyle: _labelStyles(style: style).horizontalStyle.layout,\n  focusedOutlineStyle: FFocusedOutlineStyle(color: color.primary, borderRadius: BorderRadius.circular(100)),\n  enabledStyle: FRadioStateStyle(\n    labelTextStyle: style.enabledFormFieldStyle.labelTextStyle,\n    descriptionTextStyle: style.enabledFormFieldStyle.descriptionTextStyle,\n    borderColor: color.primary,\n    selectedColor: color.primary,\n    backgroundColor: color.background,\n  ),\n  disabledStyle: FRadioStateStyle(\n    labelTextStyle: style.disabledFormFieldStyle.labelTextStyle,\n    descriptionTextStyle: style.disabledFormFieldStyle.descriptionTextStyle,\n    borderColor: color.disable(color.primary),\n    selectedColor: color.disable(color.primary),\n    backgroundColor: color.background,\n  ),\n  errorStyle: FRadioErrorStyle(\n    labelTextStyle: style.errorFormFieldStyle.labelTextStyle,\n    descriptionTextStyle: style.errorFormFieldStyle.descriptionTextStyle,\n    errorTextStyle: style.errorFormFieldStyle.errorTextStyle,\n    borderColor: color.error,\n    selectedColor: color.error,\n    backgroundColor: color.background,\n  ),\n);\n',
    <String>['FRadioStyle', 'FLabelStyles', 'FLabelStateStyles'],
  ),
  ftimepickerstyle(
    'FTimePickerStyle',
    17,
    'FTimePickerStyle timePickerStyle({required FColorScheme color, required FStyle style, required FTypography text}) =>\n    FTimePickerStyle(\n      textStyle: text.base.copyWith(fontWeight: FontWeight.w500),\n      selectionBorderRadius: style.borderRadius,\n      selectionColor: color.muted,\n      selectionHeightAdjustment: 5,\n      spacing: 2,\n      focusedOutlineStyle: style.focusedOutlineStyle,\n      padding: const EdgeInsetsDirectional.only(start: 10, end: 10),\n    );\n',
    <String>['FTimePickerStyle'],
  ),
  fpickerstyle(
    'FPickerStyle',
    13,
    'FPickerStyle pickerStyle({required FColorScheme color, required FStyle style, required FTypography text}) =>\n    FPickerStyle(\n      textStyle: text.base.copyWith(fontWeight: FontWeight.w500),\n      selectionBorderRadius: style.borderRadius,\n      selectionColor: color.muted,\n      focusedOutlineStyle: style.focusedOutlineStyle,\n    );\n',
    <String>['FPickerStyle'],
  ),
  fselectmenutilestyle(
    'FSelectMenuTileStyle',
    21,
    'FSelectMenuTileStyle selectMenuTileStyle({\n  required FColorScheme color,\n  required FTypography text,\n  required FStyle style,\n}) {\n  final groupStyle = _tileGroupStyle(color: color, style: style, text: text);\n  return FSelectMenuTileStyle(\n    labelLayoutStyle: groupStyle.labelLayoutStyle,\n    menuStyle: _popoverMenuStyle(color: color, style: style, text: text),\n    tileStyle: groupStyle.tileStyle,\n    enabledStyle: groupStyle.enabledStyle,\n    disabledStyle: groupStyle.disabledStyle,\n    errorStyle: groupStyle.errorStyle,\n  );\n}\n',
    <String>['FSelectMenuTileStyle', 'FPopoverMenuStyle', 'FTileGroupStyle', 'FTileStyle', 'FTileContentStyle'],
  ),
  faccordionstyle(
    'FAccordionStyle',
    16,
    'FAccordionStyle accordionStyle({required FColorScheme color, required FTypography text, required FStyle style}) =>\n    FAccordionStyle(\n      titleTextStyle: text.base.copyWith(fontWeight: FontWeight.w500, color: color.foreground),\n      childTextStyle: text.sm.copyWith(color: color.foreground),\n      iconStyle: IconThemeData(color: color.primary, size: 20),\n      focusedOutlineStyle: style.focusedOutlineStyle,\n      dividerStyle: FDividerStyle(color: color.border, padding: EdgeInsets.zero),\n      tappableStyle: style.tappableStyle.copyWith(animationTween: FTappableAnimations.none),\n    );\n',
    <String>['FAccordionStyle'],
  ),
  fpaginationstyle(
    'FPaginationStyle',
    17,
    'FPaginationStyle paginationStyle({required FColorScheme color, required FTypography text, required FStyle style}) =>\n    FPaginationStyle(\n      selected: FPaginationStateStyle(\n        decoration: BoxDecoration(borderRadius: style.borderRadius, color: color.primary),\n        hoveredDecoration: BoxDecoration(borderRadius: style.borderRadius, color: color.hover(color.primary)),\n        textStyle: text.sm.copyWith(color: color.primaryForeground),\n      ),\n      unselected: FPaginationStateStyle(\n        decoration: BoxDecoration(borderRadius: style.borderRadius, color: color.background),\n        hoveredDecoration: BoxDecoration(borderRadius: style.borderRadius, color: color.border),\n        textStyle: text.sm.copyWith(color: color.primary),\n      ),\n      iconStyle: IconThemeData(color: color.primary, size: 18),\n      actionTappableStyle: style.tappableStyle,\n      pageTappableStyle: style.tappableStyle,\n    );\n',
    <String>['FPaginationStyle'],
  ),
  fprogressstyles(
    'FProgressStyles',
    16,
    'FProgressStyles progressStyles({required FColorScheme color, required FStyle style}) => FProgressStyles(\n  linearProgressStyle: _linearProgressStyle(color: color, style: style),\n  circularIconProgressStyle: IconThemeData(color: color.mutedForeground, size: 20),\n);\n',
    <String>['FProgressStyles', 'FLinearProgressStyle'],
  ),
  flinearprogressstyle(
    'FLinearProgressStyle',
    21,
    'FLinearProgressStyle linearProgressStyle({required FColorScheme color, required FStyle style}) => FLinearProgressStyle(\n  backgroundDecoration: BoxDecoration(borderRadius: style.borderRadius, color: color.secondary),\n  progressDecoration: BoxDecoration(borderRadius: style.borderRadius, color: color.primary),\n);\n',
    <String>['FLinearProgressStyle'],
  ),
  fswitchstyle(
    'FSwitchStyle',
    13,
    'FSwitchStyle switchStyle({required FColorScheme color, required FStyle style}) => FSwitchStyle(\n  focusColor: color.primary,\n  labelLayoutStyle: _labelStyles(style: style).horizontalStyle.layout,\n  enabledStyle: FSwitchStateStyle(\n    checkedColor: color.primary,\n    uncheckedColor: color.border,\n    thumbColor: color.background,\n    labelTextStyle: style.enabledFormFieldStyle.labelTextStyle,\n    descriptionTextStyle: style.enabledFormFieldStyle.descriptionTextStyle,\n  ),\n  disabledStyle: FSwitchStateStyle(\n    checkedColor: color.disable(color.primary),\n    uncheckedColor: color.disable(color.border),\n    thumbColor: color.background,\n    labelTextStyle: style.disabledFormFieldStyle.labelTextStyle,\n    descriptionTextStyle: style.disabledFormFieldStyle.descriptionTextStyle,\n  ),\n  errorStyle: FSwitchErrorStyle(\n    labelTextStyle: style.errorFormFieldStyle.labelTextStyle,\n    descriptionTextStyle: style.errorFormFieldStyle.descriptionTextStyle,\n    errorTextStyle: style.errorFormFieldStyle.errorTextStyle,\n  ),\n);\n',
    <String>['FSwitchStyle', 'FLabelStyles', 'FLabelStateStyles'],
  ),
  fselectstyle(
    'FSelectStyle',
    13,
    'FSelectStyle selectStyle({required FColorScheme color, required FTypography text, required FStyle style}) =>\n    FSelectStyle(\n      selectFieldStyle: _textFieldStyle(color: color, text: text, style: style),\n      iconStyle: IconThemeData(color: color.mutedForeground, size: 18),\n      popoverStyle: _popoverStyle(color: color, style: style),\n      searchStyle: _selectSearchStyle(color: color, text: text, style: style),\n      contentStyle: _selectContentStyle(color: color, text: text, style: style),\n      emptyTextStyle: text.sm,\n    );\n',
    <String>[
      'FSelectStyle',
      'FPopoverStyle',
      'FSelectSearchStyle',
      'FTextFieldStyle',
      'FLabelStyles',
      'FLabelStateStyles',
      'FButtonStyles',
      'FButtonStyle',
      'FButtonContentStyle',
      'FTextFieldStateStyle',
      'FTextFieldBorderStyle',
      'FTextFieldErrorStyle',
      'FDividerStyles',
      'FProgressStyles',
      'FLinearProgressStyle',
      'FSelectContentStyle',
      'FSelectSectionStyle',
      'FSelectItemStyle',
      'FSelectScrollHandleStyle',
    ],
  ),
  fselectcontentstyle(
    'FSelectContentStyle',
    20,
    'FSelectContentStyle selectContentStyle({\n  required FColorScheme color,\n  required FStyle style,\n  required FTypography text,\n}) => FSelectContentStyle(\n  sectionStyle: _selectSectionStyle(color: color, style: style, text: text),\n  scrollHandleStyle: _selectScrollHandleStyle(color: color),\n);\n',
    <String>['FSelectContentStyle', 'FSelectSectionStyle', 'FSelectItemStyle', 'FSelectScrollHandleStyle'],
  ),
  fselectscrollhandlestyle(
    'FSelectScrollHandleStyle',
    25,
    'FSelectScrollHandleStyle selectScrollHandleStyle({required FColorScheme color}) =>\n    FSelectScrollHandleStyle(iconStyle: IconThemeData(color: color.primary, size: 17), background: color.background);\n',
    <String>['FSelectScrollHandleStyle'],
  ),
  fselectsearchstyle(
    'FSelectSearchStyle',
    19,
    'FSelectSearchStyle selectSearchStyle({required FColorScheme color, required FTypography text, required FStyle style}) =>\n    FSelectSearchStyle(\n      textFieldStyle: _textFieldStyle(color: color, text: text, style: style).transform(\n        (style) => style.copyWith(\n          enabledStyle: style.enabledStyle.copyWith(\n            focusedStyle: style.enabledStyle.focusedStyle.copyWith(color: Colors.transparent, width: 0),\n            unfocusedStyle: style.enabledStyle.unfocusedStyle.copyWith(color: Colors.transparent, width: 0),\n          ),\n        ),\n      ),\n      iconStyle: IconThemeData(size: 15, color: color.mutedForeground),\n      dividerStyle: _dividerStyles(\n        color: color,\n        style: style,\n      ).horizontalStyle.copyWith(width: 2, padding: EdgeInsets.zero),\n      loadingIndicatorStyle: _progressStyles(color: color, style: style).circularIconProgressStyle,\n    );\n',
    <String>[
      'FSelectSearchStyle',
      'FTextFieldStyle',
      'FLabelStyles',
      'FLabelStateStyles',
      'FButtonStyles',
      'FButtonStyle',
      'FButtonContentStyle',
      'FTextFieldStateStyle',
      'FTextFieldBorderStyle',
      'FTextFieldErrorStyle',
      'FDividerStyles',
      'FProgressStyles',
      'FLinearProgressStyle',
    ],
  ),
  fselectsectionstyle(
    'FSelectSectionStyle',
    20,
    'FSelectSectionStyle selectSectionStyle({\n  required FColorScheme color,\n  required FStyle style,\n  required FTypography text,\n}) => FSelectSectionStyle(\n  enabledLabelTextStyle: text.sm.copyWith(color: color.primary, fontWeight: FontWeight.w600),\n  disabledLabelTextStyle: text.sm.copyWith(color: color.disable(color.primary), fontWeight: FontWeight.w600),\n  itemStyle: _selectItemStyle(color: color, style: style, text: text),\n);\n',
    <String>['FSelectSectionStyle', 'FSelectItemStyle'],
  ),
  fselectitemstyle(
    'FSelectItemStyle',
    17,
    'FSelectItemStyle selectItemStyle({required FColorScheme color, required FStyle style, required FTypography text}) =>\n    FSelectItemStyle(\n      enabledHoveredDecoration: BoxDecoration(color: color.secondary, borderRadius: style.borderRadius),\n      enabledTextStyle: text.sm.copyWith(color: color.primary),\n      disabledTextStyle: text.sm.copyWith(color: color.disable(color.primary)),\n      enabledIconStyle: IconThemeData(color: color.primary, size: 15),\n      disabledIconStyle: IconThemeData(color: color.disable(color.primary), size: 15),\n      tappableStyle: FTappableStyle(animationTween: FTappableAnimations.none),\n    );\n',
    <String>['FSelectItemStyle'],
  ),
  fcalendarstyle(
    'FCalendarStyle',
    15,
    'FCalendarStyle calendarStyle({required FColorScheme color, required FTypography text, required FStyle style}) =>\n    FCalendarStyle(\n      headerStyle: _calendarHeaderStyle(colorScheme: color, typography: text, style: style),\n      dayPickerStyle: _calendarDayPickerStyle(colorScheme: color, typography: text, style: style),\n      yearMonthPickerStyle: _calendarYearMonthPickerStyle(colorScheme: color, typography: text, style: style),\n      decoration: BoxDecoration(\n        borderRadius: style.borderRadius,\n        border: Border.all(color: color.border),\n        color: color.background,\n      ),\n    );\n',
    <String>[
      'FCalendarStyle',
      'FCalendarHeaderStyle',
      'FButtonStyles',
      'FButtonStyle',
      'FButtonContentStyle',
      'FCalendarDayPickerStyle',
      'FCalendarYearMonthPickerStyle',
    ],
  ),
  fcalendarheaderstyle(
    'FCalendarHeaderStyle',
    21,
    'FCalendarHeaderStyle calendarHeaderStyle({\n  required FColorScheme colorScheme,\n  required FTypography typography,\n  required FStyle style,\n}) => FCalendarHeaderStyle(\n  focusedOutlineStyle: style.focusedOutlineStyle,\n  buttonStyle: _buttonStyles(color: colorScheme, text: typography, style: style).outline.transform(\n    (style) => style.copyWith(\n      iconContentStyle: style.iconContentStyle.copyWith(\n        enabledStyle: IconThemeData(color: colorScheme.mutedForeground, size: 17),\n        disabledStyle: IconThemeData(color: colorScheme.disable(colorScheme.mutedForeground), size: 17),\n      ),\n    ),\n  ),\n  headerTextStyle: typography.base.copyWith(color: colorScheme.primary, fontWeight: FontWeight.w600),\n  tappableStyle: style.tappableStyle.copyWith(animationTween: FTappableAnimations.none),\n);\n',
    <String>['FCalendarHeaderStyle', 'FButtonStyles', 'FButtonStyle', 'FButtonContentStyle'],
  ),
  fcalendardaypickerstyle(
    'FCalendarDayPickerStyle',
    24,
    'FCalendarDayPickerStyle calendarDayPickerStyle({\n  required FColorScheme colorScheme,\n  required FTypography typography,\n  required FStyle style,\n}) {\n  final textStyle = typography.base.copyWith(color: colorScheme.foreground, fontWeight: FontWeight.w500);\n  final mutedTextStyle = typography.base.copyWith(\n    color: colorScheme.disable(colorScheme.mutedForeground),\n    fontWeight: FontWeight.w500,\n  );\n  final disabled = FCalendarDayStyle(\n    selectedStyle: FCalendarEntryStyle(\n      backgroundColor: colorScheme.primaryForeground,\n      textStyle: mutedTextStyle,\n      focusedBorderColor: colorScheme.primaryForeground,\n      radius: const Radius.circular(4),\n      tappableStyle: style.tappableStyle.copyWith(animationTween: FTappableAnimations.none),\n    ),\n    unselectedStyle: FCalendarEntryStyle(\n      backgroundColor: colorScheme.background,\n      textStyle: mutedTextStyle,\n      focusedBorderColor: colorScheme.background,\n      radius: const Radius.circular(4),\n      tappableStyle: style.tappableStyle.copyWith(animationTween: FTappableAnimations.none),\n    ),\n  );\n  return FCalendarDayPickerStyle(\n    headerTextStyle: typography.xs.copyWith(color: colorScheme.mutedForeground),\n    selectableStyles: (\n      current: FCalendarDayStyle(\n        selectedStyle: FCalendarEntryStyle(\n          backgroundColor: colorScheme.foreground,\n          textStyle: typography.base.copyWith(color: colorScheme.background, fontWeight: FontWeight.w500),\n          focusedBorderColor: colorScheme.foreground,\n          radius: const Radius.circular(4),\n          tappableStyle: style.tappableStyle.copyWith(animationTween: FTappableAnimations.none),\n        ),\n        unselectedStyle: FCalendarEntryStyle(\n          backgroundColor: colorScheme.background,\n          textStyle: textStyle,\n          hoveredBackgroundColor: colorScheme.secondary,\n          focusedBorderColor: colorScheme.foreground,\n          radius: const Radius.circular(4),\n          tappableStyle: style.tappableStyle.copyWith(animationTween: FTappableAnimations.none),\n        ),\n      ),\n      enclosing: FCalendarDayStyle(\n        selectedStyle: FCalendarEntryStyle(\n          backgroundColor: colorScheme.primaryForeground,\n          textStyle: mutedTextStyle,\n          focusedBorderColor: colorScheme.foreground,\n          radius: const Radius.circular(4),\n          tappableStyle: style.tappableStyle.copyWith(animationTween: FTappableAnimations.none),\n        ),\n        unselectedStyle: FCalendarEntryStyle(\n          backgroundColor: colorScheme.background,\n          textStyle: mutedTextStyle,\n          hoveredBackgroundColor: colorScheme.secondary,\n          focusedBorderColor: colorScheme.foreground,\n          radius: const Radius.circular(4),\n          tappableStyle: style.tappableStyle.copyWith(animationTween: FTappableAnimations.none),\n        ),\n      ),\n    ),\n    unselectableStyles: (current: disabled, enclosing: disabled),\n  );\n}\n',
    <String>['FCalendarDayPickerStyle'],
  ),
  fcalendaryearmonthpickerstyle(
    'FCalendarYearMonthPickerStyle',
    30,
    'FCalendarYearMonthPickerStyle calendarYearMonthPickerStyle({\n  required FColorScheme colorScheme,\n  required FTypography typography,\n  required FStyle style,\n}) => FCalendarYearMonthPickerStyle(\n  enabledStyle: FCalendarEntryStyle(\n    backgroundColor: colorScheme.background,\n    textStyle: typography.base.copyWith(color: colorScheme.foreground, fontWeight: FontWeight.w500),\n    hoveredBackgroundColor: colorScheme.secondary,\n    focusedBorderColor: colorScheme.foreground,\n    radius: const Radius.circular(8),\n    tappableStyle: style.tappableStyle.copyWith(animationTween: FTappableAnimations.none),\n  ),\n  disabledStyle: FCalendarEntryStyle(\n    backgroundColor: colorScheme.background,\n    textStyle: typography.base.copyWith(\n      color: colorScheme.disable(colorScheme.mutedForeground),\n      fontWeight: FontWeight.w500,\n    ),\n    focusedBorderColor: colorScheme.background,\n    radius: const Radius.circular(8),\n    tappableStyle: style.tappableStyle.copyWith(animationTween: FTappableAnimations.none),\n  ),\n);\n',
    <String>['FCalendarYearMonthPickerStyle'],
  ),
  fheaderstyles(
    'FHeaderStyles',
    14,
    'FHeaderStyles headerStyles({required FColorScheme color, required FTypography text, required FStyle style}) =>\n    FHeaderStyles(\n      rootStyle: FHeaderStyle(\n        titleTextStyle: text.xl3.copyWith(color: color.foreground, fontWeight: FontWeight.w700, height: 1),\n        actionStyle: _headerActionStyle(color: color, style: style, size: 30),\n        padding: style.pagePadding.copyWith(bottom: 15),\n      ),\n      nestedStyle: FHeaderStyle(\n        titleTextStyle: text.xl.copyWith(color: color.foreground, fontWeight: FontWeight.w600, height: 1),\n        actionStyle: _headerActionStyle(color: color, style: style, size: 25),\n        padding: style.pagePadding.copyWith(bottom: 15),\n      ),\n    );\n',
    <String>['FHeaderStyles', 'FHeaderActionStyle'],
  ),
  fheaderactionstyle(
    'FHeaderActionStyle',
    19,
    'FHeaderActionStyle headerActionStyle({required FColorScheme color, required FStyle style, required double size}) =>\n    FHeaderActionStyle(\n      enabledStyle: IconThemeData(color: color.foreground, size: size),\n      disabledStyle: IconThemeData(color: color.disable(color.foreground), size: size),\n      focusedOutlineStyle: style.focusedOutlineStyle,\n      tappableStyle: style.tappableStyle,\n    );\n',
    <String>['FHeaderActionStyle'],
  ),
  fbottomnavigationbaritemstyle(
    'FBottomNavigationBarItemStyle',
    30,
    'FBottomNavigationBarItemStyle bottomNavigationBarItemStyle({required FColorScheme color, required FTypography text}) =>\n    FBottomNavigationBarItemStyle(\n      selectedIconStyle: IconThemeData(color: color.primary, size: 24),\n      unselectedIconStyle: IconThemeData(color: color.disable(color.foreground), size: 24),\n      selectedTextStyle: text.base.copyWith(color: color.primary, fontSize: 10),\n      unselectedTextStyle: text.base.copyWith(color: color.disable(color.foreground), fontSize: 10),\n    );\n',
    <String>['FBottomNavigationBarItemStyle'],
  ),
  fbottomnavigationbarstyle(
    'FBottomNavigationBarStyle',
    26,
    'FBottomNavigationBarStyle bottomNavigationBarStyle({\n  required FColorScheme color,\n  required FTypography text,\n  required FStyle style,\n}) => FBottomNavigationBarStyle(\n  decoration: BoxDecoration(border: Border(top: BorderSide(color: color.border)), color: color.background),\n  focusedOutlineStyle: style.focusedOutlineStyle,\n  itemStyle: _bottomNavigationBarItemStyle(color: color, text: text),\n  tappableStyle: style.tappableStyle,\n);\n',
    <String>['FBottomNavigationBarStyle', 'FBottomNavigationBarItemStyle'],
  ),
  ftabsstyle(
    'FTabsStyle',
    11,
    'FTabsStyle tabsStyle({required FColorScheme color, required FTypography text, required FStyle style}) => FTabsStyle(\n  decoration: BoxDecoration(\n    border: Border.all(color: color.muted),\n    borderRadius: style.borderRadius,\n    color: color.muted,\n  ),\n  selectedLabelTextStyle: text.sm.copyWith(\n    fontWeight: FontWeight.w500,\n    fontFamily: text.defaultFontFamily,\n    color: color.foreground,\n  ),\n  unselectedLabelTextStyle: text.sm.copyWith(\n    fontWeight: FontWeight.w500,\n    fontFamily: text.defaultFontFamily,\n    color: color.mutedForeground,\n  ),\n  indicatorDecoration: BoxDecoration(color: color.background, borderRadius: style.borderRadius),\n  focusedOutlineStyle: style.focusedOutlineStyle,\n);\n',
    <String>['FTabsStyle'],
  ),
  fpopovermenustyle(
    'FPopoverMenuStyle',
    18,
    'FPopoverMenuStyle popoverMenuStyle({required FColorScheme color, required FStyle style, required FTypography text}) =>\n    FPopoverMenuStyle.inherit(color: color, style: style, text: text);\n',
    <String>['FPopoverMenuStyle', 'FTileGroupStyle', 'FTileStyle', 'FTileContentStyle'],
  ),
  ftooltipstyle(
    'FTooltipStyle',
    14,
    'FTooltipStyle tooltipStyle({required FColorScheme color, required FTypography text, required FStyle style}) =>\n    FTooltipStyle(\n      decoration: BoxDecoration(\n        color: color.background,\n        borderRadius: style.borderRadius,\n        border: Border.all(width: style.borderWidth, color: color.border),\n        boxShadow: FTooltipStyle.shadow,\n      ),\n      textStyle: text.sm,\n    );\n',
    <String>['FTooltipStyle'],
  ),
  flabelstyles(
    'FLabelStyles',
    13,
    'FLabelStyles labelStyles({required FStyle style}) => FLabelStyles(\n  horizontalStyle: (\n    layout: const FLabelLayoutStyle(\n      childPadding: EdgeInsets.symmetric(horizontal: 8),\n      descriptionPadding: EdgeInsets.only(top: 2),\n      errorPadding: EdgeInsets.only(top: 2),\n    ),\n    state: _labelStateStyles(style: style),\n  ),\n  verticalStyle: (\n    layout: const FLabelLayoutStyle(\n      labelPadding: EdgeInsets.only(bottom: 5),\n      descriptionPadding: EdgeInsets.only(top: 5),\n      errorPadding: EdgeInsets.only(top: 5),\n    ),\n    state: _labelStateStyles(style: style),\n  ),\n);\n',
    <String>['FLabelStyles', 'FLabelStateStyles'],
  ),
  flabelstatestyles(
    'FLabelStateStyles',
    18,
    'FLabelStateStyles labelStateStyles({required FStyle style}) => FLabelStateStyles(\n  enabledStyle: style.enabledFormFieldStyle,\n  disabledStyle: style.disabledFormFieldStyle,\n  errorStyle: style.errorFormFieldStyle,\n);\n',
    <String>['FLabelStateStyles'],
  ),
  fstyle(
    'FStyle',
    7,
    'FStyle style({required FColorScheme color, required FTypography text}) => FStyle(\n  enabledFormFieldStyle: _formFieldStyle(\n    labelColor: color.primary,\n    descriptionColor: color.mutedForeground,\n    text: text,\n  ),\n  disabledFormFieldStyle: _formFieldStyle(\n    labelColor: color.disable(color.primary),\n    descriptionColor: color.disable(color.mutedForeground),\n    text: text,\n  ),\n  errorFormFieldStyle: _formFieldErrorStyle(\n    labelColor: color.error,\n    descriptionColor: color.mutedForeground,\n    errorColor: color.error,\n    text: text,\n  ),\n  focusedOutlineStyle: FFocusedOutlineStyle(\n    color: color.primary,\n    borderRadius: const BorderRadius.all(Radius.circular(8)),\n  ),\n  iconStyle: IconThemeData(color: color.primary, size: 20),\n  tappableStyle: FTappableStyle(),\n);\n',
    <String>['FStyle', 'FFormFieldStyle', 'FFormFieldErrorStyle'],
  ),
  fformfieldstyle(
    'FFormFieldStyle',
    16,
    'FFormFieldStyle formFieldStyle({\n  required Color labelColor,\n  required Color descriptionColor,\n  required FTypography text,\n}) => FFormFieldStyle(\n  labelTextStyle: text.sm.copyWith(color: labelColor, fontWeight: FontWeight.w600),\n  descriptionTextStyle: text.sm.copyWith(color: descriptionColor),\n);\n',
    <String>['FFormFieldStyle'],
  ),
  fformfielderrorstyle(
    'FFormFieldErrorStyle',
    21,
    'FFormFieldErrorStyle formFieldErrorStyle({\n  required Color errorColor,\n  required Color labelColor,\n  required Color descriptionColor,\n  required FTypography text,\n}) => FFormFieldErrorStyle.inherit(\n  errorColor: errorColor,\n  labelColor: labelColor,\n  descriptionColor: descriptionColor,\n  text: text,\n);\n',
    <String>['FFormFieldErrorStyle'],
  );

  const Registry(this.type, this.position, this.source, this.closure);

  /// The type name.
  final String type;

  /// The position, inclusive, in the source to add an _, to make the function private.
  final int position;

  /// The function to generate.
  final String source;

  /// The functions, including itself, needed to generate a fully compilable style.
  final List<String> closure;
}

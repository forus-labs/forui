// // GENERATED CODE - DO NOT MODIFY BY HAND
//
// **************************************************************************
// forui
// **************************************************************************
//
// ignore_for_file: type=lint
// ignore_for_file: deprecated_member_use

///

/// The registry for all styles in Forui. This was generated by tool/style_preprocessor.
enum Registry {
  fformfieldstyle(
    'FFormFieldStyle',
    16,
    'FFormFieldStyle formFieldStyle({\n  required Color labelColor,\n  required Color descriptionColor,\n  required FTypography typography,\n}) => FFormFieldStyle(\n  labelTextStyle: typography.sm.copyWith(color: labelColor, fontWeight: FontWeight.w600),\n  descriptionTextStyle: typography.sm.copyWith(color: descriptionColor),\n);\n',
    <String>['FFormFieldStyle'],
  ),
  fformfielderrorstyle(
    'FFormFieldErrorStyle',
    21,
    'FFormFieldErrorStyle formFieldErrorStyle({\n  required Color errorColor,\n  required Color labelColor,\n  required Color descriptionColor,\n  required FTypography typography,\n}) => FFormFieldErrorStyle.inherit(\n  errorColor: errorColor,\n  labelColor: labelColor,\n  descriptionColor: descriptionColor,\n  typography: typography,\n);\n',
    <String>['FFormFieldErrorStyle'],
  ),
  fstyle(
    'FStyle',
    7,
    'FStyle style({required FColorScheme colorScheme, required FTypography typography}) => FStyle(\n  enabledFormFieldStyle: _formFieldStyle(\n    labelColor: colorScheme.primary,\n    descriptionColor: colorScheme.mutedForeground,\n    typography: typography,\n  ),\n  disabledFormFieldStyle: _formFieldStyle(\n    labelColor: colorScheme.disable(colorScheme.primary),\n    descriptionColor: colorScheme.disable(colorScheme.mutedForeground),\n    typography: typography,\n  ),\n  errorFormFieldStyle: _formFieldErrorStyle(\n    labelColor: colorScheme.error,\n    descriptionColor: colorScheme.mutedForeground,\n    errorColor: colorScheme.error,\n    typography: typography,\n  ),\n  focusedOutlineStyle: FFocusedOutlineStyle(\n    color: colorScheme.primary,\n    borderRadius: const BorderRadius.all(Radius.circular(8)),\n  ),\n  iconStyle: IconThemeData(color: colorScheme.primary, size: 20),\n  tappableStyle: FTappableStyle(),\n);\n',
    <String>['FStyle', 'FFormFieldStyle', 'FFormFieldErrorStyle'],
  ),
  ftabsstyle(
    'FTabsStyle',
    11,
    'FTabsStyle tabsStyle({required FColorScheme colorScheme, required FTypography typography, required FStyle style}) =>\n    FTabsStyle(\n      decoration: BoxDecoration(\n        border: Border.all(color: colorScheme.muted),\n        borderRadius: style.borderRadius,\n        color: colorScheme.muted,\n      ),\n      selectedLabelTextStyle: typography.sm.copyWith(\n        fontWeight: FontWeight.w500,\n        fontFamily: typography.defaultFontFamily,\n        color: colorScheme.foreground,\n      ),\n      unselectedLabelTextStyle: typography.sm.copyWith(\n        fontWeight: FontWeight.w500,\n        fontFamily: typography.defaultFontFamily,\n        color: colorScheme.mutedForeground,\n      ),\n      indicatorDecoration: BoxDecoration(color: colorScheme.background, borderRadius: style.borderRadius),\n      focusedOutlineStyle: style.focusedOutlineStyle,\n    );\n',
    <String>['FTabsStyle'],
  ),
  fscaffoldstyle(
    'FScaffoldStyle',
    15,
    'FScaffoldStyle scaffoldStyle({required FColorScheme colorScheme, required FStyle style}) => FScaffoldStyle(\n  backgroundColor: colorScheme.background,\n  contentPadding: style.pagePadding.copyWith(top: 0, bottom: 0),\n  footerDecoration: BoxDecoration(border: Border(top: BorderSide(color: colorScheme.border, width: style.borderWidth))),\n);\n',
    <String>['FScaffoldStyle'],
  ),
  flabelstyles(
    'FLabelStyles',
    13,
    'FLabelStyles labelStyles({required FStyle style}) => FLabelStyles(\n  horizontalStyle: (\n    layout: const FLabelLayoutStyle(\n      childPadding: EdgeInsets.symmetric(horizontal: 8),\n      descriptionPadding: EdgeInsets.only(top: 2),\n      errorPadding: EdgeInsets.only(top: 2),\n    ),\n    state: _labelStateStyles(style: style),\n  ),\n  verticalStyle: (\n    layout: const FLabelLayoutStyle(\n      labelPadding: EdgeInsets.only(bottom: 5),\n      descriptionPadding: EdgeInsets.only(top: 5),\n      errorPadding: EdgeInsets.only(top: 5),\n    ),\n    state: _labelStateStyles(style: style),\n  ),\n);\n',
    <String>['FLabelStyles', 'FLabelStateStyles'],
  ),
  flabelstatestyles(
    'FLabelStateStyles',
    18,
    'FLabelStateStyles labelStateStyles({required FStyle style}) => FLabelStateStyles(\n  enabledStyle: style.enabledFormFieldStyle,\n  disabledStyle: style.disabledFormFieldStyle,\n  errorStyle: style.errorFormFieldStyle,\n);\n',
    <String>['FLabelStateStyles'],
  ),
  fpaginationstyle(
    'FPaginationStyle',
    17,
    'FPaginationStyle paginationStyle({\n  required FColorScheme colorScheme,\n  required FTypography typography,\n  required FStyle style,\n}) => FPaginationStyle(\n  selected: FPaginationStateStyle(\n    decoration: BoxDecoration(borderRadius: style.borderRadius, color: colorScheme.primary),\n    hoveredDecoration: BoxDecoration(borderRadius: style.borderRadius, color: colorScheme.hover(colorScheme.primary)),\n    textStyle: typography.sm.copyWith(color: colorScheme.primaryForeground),\n  ),\n  unselected: FPaginationStateStyle(\n    decoration: BoxDecoration(borderRadius: style.borderRadius, color: colorScheme.background),\n    hoveredDecoration: BoxDecoration(borderRadius: style.borderRadius, color: colorScheme.border),\n    textStyle: typography.sm.copyWith(color: colorScheme.primary),\n  ),\n  iconStyle: IconThemeData(color: colorScheme.primary, size: 18),\n  actionTappableStyle: style.tappableStyle,\n  pageTappableStyle: style.tappableStyle,\n);\n',
    <String>['FPaginationStyle'],
  ),
  fcalendarstyle(
    'FCalendarStyle',
    15,
    'FCalendarStyle calendarStyle({\n  required FColorScheme colorScheme,\n  required FTypography typography,\n  required FStyle style,\n}) => FCalendarStyle(\n  headerStyle: _calendarHeaderStyle(colorScheme: colorScheme, typography: typography, style: style),\n  dayPickerStyle: _calendarDayPickerStyle(colorScheme: colorScheme, typography: typography, style: style),\n  yearMonthPickerStyle: _calendarYearMonthPickerStyle(colorScheme: colorScheme, typography: typography, style: style),\n  decoration: BoxDecoration(\n    borderRadius: style.borderRadius,\n    border: Border.all(color: colorScheme.border),\n    color: colorScheme.background,\n  ),\n);\n',
    <String>[
      'FCalendarStyle',
      'FCalendarHeaderStyle',
      'FButtonStyles',
      'FButtonStyle',
      'FButtonContentStyle',
      'FCalendarDayPickerStyle',
      'FCalendarYearMonthPickerStyle',
    ],
  ),
  fcalendarheaderstyle(
    'FCalendarHeaderStyle',
    21,
    'FCalendarHeaderStyle calendarHeaderStyle({\n  required FColorScheme colorScheme,\n  required FTypography typography,\n  required FStyle style,\n}) => FCalendarHeaderStyle(\n  focusedOutlineStyle: style.focusedOutlineStyle,\n  buttonStyle: _buttonStyles(colorScheme: colorScheme, typography: typography, style: style).outline.transform(\n    (style) => style.copyWith(\n      enabledBoxDecoration: style.enabledBoxDecoration.copyWith(borderRadius: BorderRadius.circular(4)),\n      enabledHoverBoxDecoration: style.enabledHoverBoxDecoration.copyWith(borderRadius: BorderRadius.circular(4)),\n      disabledBoxDecoration: style.disabledBoxDecoration.copyWith(borderRadius: BorderRadius.circular(4)),\n      iconContentStyle: style.iconContentStyle.copyWith(\n        enabledStyle: IconThemeData(color: colorScheme.mutedForeground, size: 17),\n        disabledStyle: IconThemeData(color: colorScheme.disable(colorScheme.mutedForeground), size: 17),\n      ),\n    ),\n  ),\n  headerTextStyle: typography.base.copyWith(color: colorScheme.primary, fontWeight: FontWeight.w600),\n  tappableStyle: style.tappableStyle.copyWith(animationTween: FTappableAnimations.none),\n);\n',
    <String>[
      'FCalendarHeaderStyle',
      'FButtonStyles',
      'FButtonStyle',
      'FButtonContentStyle',
    ],
  ),
  fcalendaryearmonthpickerstyle(
    'FCalendarYearMonthPickerStyle',
    30,
    'FCalendarYearMonthPickerStyle calendarYearMonthPickerStyle({\n  required FColorScheme colorScheme,\n  required FTypography typography,\n  required FStyle style,\n}) => FCalendarYearMonthPickerStyle(\n  enabledStyle: FCalendarEntryStyle(\n    backgroundColor: colorScheme.background,\n    textStyle: typography.base.copyWith(color: colorScheme.foreground, fontWeight: FontWeight.w500),\n    hoveredBackgroundColor: colorScheme.secondary,\n    focusedBorderColor: colorScheme.foreground,\n    radius: const Radius.circular(8),\n    tappableStyle: style.tappableStyle.copyWith(animationTween: FTappableAnimations.none),\n  ),\n  disabledStyle: FCalendarEntryStyle(\n    backgroundColor: colorScheme.background,\n    textStyle: typography.base.copyWith(\n      color: colorScheme.disable(colorScheme.mutedForeground),\n      fontWeight: FontWeight.w500,\n    ),\n    focusedBorderColor: colorScheme.background,\n    radius: const Radius.circular(8),\n    tappableStyle: style.tappableStyle.copyWith(animationTween: FTappableAnimations.none),\n  ),\n);\n',
    <String>['FCalendarYearMonthPickerStyle'],
  ),
  fcalendardaypickerstyle(
    'FCalendarDayPickerStyle',
    24,
    'FCalendarDayPickerStyle calendarDayPickerStyle({\n  required FColorScheme colorScheme,\n  required FTypography typography,\n  required FStyle style,\n}) {\n  final textStyle = typography.base.copyWith(color: colorScheme.foreground, fontWeight: FontWeight.w500);\n  final mutedTextStyle = typography.base.copyWith(\n    color: colorScheme.disable(colorScheme.mutedForeground),\n    fontWeight: FontWeight.w500,\n  );\n  final disabled = FCalendarDayStyle(\n    selectedStyle: FCalendarEntryStyle(\n      backgroundColor: colorScheme.primaryForeground,\n      textStyle: mutedTextStyle,\n      focusedBorderColor: colorScheme.primaryForeground,\n      radius: const Radius.circular(4),\n      tappableStyle: style.tappableStyle.copyWith(animationTween: FTappableAnimations.none),\n    ),\n    unselectedStyle: FCalendarEntryStyle(\n      backgroundColor: colorScheme.background,\n      textStyle: mutedTextStyle,\n      focusedBorderColor: colorScheme.background,\n      radius: const Radius.circular(4),\n      tappableStyle: style.tappableStyle.copyWith(animationTween: FTappableAnimations.none),\n    ),\n  );\n  return FCalendarDayPickerStyle(\n    headerTextStyle: typography.xs.copyWith(color: colorScheme.mutedForeground),\n    selectableStyles: (\n      current: FCalendarDayStyle(\n        selectedStyle: FCalendarEntryStyle(\n          backgroundColor: colorScheme.foreground,\n          textStyle: typography.base.copyWith(color: colorScheme.background, fontWeight: FontWeight.w500),\n          focusedBorderColor: colorScheme.foreground,\n          radius: const Radius.circular(4),\n          tappableStyle: style.tappableStyle.copyWith(animationTween: FTappableAnimations.none),\n        ),\n        unselectedStyle: FCalendarEntryStyle(\n          backgroundColor: colorScheme.background,\n          textStyle: textStyle,\n          hoveredBackgroundColor: colorScheme.secondary,\n          focusedBorderColor: colorScheme.foreground,\n          radius: const Radius.circular(4),\n          tappableStyle: style.tappableStyle.copyWith(animationTween: FTappableAnimations.none),\n        ),\n      ),\n      enclosing: FCalendarDayStyle(\n        selectedStyle: FCalendarEntryStyle(\n          backgroundColor: colorScheme.primaryForeground,\n          textStyle: mutedTextStyle,\n          focusedBorderColor: colorScheme.foreground,\n          radius: const Radius.circular(4),\n          tappableStyle: style.tappableStyle.copyWith(animationTween: FTappableAnimations.none),\n        ),\n        unselectedStyle: FCalendarEntryStyle(\n          backgroundColor: colorScheme.background,\n          textStyle: mutedTextStyle,\n          hoveredBackgroundColor: colorScheme.secondary,\n          focusedBorderColor: colorScheme.foreground,\n          radius: const Radius.circular(4),\n          tappableStyle: style.tappableStyle.copyWith(animationTween: FTappableAnimations.none),\n        ),\n      ),\n    ),\n    unselectableStyles: (current: disabled, enclosing: disabled),\n  );\n}\n',
    <String>['FCalendarDayPickerStyle'],
  ),
  fcardstyle(
    'FCardStyle',
    11,
    'FCardStyle cardStyle({required FColorScheme colorScheme, required FTypography typography, required FStyle style}) =>\n    FCardStyle(\n      decoration: BoxDecoration(\n        border: Border.all(color: colorScheme.border),\n        borderRadius: style.borderRadius,\n        color: colorScheme.background,\n      ),\n      contentStyle: _cardContentStyle(colorScheme: colorScheme, typography: typography),\n    );\n',
    <String>['FCardStyle', 'FCardContentStyle'],
  ),
  fcardcontentstyle(
    'FCardContentStyle',
    18,
    'FCardContentStyle cardContentStyle({required FColorScheme colorScheme, required FTypography typography}) =>\n    FCardContentStyle(\n      titleTextStyle: typography.xl2.copyWith(fontWeight: FontWeight.w600, color: colorScheme.foreground, height: 1.5),\n      subtitleTextStyle: typography.sm.copyWith(color: colorScheme.mutedForeground),\n    );\n',
    <String>['FCardContentStyle'],
  ),
  fpickerstyle(
    'FPickerStyle',
    13,
    'FPickerStyle pickerStyle({required FColorScheme colorScheme, required FStyle style, required FTypography typography}) =>\n    FPickerStyle(\n      textStyle: typography.base.copyWith(fontWeight: FontWeight.w500),\n      selectionBorderRadius: style.borderRadius,\n      selectionColor: colorScheme.muted,\n      focusedOutlineStyle: style.focusedOutlineStyle,\n    );\n',
    <String>['FPickerStyle'],
  ),
  ftimefieldstyle(
    'FTimeFieldStyle',
    16,
    'FTimeFieldStyle timeFieldStyle({\n  required FColorScheme colorScheme,\n  required FTypography typography,\n  required FStyle style,\n}) => FTimeFieldStyle(\n  textFieldStyle: _textFieldStyle(colorScheme: colorScheme, typography: typography, style: style),\n  popoverStyle: _popoverStyle(colorScheme: colorScheme, style: style),\n  pickerStyle: _timePickerStyle(colorScheme: colorScheme, typography: typography, style: style),\n  iconStyle: IconThemeData(color: colorScheme.mutedForeground, size: 18),\n);\n',
    <String>[
      'FTimeFieldStyle',
      'FTextFieldStyle',
      'FLabelStyles',
      'FLabelStateStyles',
      'FButtonStyles',
      'FButtonStyle',
      'FButtonContentStyle',
      'FTextFieldStateStyle',
      'FTextFieldBorderStyle',
      'FTextFieldErrorStyle',
      'FPopoverStyle',
      'FTimePickerStyle',
    ],
  ),
  faccordionstyle(
    'FAccordionStyle',
    16,
    'FAccordionStyle accordionStyle({\n  required FColorScheme colorScheme,\n  required FStyle style,\n  required FTypography typography,\n}) => FAccordionStyle(\n  titleTextStyle: typography.base.copyWith(fontWeight: FontWeight.w500, color: colorScheme.foreground),\n  childTextStyle: typography.sm.copyWith(color: colorScheme.foreground),\n  iconStyle: IconThemeData(color: colorScheme.primary, size: 20),\n  focusedOutlineStyle: style.focusedOutlineStyle,\n  dividerStyle: FDividerStyle(color: colorScheme.border, padding: EdgeInsets.zero),\n  tappableStyle: style.tappableStyle.copyWith(animationTween: FTappableAnimations.none),\n);\n',
    <String>['FAccordionStyle'],
  ),
  fcheckboxstyle(
    'FCheckboxStyle',
    15,
    'FCheckboxStyle checkboxStyle({required FColorScheme colorScheme, required FStyle style}) => FCheckboxStyle(\n  labelLayoutStyle: _labelStyles(style: style).horizontalStyle.layout,\n  focusedOutlineStyle: FFocusedOutlineStyle(\n    color: style.focusedOutlineStyle.color,\n    borderRadius: BorderRadius.circular(4),\n  ),\n  enabledStyle: FCheckboxStateStyle(\n    labelTextStyle: style.enabledFormFieldStyle.labelTextStyle,\n    descriptionTextStyle: style.enabledFormFieldStyle.descriptionTextStyle,\n    borderColor: colorScheme.primary,\n    iconStyle: IconThemeData(color: colorScheme.primaryForeground, size: 14),\n    checkedBackgroundColor: colorScheme.primary,\n    uncheckedBackgroundColor: colorScheme.background,\n  ),\n  disabledStyle: FCheckboxStateStyle(\n    labelTextStyle: style.disabledFormFieldStyle.labelTextStyle,\n    descriptionTextStyle: style.disabledFormFieldStyle.descriptionTextStyle,\n    borderColor: colorScheme.disable(colorScheme.primary),\n    iconStyle: IconThemeData(color: colorScheme.disable(colorScheme.primaryForeground), size: 14),\n    checkedBackgroundColor: colorScheme.disable(colorScheme.primary),\n    uncheckedBackgroundColor: colorScheme.disable(colorScheme.background),\n  ),\n  errorStyle: FCheckboxErrorStyle(\n    labelTextStyle: style.errorFormFieldStyle.labelTextStyle,\n    descriptionTextStyle: style.errorFormFieldStyle.descriptionTextStyle,\n    errorTextStyle: style.errorFormFieldStyle.errorTextStyle,\n    borderColor: colorScheme.error,\n    iconStyle: IconThemeData(color: colorScheme.errorForeground, size: 14),\n    checkedBackgroundColor: colorScheme.error,\n    uncheckedBackgroundColor: colorScheme.background,\n  ),\n);\n',
    <String>['FCheckboxStyle', 'FLabelStyles', 'FLabelStateStyles'],
  ),
  fradiostyle(
    'FRadioStyle',
    12,
    'FRadioStyle radioStyle({required FColorScheme colorScheme, required FStyle style}) => FRadioStyle(\n  labelLayoutStyle: _labelStyles(style: style).horizontalStyle.layout,\n  focusedOutlineStyle: FFocusedOutlineStyle(color: colorScheme.primary, borderRadius: BorderRadius.circular(100)),\n  enabledStyle: FRadioStateStyle(\n    labelTextStyle: style.enabledFormFieldStyle.labelTextStyle,\n    descriptionTextStyle: style.enabledFormFieldStyle.descriptionTextStyle,\n    borderColor: colorScheme.primary,\n    selectedColor: colorScheme.primary,\n    backgroundColor: colorScheme.background,\n  ),\n  disabledStyle: FRadioStateStyle(\n    labelTextStyle: style.disabledFormFieldStyle.labelTextStyle,\n    descriptionTextStyle: style.disabledFormFieldStyle.descriptionTextStyle,\n    borderColor: colorScheme.disable(colorScheme.primary),\n    selectedColor: colorScheme.disable(colorScheme.primary),\n    backgroundColor: colorScheme.background,\n  ),\n  errorStyle: FRadioErrorStyle(\n    labelTextStyle: style.errorFormFieldStyle.labelTextStyle,\n    descriptionTextStyle: style.errorFormFieldStyle.descriptionTextStyle,\n    errorTextStyle: style.errorFormFieldStyle.errorTextStyle,\n    borderColor: colorScheme.error,\n    selectedColor: colorScheme.error,\n    backgroundColor: colorScheme.background,\n  ),\n);\n',
    <String>['FRadioStyle', 'FLabelStyles', 'FLabelStateStyles'],
  ),
  fsliderstyles(
    'FSliderStyles',
    14,
    'FSliderStyles sliderStyles({\n  required FColorScheme colorScheme,\n  required FTypography typography,\n  required FStyle style,\n}) {\n  final enabledHorizontalStyle = FSliderStateStyle(\n    labelTextStyle: style.enabledFormFieldStyle.labelTextStyle,\n    descriptionTextStyle: style.enabledFormFieldStyle.descriptionTextStyle,\n    activeColor: colorScheme.primary,\n    inactiveColor: colorScheme.secondary,\n    markStyle: FSliderMarkStyle(\n      tickColor: colorScheme.mutedForeground,\n      labelTextStyle: typography.xs.copyWith(color: colorScheme.mutedForeground),\n      labelAnchor: Alignment.topCenter,\n      labelOffset: 10,\n    ),\n    tooltipStyle: _tooltipStyle(colorScheme: colorScheme, typography: typography, style: style),\n    thumbStyle: FSliderThumbStyle(\n      color: colorScheme.primaryForeground,\n      borderColor: colorScheme.primary,\n      focusedOutlineStyle: style.focusedOutlineStyle,\n    ),\n  );\n  final disabledHorizontalStyle = FSliderStateStyle(\n    labelTextStyle: style.disabledFormFieldStyle.labelTextStyle,\n    descriptionTextStyle: style.disabledFormFieldStyle.descriptionTextStyle,\n    activeColor: colorScheme.disable(colorScheme.primary, colorScheme.secondary),\n    inactiveColor: colorScheme.secondary,\n    markStyle: FSliderMarkStyle(\n      tickColor: colorScheme.mutedForeground,\n      labelTextStyle: typography.xs.copyWith(color: colorScheme.mutedForeground),\n      labelAnchor: Alignment.topCenter,\n      labelOffset: 10,\n    ),\n    tooltipStyle: _tooltipStyle(colorScheme: colorScheme, typography: typography, style: style),\n    thumbStyle: FSliderThumbStyle(\n      color: colorScheme.primaryForeground,\n      borderColor: colorScheme.disable(colorScheme.primary),\n      focusedOutlineStyle: style.focusedOutlineStyle,\n    ),\n  );\n  final errorHorizontalStyle = FSliderErrorStyle(\n    labelTextStyle: style.errorFormFieldStyle.labelTextStyle,\n    descriptionTextStyle: style.errorFormFieldStyle.descriptionTextStyle,\n    errorTextStyle: style.errorFormFieldStyle.errorTextStyle,\n    activeColor: colorScheme.error,\n    inactiveColor: colorScheme.secondary,\n    markStyle: FSliderMarkStyle(\n      tickColor: colorScheme.mutedForeground,\n      labelTextStyle: typography.xs.copyWith(color: colorScheme.error),\n      labelAnchor: Alignment.topCenter,\n      labelOffset: 10,\n    ),\n    tooltipStyle: _tooltipStyle(colorScheme: colorScheme, typography: typography, style: style),\n    thumbStyle: FSliderThumbStyle(\n      color: colorScheme.errorForeground,\n      borderColor: colorScheme.error,\n      focusedOutlineStyle: style.focusedOutlineStyle,\n    ),\n  );\n  return FSliderStyles(\n    horizontalStyle: FSliderStyle(\n      labelLayoutStyle: const FLabelLayoutStyle(\n        labelPadding: EdgeInsets.only(bottom: 5),\n        childPadding: EdgeInsets.only(top: 10, bottom: 20, left: 10, right: 10),\n        descriptionPadding: EdgeInsets.only(top: 10),\n        errorPadding: EdgeInsets.only(top: 5),\n      ),\n      enabledStyle: enabledHorizontalStyle,\n      disabledStyle: disabledHorizontalStyle,\n      errorStyle: errorHorizontalStyle,\n    ),\n    verticalStyle: FSliderStyle(\n      labelLayoutStyle: const FLabelLayoutStyle(\n        labelPadding: EdgeInsets.only(bottom: 5),\n        childPadding: EdgeInsets.all(10),\n        descriptionPadding: EdgeInsets.only(top: 5),\n        errorPadding: EdgeInsets.only(top: 5),\n      ),\n      enabledStyle: enabledHorizontalStyle.transform(\n        (style) =>\n            style.copyWith(markStyle: style.markStyle.copyWith(labelAnchor: Alignment.centerRight, labelOffset: -10)),\n      ),\n      disabledStyle: disabledHorizontalStyle.transform(\n        (style) =>\n            style.copyWith(markStyle: style.markStyle.copyWith(labelAnchor: Alignment.centerRight, labelOffset: -10)),\n      ),\n      errorStyle: errorHorizontalStyle.transform(\n        (style) =>\n            style.copyWith(markStyle: style.markStyle.copyWith(labelAnchor: Alignment.centerRight, labelOffset: -10)),\n      ),\n      tooltipTipAnchor: FTouch.primary ? Alignment.bottomCenter : Alignment.centerLeft,\n      tooltipThumbAnchor: FTouch.primary ? Alignment.topCenter : Alignment.centerRight,\n    ),\n  );\n}\n',
    <String>['FSliderStyles', 'FTooltipStyle'],
  ),
  fpopoverstyle(
    'FPopoverStyle',
    14,
    'FPopoverStyle popoverStyle({required FColorScheme colorScheme, required FStyle style}) => FPopoverStyle(\n  decoration: BoxDecoration(\n    color: colorScheme.background,\n    borderRadius: style.borderRadius,\n    border: Border.all(width: style.borderWidth, color: colorScheme.border),\n    boxShadow: style.shadow,\n  ),\n);\n',
    <String>['FPopoverStyle'],
  ),
  fprogressstyles(
    'FProgressStyles',
    16,
    'FProgressStyles progressStyles({required FColorScheme colorScheme, required FStyle style}) => FProgressStyles(\n  linearProgressStyle: _linearProgressStyle(colorScheme: colorScheme, style: style),\n  circularIconProgressStyle: IconThemeData(color: colorScheme.mutedForeground, size: 20),\n);\n',
    <String>['FProgressStyles', 'FLinearProgressStyle'],
  ),
  flinearprogressstyle(
    'FLinearProgressStyle',
    21,
    'FLinearProgressStyle linearProgressStyle({required FColorScheme colorScheme, required FStyle style}) =>\n    FLinearProgressStyle(\n      backgroundDecoration: BoxDecoration(borderRadius: style.borderRadius, color: colorScheme.secondary),\n      progressDecoration: BoxDecoration(borderRadius: style.borderRadius, color: colorScheme.primary),\n    );\n',
    <String>['FLinearProgressStyle'],
  ),
  ftilestyle(
    'FTileStyle',
    11,
    'FTileStyle tileStyle({required FColorScheme colorScheme, required FTypography typography, required FStyle style}) =>\n    FTileStyle(\n      border: Border.all(width: style.borderWidth, color: colorScheme.border),\n      focusedBorder: Border.all(width: style.borderWidth, color: colorScheme.primary),\n      borderRadius: style.borderRadius,\n      enabledBackgroundColor: colorScheme.background,\n      enabledHoveredBackgroundColor: colorScheme.secondary,\n      disabledBackgroundColor: colorScheme.disable(colorScheme.secondary),\n      dividerStyle: FDividerStyle(color: colorScheme.border, width: style.borderWidth, padding: EdgeInsets.zero),\n      focusedDividerStyle: FDividerStyle(\n        color: colorScheme.primary,\n        width: style.borderWidth,\n        padding: EdgeInsets.zero,\n      ),\n      tappableStyle: style.tappableStyle.copyWith(\n        touchHoverEnterDuration: Duration.zero,\n        touchHoverExitDuration: const Duration(milliseconds: 25),\n      ),\n      contentStyle: _tileContentStyle(colorScheme: colorScheme, typography: typography),\n    );\n',
    <String>['FTileStyle', 'FTileContentStyle'],
  ),
  ftilegroupstyle(
    'FTileGroupStyle',
    16,
    'FTileGroupStyle tileGroupStyle({\n  required FColorScheme colorScheme,\n  required FTypography typography,\n  required FStyle style,\n}) => FTileGroupStyle(\n  borderColor: colorScheme.border,\n  borderWidth: style.borderWidth,\n  borderRadius: style.borderRadius,\n  tileStyle: _tileStyle(colorScheme: colorScheme, typography: typography, style: style),\n  enabledStyle: FFormFieldStyle(\n    labelTextStyle: typography.base.copyWith(\n      color: style.enabledFormFieldStyle.labelTextStyle.color,\n      fontWeight: FontWeight.w600,\n    ),\n    descriptionTextStyle: typography.xs.copyWith(color: style.enabledFormFieldStyle.descriptionTextStyle.color),\n  ),\n  disabledStyle: FFormFieldStyle(\n    labelTextStyle: typography.base.copyWith(\n      color: style.disabledFormFieldStyle.labelTextStyle.color,\n      fontWeight: FontWeight.w600,\n    ),\n    descriptionTextStyle: typography.xs.copyWith(color: style.disabledFormFieldStyle.descriptionTextStyle.color),\n  ),\n  errorStyle: FFormFieldErrorStyle(\n    labelTextStyle: typography.base.copyWith(\n      color: style.enabledFormFieldStyle.labelTextStyle.color,\n      fontWeight: FontWeight.w600,\n    ),\n    descriptionTextStyle: typography.xs.copyWith(color: style.errorFormFieldStyle.descriptionTextStyle.color),\n    errorTextStyle: typography.xs.copyWith(color: style.errorFormFieldStyle.errorTextStyle.color),\n  ),\n);\n',
    <String>['FTileGroupStyle', 'FTileStyle', 'FTileContentStyle'],
  ),
  ftilecontentstyle(
    'FTileContentStyle',
    18,
    'FTileContentStyle tileContentStyle({required FColorScheme colorScheme, required FTypography typography}) =>\n    FTileContentStyle(\n      enabledStyle: FTileContentStateStyle(\n        prefixIconStyle: IconThemeData(color: colorScheme.primary, size: 18),\n        titleTextStyle: typography.base,\n        subtitleTextStyle: typography.xs.copyWith(color: colorScheme.mutedForeground),\n        detailsTextStyle: typography.base.copyWith(color: colorScheme.mutedForeground),\n        suffixIconStyle: IconThemeData(color: colorScheme.mutedForeground, size: 18),\n      ),\n      enabledHoveredStyle: FTileContentStateStyle(\n        prefixIconStyle: IconThemeData(color: colorScheme.primary, size: 18),\n        titleTextStyle: typography.base,\n        subtitleTextStyle: typography.xs.copyWith(color: colorScheme.mutedForeground),\n        detailsTextStyle: typography.base.copyWith(color: colorScheme.mutedForeground),\n        suffixIconStyle: IconThemeData(color: colorScheme.mutedForeground, size: 18),\n      ),\n      disabledStyle: FTileContentStateStyle(\n        prefixIconStyle: IconThemeData(color: colorScheme.disable(colorScheme.primary), size: 18),\n        titleTextStyle: typography.base.copyWith(color: colorScheme.disable(colorScheme.primary)),\n        subtitleTextStyle: typography.xs.copyWith(color: colorScheme.disable(colorScheme.mutedForeground)),\n        detailsTextStyle: typography.base.copyWith(color: colorScheme.disable(colorScheme.mutedForeground)),\n        suffixIconStyle: IconThemeData(color: colorScheme.disable(colorScheme.mutedForeground), size: 18),\n      ),\n    );\n',
    <String>['FTileContentStyle'],
  ),
  fdatefieldstyle(
    'FDateFieldStyle',
    16,
    'FDateFieldStyle dateFieldStyle({\n  required FColorScheme colorScheme,\n  required FTypography typography,\n  required FStyle style,\n}) => FDateFieldStyle(\n  textFieldStyle: _textFieldStyle(colorScheme: colorScheme, typography: typography, style: style),\n  popoverStyle: _popoverStyle(colorScheme: colorScheme, style: style),\n  calendarStyle: _calendarStyle(colorScheme: colorScheme, typography: typography, style: style),\n  iconStyle: IconThemeData(color: colorScheme.mutedForeground, size: 18),\n);\n',
    <String>[
      'FDateFieldStyle',
      'FTextFieldStyle',
      'FLabelStyles',
      'FLabelStateStyles',
      'FTextFieldStateStyle',
      'FTextFieldBorderStyle',
      'FTextFieldErrorStyle',
      'FPopoverStyle',
      'FCalendarStyle',
      'FCalendarHeaderStyle',
      'FButtonStyles',
      'FButtonStyle',
      'FButtonContentStyle',
      'FCalendarDayPickerStyle',
      'FCalendarYearMonthPickerStyle',
    ],
  ),
  fdialogstyle(
    'FDialogStyle',
    13,
    'FDialogStyle dialogStyle({required FStyle style, required FColorScheme colorScheme, required FTypography typography}) =>\n    FDialogStyle(\n      decoration: BoxDecoration(borderRadius: style.borderRadius, color: colorScheme.background),\n      horizontalStyle: _dialogContentStyle(\n        colorScheme: colorScheme,\n        typography: typography,\n        padding: const EdgeInsets.symmetric(horizontal: 25, vertical: 25),\n        actionSpacing: 7,\n      ),\n      verticalStyle: _dialogContentStyle(\n        colorScheme: colorScheme,\n        typography: typography,\n        padding: const EdgeInsets.symmetric(horizontal: 30, vertical: 25),\n        actionSpacing: 8,\n      ),\n    );\n',
    <String>['FDialogStyle', 'FDialogContentStyle'],
  ),
  fdialogcontentstyle(
    'FDialogContentStyle',
    20,
    'FDialogContentStyle dialogContentStyle({\n  required FColorScheme colorScheme,\n  required FTypography typography,\n  required EdgeInsets padding,\n  required double actionSpacing,\n}) => FDialogContentStyle(\n  titleTextStyle: typography.lg.copyWith(fontWeight: FontWeight.w600, color: colorScheme.foreground),\n  bodyTextStyle: typography.sm.copyWith(color: colorScheme.mutedForeground),\n  padding: padding,\n  actionSpacing: actionSpacing,\n);\n',
    <String>['FDialogContentStyle'],
  ),
  ftimepickerstyle(
    'FTimePickerStyle',
    17,
    'FTimePickerStyle timePickerStyle({\n  required FColorScheme colorScheme,\n  required FStyle style,\n  required FTypography typography,\n}) => FTimePickerStyle(\n  textStyle: typography.base.copyWith(fontWeight: FontWeight.w500),\n  selectionBorderRadius: style.borderRadius,\n  selectionColor: colorScheme.muted,\n  selectionHeightAdjustment: 5,\n  spacing: 2,\n  focusedOutlineStyle: style.focusedOutlineStyle,\n  padding: const EdgeInsetsDirectional.only(start: 10, end: 10),\n);\n',
    <String>['FTimePickerStyle'],
  ),
  fbreadcrumbstyle(
    'FBreadcrumbStyle',
    17,
    'FBreadcrumbStyle breadcrumbStyle({\n  required FColorScheme colorScheme,\n  required FTypography typography,\n  required FStyle style,\n}) => FBreadcrumbStyle(\n  selectedTextStyle: typography.sm.copyWith(fontWeight: FontWeight.w400, color: colorScheme.foreground),\n  unselectedTextStyle: typography.sm.copyWith(fontWeight: FontWeight.w400, color: colorScheme.mutedForeground),\n  hoveredTextStyle: typography.sm.copyWith(\n    fontWeight: FontWeight.w400,\n    color: colorScheme.primary,\n    decoration: TextDecoration.underline,\n  ),\n  iconStyle: IconThemeData(color: colorScheme.mutedForeground, size: 16),\n  tappableStyle: style.tappableStyle,\n);\n',
    <String>['FBreadcrumbStyle'],
  ),
  ftextfieldstyle(
    'FTextFieldStyle',
    16,
    'FTextFieldStyle textFieldStyle({\n  required FColorScheme colorScheme,\n  required FTypography typography,\n  required FStyle style,\n}) => FTextFieldStyle(\n  keyboardAppearance: colorScheme.brightness,\n  labelLayoutStyle: _labelStyles(style: style).verticalStyle.layout,\n  clearButtonStyle: _buttonStyles(colorScheme: colorScheme, typography: typography, style: style).ghost.transform(\n    (ghost) => ghost.copyWith(\n      iconContentStyle: ghost.iconContentStyle.copyWith(\n        enabledStyle: IconThemeData(color: colorScheme.mutedForeground, size: 17),\n      ),\n    ),\n  ),\n  enabledStyle: _textFieldStateStyle(\n    contentColor: colorScheme.primary,\n    hintColor: colorScheme.mutedForeground,\n    focusedBorderColor: colorScheme.primary,\n    unfocusedBorderColor: colorScheme.border,\n    formFieldStyle: style.enabledFormFieldStyle,\n    typography: typography,\n    style: style,\n  ),\n  disabledStyle: _textFieldStateStyle(\n    contentColor: colorScheme.disable(colorScheme.primary),\n    hintColor: colorScheme.disable(colorScheme.border),\n    focusedBorderColor: colorScheme.disable(colorScheme.border),\n    unfocusedBorderColor: colorScheme.disable(colorScheme.border),\n    formFieldStyle: style.disabledFormFieldStyle,\n    typography: typography,\n    style: style,\n  ),\n  errorStyle: _textFieldErrorStyle(\n    contentColor: colorScheme.primary,\n    hintColor: colorScheme.mutedForeground,\n    focusedBorderColor: colorScheme.error,\n    unfocusedBorderColor: colorScheme.error,\n    formFieldErrorStyle: style.errorFormFieldStyle,\n    typography: typography,\n    style: style,\n  ),\n);\n',
    <String>[
      'FTextFieldStyle',
      'FLabelStyles',
      'FLabelStateStyles',
      'FButtonStyles',
      'FButtonStyle',
      'FButtonContentStyle',
      'FTextFieldStateStyle',
      'FTextFieldBorderStyle',
      'FTextFieldErrorStyle',
    ],
  ),
  ftextfieldstatestyle(
    'FTextFieldStateStyle',
    21,
    'FTextFieldStateStyle textFieldStateStyle({\n  required Color contentColor,\n  required Color hintColor,\n  required Color focusedBorderColor,\n  required Color unfocusedBorderColor,\n  required FFormFieldStyle formFieldStyle,\n  required FTypography typography,\n  required FStyle style,\n}) => FTextFieldStateStyle(\n  labelTextStyle: formFieldStyle.labelTextStyle,\n  contentTextStyle: typography.sm.copyWith(fontFamily: typography.defaultFontFamily, color: contentColor),\n  hintTextStyle: typography.sm.copyWith(fontFamily: typography.defaultFontFamily, color: hintColor),\n  counterTextStyle: typography.sm.copyWith(fontFamily: typography.defaultFontFamily, color: contentColor),\n  descriptionTextStyle: formFieldStyle.descriptionTextStyle,\n  focusedStyle: _textFieldBorderStyle(color: focusedBorderColor, style: style),\n  unfocusedStyle: _textFieldBorderStyle(color: unfocusedBorderColor, style: style),\n);\n',
    <String>['FTextFieldStateStyle', 'FTextFieldBorderStyle'],
  ),
  ftextfielderrorstyle(
    'FTextFieldErrorStyle',
    21,
    'FTextFieldErrorStyle textFieldErrorStyle({\n  required FFormFieldErrorStyle formFieldErrorStyle,\n  required Color contentColor,\n  required Color hintColor,\n  required Color focusedBorderColor,\n  required Color unfocusedBorderColor,\n  required FTypography typography,\n  required FStyle style,\n}) => FTextFieldErrorStyle.inherit(\n  formFieldErrorStyle: formFieldErrorStyle,\n  contentColor: contentColor,\n  hintColor: hintColor,\n  focusedBorderColor: focusedBorderColor,\n  unfocusedBorderColor: unfocusedBorderColor,\n  typography: typography,\n  style: style,\n);\n',
    <String>['FTextFieldErrorStyle'],
  ),
  ftextfieldborderstyle(
    'FTextFieldBorderStyle',
    22,
    'FTextFieldBorderStyle textFieldBorderStyle({required Color color, required FStyle style}) =>\n    FTextFieldBorderStyle(color: color, width: style.borderWidth, radius: style.borderRadius);\n',
    <String>['FTextFieldBorderStyle'],
  ),
  fpopovermenustyle(
    'FPopoverMenuStyle',
    18,
    'FPopoverMenuStyle popoverMenuStyle({\n  required FColorScheme colorScheme,\n  required FStyle style,\n  required FTypography typography,\n}) => FPopoverMenuStyle.inherit(colorScheme: colorScheme, style: style, typography: typography);\n',
    <String>[
      'FPopoverMenuStyle',
      'FTileGroupStyle',
      'FTileStyle',
      'FTileContentStyle',
    ],
  ),
  ftooltipstyle(
    'FTooltipStyle',
    14,
    'FTooltipStyle tooltipStyle({\n  required FColorScheme colorScheme,\n  required FTypography typography,\n  required FStyle style,\n}) => FTooltipStyle(\n  decoration: BoxDecoration(\n    color: colorScheme.background,\n    borderRadius: style.borderRadius,\n    border: Border.all(width: style.borderWidth, color: colorScheme.border),\n    boxShadow: FTooltipStyle.shadow,\n  ),\n  textStyle: typography.sm,\n);\n',
    <String>['FTooltipStyle'],
  ),
  fbuttonstyle(
    'FButtonStyle',
    13,
    'FButtonStyle buttonStyle({\n  required FTypography typography,\n  required FStyle style,\n  required Color enabledBoxColor,\n  required Color enabledHoveredBoxColor,\n  required Color disabledBoxColor,\n  required Color enabledContentColor,\n  required Color disabledContentColor,\n}) => FButtonStyle(\n  enabledBoxDecoration: BoxDecoration(borderRadius: style.borderRadius, color: enabledBoxColor),\n  enabledHoverBoxDecoration: BoxDecoration(borderRadius: style.borderRadius, color: enabledHoveredBoxColor),\n  disabledBoxDecoration: BoxDecoration(borderRadius: style.borderRadius, color: disabledBoxColor),\n  focusedOutlineStyle: style.focusedOutlineStyle,\n  contentStyle: _buttonContentStyle(\n    typography: typography,\n    enabled: enabledContentColor,\n    disabled: disabledContentColor,\n  ),\n  iconContentStyle: FButtonIconContentStyle(\n    enabledStyle: IconThemeData(color: enabledContentColor, size: 20),\n    disabledStyle: IconThemeData(color: disabledContentColor, size: 20),\n  ),\n  tappableStyle: style.tappableStyle,\n);\n',
    <String>['FButtonStyle', 'FButtonContentStyle'],
  ),
  fbuttoncontentstyle(
    'FButtonContentStyle',
    20,
    'FButtonContentStyle buttonContentStyle({\n  required FTypography typography,\n  required Color enabled,\n  required Color disabled,\n}) => FButtonContentStyle(\n  enabledTextStyle: typography.base.copyWith(color: enabled, fontWeight: FontWeight.w500, height: 1),\n  disabledTextStyle: typography.base.copyWith(color: disabled, fontWeight: FontWeight.w500, height: 1),\n  enabledIconStyle: IconThemeData(color: enabled, size: 20),\n  disabledIconStyle: IconThemeData(color: disabled, size: 20),\n);\n',
    <String>['FButtonContentStyle'],
  ),
  fbuttonstyles(
    'FButtonStyles',
    14,
    'FButtonStyles buttonStyles({\n  required FColorScheme colorScheme,\n  required FTypography typography,\n  required FStyle style,\n}) => FButtonStyles(\n  primary: _buttonStyle(\n    style: style,\n    typography: typography,\n    enabledBoxColor: colorScheme.primary,\n    enabledHoveredBoxColor: colorScheme.hover(colorScheme.primary),\n    disabledBoxColor: colorScheme.disable(colorScheme.primary),\n    enabledContentColor: colorScheme.primaryForeground,\n    disabledContentColor: colorScheme.disable(colorScheme.primaryForeground, colorScheme.disable(colorScheme.primary)),\n  ),\n  secondary: _buttonStyle(\n    style: style,\n    typography: typography,\n    enabledBoxColor: colorScheme.secondary,\n    enabledHoveredBoxColor: colorScheme.hover(colorScheme.secondary),\n    disabledBoxColor: colorScheme.disable(colorScheme.secondary),\n    enabledContentColor: colorScheme.secondaryForeground,\n    disabledContentColor: colorScheme.disable(\n      colorScheme.secondaryForeground,\n      colorScheme.disable(colorScheme.secondary),\n    ),\n  ),\n  destructive: _buttonStyle(\n    style: style,\n    typography: typography,\n    enabledBoxColor: colorScheme.destructive,\n    enabledHoveredBoxColor: colorScheme.hover(colorScheme.destructive),\n    disabledBoxColor: colorScheme.disable(colorScheme.destructive),\n    enabledContentColor: colorScheme.destructiveForeground,\n    disabledContentColor: colorScheme.disable(\n      colorScheme.destructiveForeground,\n      colorScheme.disable(colorScheme.destructive),\n    ),\n  ),\n  outline: FButtonStyle(\n    enabledBoxDecoration: BoxDecoration(\n      border: Border.all(color: colorScheme.border),\n      borderRadius: style.borderRadius,\n    ),\n    enabledHoverBoxDecoration: BoxDecoration(\n      border: Border.all(color: colorScheme.border),\n      borderRadius: style.borderRadius,\n      color: colorScheme.secondary,\n    ),\n    disabledBoxDecoration: BoxDecoration(\n      border: Border.all(color: colorScheme.disable(colorScheme.border)),\n      borderRadius: style.borderRadius,\n    ),\n    focusedOutlineStyle: style.focusedOutlineStyle,\n    contentStyle: _buttonContentStyle(\n      typography: typography,\n      enabled: colorScheme.secondaryForeground,\n      disabled: colorScheme.disable(colorScheme.secondaryForeground),\n    ),\n    iconContentStyle: FButtonIconContentStyle(\n      enabledStyle: IconThemeData(color: colorScheme.secondaryForeground, size: 20),\n      disabledStyle: IconThemeData(color: colorScheme.disable(colorScheme.secondaryForeground), size: 20),\n    ),\n    tappableStyle: style.tappableStyle,\n  ),\n  ghost: FButtonStyle(\n    enabledBoxDecoration: BoxDecoration(borderRadius: style.borderRadius),\n    enabledHoverBoxDecoration: BoxDecoration(borderRadius: style.borderRadius, color: colorScheme.secondary),\n    disabledBoxDecoration: BoxDecoration(borderRadius: style.borderRadius),\n    focusedOutlineStyle: style.focusedOutlineStyle,\n    contentStyle: _buttonContentStyle(\n      typography: typography,\n      enabled: colorScheme.secondaryForeground,\n      disabled: colorScheme.disable(colorScheme.secondaryForeground),\n    ),\n    iconContentStyle: FButtonIconContentStyle(\n      enabledStyle: IconThemeData(color: colorScheme.secondaryForeground, size: 20),\n      disabledStyle: IconThemeData(color: colorScheme.disable(colorScheme.secondaryForeground), size: 20),\n    ),\n    tappableStyle: style.tappableStyle,\n  ),\n);\n',
    <String>['FButtonStyles', 'FButtonStyle', 'FButtonContentStyle'],
  ),
  favatarstyle(
    'FAvatarStyle',
    13,
    'FAvatarStyle avatarStyle({required FColorScheme colorScheme, required FTypography typography}) => FAvatarStyle(\n  backgroundColor: colorScheme.muted,\n  foregroundColor: colorScheme.mutedForeground,\n  textStyle: typography.base.copyWith(color: colorScheme.mutedForeground, height: 0),\n);\n',
    <String>['FAvatarStyle'],
  ),
  falertstyles(
    'FAlertStyles',
    13,
    'FAlertStyles alertStyles({\n  required FColorScheme colorScheme,\n  required FTypography typography,\n  required FStyle style,\n}) => FAlertStyles(\n  primary: FAlertStyle(\n    iconStyle: IconThemeData(color: colorScheme.foreground, size: 20),\n    titleTextStyle: typography.base.copyWith(fontWeight: FontWeight.w500, color: colorScheme.foreground, height: 1.2),\n    subtitleTextStyle: typography.sm.copyWith(color: colorScheme.foreground),\n    decoration: BoxDecoration(\n      border: Border.all(color: colorScheme.border),\n      borderRadius: style.borderRadius,\n      color: colorScheme.background,\n    ),\n  ),\n  destructive: FAlertStyle(\n    iconStyle: IconThemeData(color: colorScheme.destructive, size: 20),\n    titleTextStyle: typography.base.copyWith(fontWeight: FontWeight.w500, color: colorScheme.destructive, height: 1.2),\n    subtitleTextStyle: typography.sm.copyWith(color: colorScheme.destructive),\n    decoration: BoxDecoration(\n      border: Border.all(color: colorScheme.destructive),\n      borderRadius: style.borderRadius,\n      color: colorScheme.background,\n    ),\n  ),\n);\n',
    <String>['FAlertStyles'],
  ),
  fdividerstyles(
    'FDividerStyles',
    15,
    'FDividerStyles dividerStyles({required FColorScheme colorScheme, required FStyle style}) => FDividerStyles(\n  horizontalStyle: _dividerStyle(\n    colorScheme: colorScheme,\n    style: style,\n    padding: FDividerStyle.defaultPadding.horizontalStyle,\n  ),\n  verticalStyle: _dividerStyle(\n    colorScheme: colorScheme,\n    style: style,\n    padding: FDividerStyle.defaultPadding.verticalStyle,\n  ),\n);\n',
    <String>['FDividerStyles', 'FDividerStyle'],
  ),
  fdividerstyle(
    'FDividerStyle',
    14,
    'FDividerStyle dividerStyle({\n  required FColorScheme colorScheme,\n  required FStyle style,\n  required EdgeInsetsGeometry padding,\n}) => FDividerStyle(color: colorScheme.secondary, padding: padding, width: style.borderWidth);\n',
    <String>['FDividerStyle'],
  ),
  fresizablestyle(
    'FResizableStyle',
    16,
    'FResizableStyle resizableStyle({required FColorScheme colorScheme, required FStyle style}) => FResizableStyle(\n  horizontalDividerStyle: FResizableDividerStyle(\n    color: colorScheme.border,\n    focusedOutlineStyle: style.focusedOutlineStyle,\n    thumbStyle: FResizableDividerThumbStyle(\n      backgroundColor: colorScheme.border,\n      foregroundColor: colorScheme.foreground,\n      height: 20,\n      width: 10,\n    ),\n  ),\n  verticalDividerStyle: FResizableDividerStyle(\n    color: colorScheme.border,\n    focusedOutlineStyle: style.focusedOutlineStyle,\n    thumbStyle: FResizableDividerThumbStyle(\n      backgroundColor: colorScheme.border,\n      foregroundColor: colorScheme.foreground,\n      height: 10,\n      width: 20,\n    ),\n  ),\n);\n',
    <String>['FResizableStyle'],
  ),
  fselectstyle(
    'FSelectStyle',
    13,
    'FSelectStyle selectStyle({required FColorScheme colorScheme, required FTypography typography, required FStyle style}) =>\n    FSelectStyle(\n      selectFieldStyle: _textFieldStyle(colorScheme: colorScheme, typography: typography, style: style),\n      iconStyle: IconThemeData(color: colorScheme.mutedForeground, size: 18),\n      popoverStyle: _popoverStyle(colorScheme: colorScheme, style: style),\n      searchStyle: _selectSearchStyle(colorScheme: colorScheme, typography: typography, style: style),\n      contentStyle: _selectContentStyle(colorScheme: colorScheme, typography: typography, style: style),\n      emptyTextStyle: typography.sm,\n    );\n',
    <String>[
      'FSelectStyle',
      'FPopoverStyle',
      'FSelectSearchStyle',
      'FTextFieldStyle',
      'FLabelStyles',
      'FLabelStateStyles',
      'FButtonStyles',
      'FButtonStyle',
      'FButtonContentStyle',
      'FTextFieldStateStyle',
      'FTextFieldBorderStyle',
      'FTextFieldErrorStyle',
      'FDividerStyles',
      'FDividerStyle',
      'FProgressStyles',
      'FLinearProgressStyle',
      'FSelectContentStyle',
      'FSelectSectionStyle',
      'FSelectItemStyle',
      'FSelectScrollHandleStyle',
    ],
  ),
  fselectsectionstyle(
    'FSelectSectionStyle',
    20,
    'FSelectSectionStyle selectSectionStyle({\n  required FColorScheme colorScheme,\n  required FStyle style,\n  required FTypography typography,\n}) => FSelectSectionStyle(\n  enabledLabelTextStyle: typography.sm.copyWith(color: colorScheme.primary, fontWeight: FontWeight.w600),\n  disabledLabelTextStyle: typography.sm.copyWith(\n    color: colorScheme.disable(colorScheme.primary),\n    fontWeight: FontWeight.w600,\n  ),\n  itemStyle: _selectItemStyle(colorScheme: colorScheme, style: style, typography: typography),\n);\n',
    <String>['FSelectSectionStyle', 'FSelectItemStyle'],
  ),
  fselectitemstyle(
    'FSelectItemStyle',
    17,
    'FSelectItemStyle selectItemStyle({\n  required FColorScheme colorScheme,\n  required FStyle style,\n  required FTypography typography,\n}) => FSelectItemStyle(\n  enabledHoveredDecoration: BoxDecoration(color: colorScheme.secondary, borderRadius: style.borderRadius),\n  enabledTextStyle: typography.sm.copyWith(color: colorScheme.primary),\n  disabledTextStyle: typography.sm.copyWith(color: colorScheme.disable(colorScheme.primary)),\n  enabledIconStyle: IconThemeData(color: colorScheme.primary, size: 15),\n  disabledIconStyle: IconThemeData(color: colorScheme.disable(colorScheme.primary), size: 15),\n  tappableStyle: FTappableStyle(animationTween: FTappableAnimations.none),\n);\n',
    <String>['FSelectItemStyle'],
  ),
  fselectsearchstyle(
    'FSelectSearchStyle',
    19,
    'FSelectSearchStyle selectSearchStyle({\n  required FColorScheme colorScheme,\n  required FTypography typography,\n  required FStyle style,\n}) => FSelectSearchStyle(\n  textFieldStyle: _textFieldStyle(colorScheme: colorScheme, typography: typography, style: style).transform(\n    (style) => style.copyWith(\n      enabledStyle: style.enabledStyle.copyWith(\n        focusedStyle: style.enabledStyle.focusedStyle.copyWith(color: Colors.transparent, width: 0),\n        unfocusedStyle: style.enabledStyle.unfocusedStyle.copyWith(color: Colors.transparent, width: 0),\n      ),\n    ),\n  ),\n  iconStyle: IconThemeData(size: 15, color: colorScheme.mutedForeground),\n  dividerStyle: _dividerStyles(\n    colorScheme: colorScheme,\n    style: style,\n  ).horizontalStyle.copyWith(width: 2, padding: EdgeInsets.zero),\n  loadingIndicatorStyle: _progressStyles(colorScheme: colorScheme, style: style).circularIconProgressStyle,\n);\n',
    <String>[
      'FSelectSearchStyle',
      'FTextFieldStyle',
      'FLabelStyles',
      'FLabelStateStyles',
      'FButtonStyles',
      'FButtonStyle',
      'FButtonContentStyle',
      'FTextFieldStateStyle',
      'FTextFieldBorderStyle',
      'FTextFieldErrorStyle',
      'FDividerStyles',
      'FDividerStyle',
      'FProgressStyles',
      'FLinearProgressStyle',
    ],
  ),
  fselectscrollhandlestyle(
    'FSelectScrollHandleStyle',
    25,
    'FSelectScrollHandleStyle selectScrollHandleStyle({required FColorScheme colorScheme}) => FSelectScrollHandleStyle(\n  iconStyle: IconThemeData(color: colorScheme.primary, size: 17),\n  background: colorScheme.background,\n);\n',
    <String>['FSelectScrollHandleStyle'],
  ),
  fselectcontentstyle(
    'FSelectContentStyle',
    20,
    'FSelectContentStyle selectContentStyle({\n  required FColorScheme colorScheme,\n  required FStyle style,\n  required FTypography typography,\n}) => FSelectContentStyle(\n  sectionStyle: _selectSectionStyle(colorScheme: colorScheme, style: style, typography: typography),\n  scrollHandleStyle: _selectScrollHandleStyle(colorScheme: colorScheme),\n);\n',
    <String>[
      'FSelectContentStyle',
      'FSelectSectionStyle',
      'FSelectItemStyle',
      'FSelectScrollHandleStyle',
    ],
  ),
  fsheetstyle(
    'FSheetStyle',
    12,
    'FSheetStyle sheetStyle({required FColorScheme colorScheme}) =>\n    FSheetStyle(barrierColor: colorScheme.barrier, backgroundColor: colorScheme.background);\n',
    <String>['FSheetStyle'],
  ),
  fswitchstyle(
    'FSwitchStyle',
    13,
    'FSwitchStyle switchStyle({required FColorScheme colorScheme, required FStyle style}) => FSwitchStyle(\n  focusColor: colorScheme.primary,\n  labelLayoutStyle: _labelStyles(style: style).horizontalStyle.layout,\n  enabledStyle: FSwitchStateStyle(\n    checkedColor: colorScheme.primary,\n    uncheckedColor: colorScheme.border,\n    thumbColor: colorScheme.background,\n    labelTextStyle: style.enabledFormFieldStyle.labelTextStyle,\n    descriptionTextStyle: style.enabledFormFieldStyle.descriptionTextStyle,\n  ),\n  disabledStyle: FSwitchStateStyle(\n    checkedColor: colorScheme.disable(colorScheme.primary),\n    uncheckedColor: colorScheme.disable(colorScheme.border),\n    thumbColor: colorScheme.background,\n    labelTextStyle: style.disabledFormFieldStyle.labelTextStyle,\n    descriptionTextStyle: style.disabledFormFieldStyle.descriptionTextStyle,\n  ),\n  errorStyle: FSwitchErrorStyle(\n    labelTextStyle: style.errorFormFieldStyle.labelTextStyle,\n    descriptionTextStyle: style.errorFormFieldStyle.descriptionTextStyle,\n    errorTextStyle: style.errorFormFieldStyle.errorTextStyle,\n  ),\n);\n',
    <String>['FSwitchStyle', 'FLabelStyles', 'FLabelStateStyles'],
  ),
  fselectgroupstyle(
    'FSelectGroupStyle',
    18,
    'FSelectGroupStyle selectGroupStyle({\n  required FColorScheme colorScheme,\n  required FTypography typography,\n  required FStyle style,\n}) => FSelectGroupStyle(\n  labelLayoutStyle: _labelStyles(style: style).verticalStyle.layout,\n  enabledStyle: FSelectGroupStateStyle(\n    labelTextStyle: style.enabledFormFieldStyle.labelTextStyle,\n    descriptionTextStyle: style.enabledFormFieldStyle.descriptionTextStyle,\n  ),\n  disabledStyle: FSelectGroupStateStyle(\n    labelTextStyle: style.disabledFormFieldStyle.labelTextStyle,\n    descriptionTextStyle: style.disabledFormFieldStyle.descriptionTextStyle,\n  ),\n  errorStyle: FSelectGroupErrorStyle(\n    labelTextStyle: style.errorFormFieldStyle.labelTextStyle,\n    descriptionTextStyle: style.errorFormFieldStyle.descriptionTextStyle,\n    errorTextStyle: style.errorFormFieldStyle.errorTextStyle,\n  ),\n  checkboxStyle: _checkboxSelectGroupStyle(\n    style: _checkboxStyle(colorScheme: colorScheme, style: style).transform(\n      (style) => style.copyWith(\n        enabledStyle: style.enabledStyle.copyWith(\n          labelTextStyle: typography.sm.copyWith(color: colorScheme.primary, fontWeight: FontWeight.w500),\n          descriptionTextStyle: typography.sm.copyWith(color: colorScheme.mutedForeground),\n        ),\n        disabledStyle: style.disabledStyle.copyWith(\n          labelTextStyle: typography.sm.copyWith(\n            color: colorScheme.disable(colorScheme.primary),\n            fontWeight: FontWeight.w500,\n          ),\n          descriptionTextStyle: typography.sm.copyWith(color: colorScheme.disable(colorScheme.mutedForeground)),\n        ),\n        errorStyle: style.errorStyle.copyWith(\n          labelTextStyle: typography.sm.copyWith(color: colorScheme.primary, fontWeight: FontWeight.w500),\n          descriptionTextStyle: typography.sm.copyWith(color: colorScheme.mutedForeground),\n          errorTextStyle: typography.sm.copyWith(color: colorScheme.error, fontWeight: FontWeight.w500),\n        ),\n      ),\n    ),\n  ),\n  radioStyle: _radioSelectGroupStyle(\n    style: _radioStyle(colorScheme: colorScheme, style: style).transform(\n      (style) => style.copyWith(\n        enabledStyle: style.enabledStyle.copyWith(\n          labelTextStyle: typography.sm.copyWith(color: colorScheme.primary, fontWeight: FontWeight.w500),\n          descriptionTextStyle: typography.sm.copyWith(color: colorScheme.mutedForeground),\n        ),\n        disabledStyle: style.disabledStyle.copyWith(\n          labelTextStyle: typography.sm.copyWith(\n            color: colorScheme.disable(colorScheme.primary),\n            fontWeight: FontWeight.w500,\n          ),\n          descriptionTextStyle: typography.sm.copyWith(color: colorScheme.disable(colorScheme.mutedForeground)),\n        ),\n        errorStyle: style.errorStyle.copyWith(\n          labelTextStyle: typography.sm.copyWith(color: colorScheme.primary, fontWeight: FontWeight.w500),\n          descriptionTextStyle: typography.sm.copyWith(color: colorScheme.mutedForeground),\n          errorTextStyle: typography.sm.copyWith(color: colorScheme.error, fontWeight: FontWeight.w500),\n        ),\n      ),\n    ),\n  ),\n);\n',
    <String>[
      'FSelectGroupStyle',
      'FCheckboxSelectGroupStyle',
      'FCheckboxStyle',
      'FRadioSelectGroupStyle',
      'FRadioStyle',
      'FLabelStyles',
      'FLabelStateStyles',
    ],
  ),
  fcheckboxselectgroupstyle(
    'FCheckboxSelectGroupStyle',
    26,
    'FCheckboxSelectGroupStyle checkboxSelectGroupStyle({required FCheckboxStyle style}) => FCheckboxSelectGroupStyle(\n  labelLayoutStyle: style.labelLayoutStyle,\n  focusedOutlineStyle: style.focusedOutlineStyle,\n  enabledStyle: style.enabledStyle,\n  disabledStyle: style.disabledStyle,\n  errorStyle: style.errorStyle,\n);\n',
    <String>['FCheckboxSelectGroupStyle'],
  ),
  fradioselectgroupstyle(
    'FRadioSelectGroupStyle',
    23,
    'FRadioSelectGroupStyle radioSelectGroupStyle({required FRadioStyle style}) => FRadioSelectGroupStyle(\n  animationDuration: style.animationDuration,\n  curve: style.curve,\n  labelLayoutStyle: style.labelLayoutStyle,\n  focusedOutlineStyle: style.focusedOutlineStyle,\n  enabledStyle: style.enabledStyle,\n  disabledStyle: style.disabledStyle,\n  errorStyle: style.errorStyle,\n);\n',
    <String>['FRadioSelectGroupStyle'],
  ),
  flinecalendarstyle(
    'FLineCalendarStyle',
    19,
    'FLineCalendarStyle lineCalendarStyle({\n  required FColorScheme colorScheme,\n  required FTypography typography,\n  required FStyle style,\n}) {\n  final focusedBorder = Border.all(color: colorScheme.primary, width: style.borderWidth);\n  final selectedDateTextStyle = typography.xl.copyWith(\n    color: colorScheme.primaryForeground,\n    fontWeight: FontWeight.w500,\n    height: 0,\n  );\n  final selectedWeekdayTextStyle = typography.xs.copyWith(\n    color: colorScheme.primaryForeground,\n    fontWeight: FontWeight.w500,\n    height: 0,\n  );\n  final unselectedDateTextStyle = typography.xl.copyWith(\n    color: colorScheme.primary,\n    fontWeight: FontWeight.w500,\n    height: 0,\n  );\n  final unselectedWeekdayTextStyle = typography.xs.copyWith(\n    color: colorScheme.mutedForeground,\n    fontWeight: FontWeight.w500,\n    height: 0,\n  );\n  return FLineCalendarStyle(\n    selectedItemStyle: FLineCalendarItemStyle(\n      decoration: BoxDecoration(color: colorScheme.primary, borderRadius: style.borderRadius),\n      focusedDecoration: BoxDecoration(\n        color: colorScheme.primary,\n        border: focusedBorder,\n        borderRadius: style.borderRadius,\n      ),\n      todayIndicatorColor: colorScheme.primaryForeground,\n      dateTextStyle: selectedDateTextStyle,\n      weekdayTextStyle: selectedWeekdayTextStyle,\n    ),\n    selectedHoveredItemStyle: FLineCalendarItemStyle(\n      decoration: BoxDecoration(color: colorScheme.hover(colorScheme.primary), borderRadius: style.borderRadius),\n      focusedDecoration: BoxDecoration(\n        color: colorScheme.hover(colorScheme.primary),\n        border: focusedBorder,\n        borderRadius: style.borderRadius,\n      ),\n      todayIndicatorColor: colorScheme.hover(colorScheme.primaryForeground),\n      dateTextStyle: selectedDateTextStyle,\n      weekdayTextStyle: selectedWeekdayTextStyle,\n    ),\n    unselectedItemStyle: FLineCalendarItemStyle(\n      decoration: BoxDecoration(\n        color: colorScheme.background,\n        border: Border.all(color: colorScheme.border),\n        borderRadius: style.borderRadius,\n      ),\n      focusedDecoration: BoxDecoration(\n        color: colorScheme.background,\n        border: focusedBorder,\n        borderRadius: style.borderRadius,\n      ),\n      todayIndicatorColor: colorScheme.primary,\n      dateTextStyle: unselectedDateTextStyle,\n      weekdayTextStyle: unselectedWeekdayTextStyle,\n    ),\n    unselectedHoveredItemStyle: FLineCalendarItemStyle(\n      decoration: BoxDecoration(\n        color: colorScheme.secondary,\n        border: Border.all(color: colorScheme.border),\n        borderRadius: style.borderRadius,\n      ),\n      focusedDecoration: BoxDecoration(\n        color: colorScheme.secondary,\n        border: focusedBorder,\n        borderRadius: style.borderRadius,\n      ),\n      todayIndicatorColor: colorScheme.hover(colorScheme.primary),\n      dateTextStyle: unselectedDateTextStyle,\n      weekdayTextStyle: unselectedWeekdayTextStyle,\n    ),\n    tappableStyle: style.tappableStyle,\n  );\n}\n',
    <String>['FLineCalendarStyle'],
  ),
  fselectmenutilestyle(
    'FSelectMenuTileStyle',
    21,
    'FSelectMenuTileStyle selectMenuTileStyle({\n  required FColorScheme colorScheme,\n  required FStyle style,\n  required FTypography typography,\n}) {\n  final groupStyle = _tileGroupStyle(colorScheme: colorScheme, style: style, typography: typography);\n  return FSelectMenuTileStyle(\n    labelLayoutStyle: groupStyle.labelLayoutStyle,\n    menuStyle: _popoverMenuStyle(colorScheme: colorScheme, style: style, typography: typography),\n    tileStyle: groupStyle.tileStyle,\n    enabledStyle: groupStyle.enabledStyle,\n    disabledStyle: groupStyle.disabledStyle,\n    errorStyle: groupStyle.errorStyle,\n  );\n}\n',
    <String>[
      'FSelectMenuTileStyle',
      'FPopoverMenuStyle',
      'FTileGroupStyle',
      'FTileStyle',
      'FTileContentStyle',
    ],
  ),
  frootheaderstyle(
    'FRootHeaderStyle',
    17,
    'FRootHeaderStyle rootHeaderStyle({\n  required FColorScheme colorScheme,\n  required FTypography typography,\n  required FStyle style,\n}) => FRootHeaderStyle(\n  titleTextStyle: typography.xl3.copyWith(color: colorScheme.foreground, fontWeight: FontWeight.w700, height: 1),\n  actionStyle: _headerActionStyle(colorScheme: colorScheme, style: style, size: 30),\n  padding: style.pagePadding.copyWith(bottom: 15),\n);\n',
    <String>['FRootHeaderStyle', 'FHeaderActionStyle'],
  ),
  fnestedheaderstyle(
    'FNestedHeaderStyle',
    19,
    'FNestedHeaderStyle nestedHeaderStyle({\n  required FColorScheme colorScheme,\n  required FTypography typography,\n  required FStyle style,\n}) => FNestedHeaderStyle(\n  titleTextStyle: typography.xl.copyWith(color: colorScheme.foreground, fontWeight: FontWeight.w600, height: 1),\n  actionStyle: _headerActionStyle(colorScheme: colorScheme, style: style, size: 25),\n  padding: style.pagePadding.copyWith(bottom: 15),\n);\n',
    <String>['FNestedHeaderStyle', 'FHeaderActionStyle'],
  ),
  fheaderstyles(
    'FHeaderStyles',
    14,
    'FHeaderStyles headerStyles({\n  required FColorScheme colorScheme,\n  required FTypography typography,\n  required FStyle style,\n}) => FHeaderStyles(\n  rootStyle: _rootHeaderStyle(colorScheme: colorScheme, typography: typography, style: style),\n  nestedStyle: _nestedHeaderStyle(colorScheme: colorScheme, typography: typography, style: style),\n);\n',
    <String>[
      'FHeaderStyles',
      'FRootHeaderStyle',
      'FNestedHeaderStyle',
      'FHeaderActionStyle',
    ],
  ),
  fheaderactionstyle(
    'FHeaderActionStyle',
    19,
    'FHeaderActionStyle headerActionStyle({\n  required FColorScheme colorScheme,\n  required FStyle style,\n  required double size,\n}) => FHeaderActionStyle(\n  enabledStyle: IconThemeData(color: colorScheme.foreground, size: size),\n  disabledStyle: IconThemeData(color: colorScheme.disable(colorScheme.foreground), size: size),\n  focusedOutlineStyle: style.focusedOutlineStyle,\n  tappableStyle: style.tappableStyle,\n);\n',
    <String>['FHeaderActionStyle'],
  ),
  fbadgestyles(
    'FBadgeStyles',
    13,
    'FBadgeStyles badgeStyles({required FColorScheme colorScheme, required FTypography typography, required FStyle style}) =>\n    FBadgeStyles(\n      primary: FBadgeStyle(\n        backgroundColor: colorScheme.primary,\n        borderColor: colorScheme.primary,\n        borderWidth: style.borderWidth,\n        contentStyle: FBadgeContentStyle(\n          labelTextStyle: typography.sm.copyWith(color: colorScheme.primaryForeground, fontWeight: FontWeight.w600),\n        ),\n      ),\n      secondary: FBadgeStyle(\n        backgroundColor: colorScheme.secondary,\n        borderColor: colorScheme.secondary,\n        borderWidth: style.borderWidth,\n        contentStyle: FBadgeContentStyle(\n          labelTextStyle: typography.sm.copyWith(color: colorScheme.secondaryForeground, fontWeight: FontWeight.w600),\n        ),\n      ),\n      outline: FBadgeStyle(\n        backgroundColor: colorScheme.background,\n        borderColor: colorScheme.border,\n        borderWidth: style.borderWidth,\n        contentStyle: FBadgeContentStyle(\n          labelTextStyle: typography.sm.copyWith(color: colorScheme.foreground, fontWeight: FontWeight.w600),\n        ),\n      ),\n      destructive: FBadgeStyle(\n        backgroundColor: colorScheme.destructive,\n        borderColor: colorScheme.destructive,\n        borderWidth: style.borderWidth,\n        contentStyle: FBadgeContentStyle(\n          labelTextStyle: typography.sm.copyWith(color: colorScheme.destructiveForeground, fontWeight: FontWeight.w600),\n        ),\n      ),\n    );\n',
    <String>['FBadgeStyles'],
  ),
  fbottomnavigationbaritemstyle(
    'FBottomNavigationBarItemStyle',
    30,
    'FBottomNavigationBarItemStyle bottomNavigationBarItemStyle({\n  required FColorScheme colorScheme,\n  required FTypography typography,\n}) => FBottomNavigationBarItemStyle(\n  selectedIconStyle: IconThemeData(color: colorScheme.primary, size: 24),\n  unselectedIconStyle: IconThemeData(color: colorScheme.disable(colorScheme.foreground), size: 24),\n  selectedTextStyle: typography.base.copyWith(color: colorScheme.primary, fontSize: 10),\n  unselectedTextStyle: typography.base.copyWith(color: colorScheme.disable(colorScheme.foreground), fontSize: 10),\n);\n',
    <String>['FBottomNavigationBarItemStyle'],
  ),
  fbottomnavigationbarstyle(
    'FBottomNavigationBarStyle',
    26,
    'FBottomNavigationBarStyle bottomNavigationBarStyle({\n  required FColorScheme colorScheme,\n  required FTypography typography,\n  required FStyle style,\n}) => FBottomNavigationBarStyle(\n  decoration: BoxDecoration(border: Border(top: BorderSide(color: colorScheme.border)), color: colorScheme.background),\n  focusedOutlineStyle: style.focusedOutlineStyle,\n  itemStyle: _bottomNavigationBarItemStyle(colorScheme: colorScheme, typography: typography),\n  tappableStyle: style.tappableStyle,\n);\n',
    <String>['FBottomNavigationBarStyle', 'FBottomNavigationBarItemStyle'],
  );

  const Registry(this.type, this.position, this.source, this.closure);

  /// The type name.
  final String type;

  /// The position, inclusive, in the source to add an _, to make the function private.
  final int position;

  /// The function to generate.
  final String source;

  /// The functions, including itself, needed to generate a fully compilable style.
  final List<String> closure;
}

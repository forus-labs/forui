// // GENERATED CODE - DO NOT MODIFY BY HAND
//
// **************************************************************************
// forui
// **************************************************************************
//
// ignore_for_file: type=lint
// ignore_for_file: deprecated_member_use

/// All styles in Forui. Generated by tool/cli_generator.
enum Style {
  faccordionstyle(
    'FAccordionStyle',
    <String>['accordion'],
    <String>['FAccordionStyle'],
    'FAccordionStyle accordionStyle({\n  required FColors colors,\n  required FTypography typography,\n  required FStyle style,\n}) => FAccordionStyle(\n  titleTextStyle: FWidgetStateMap({\n    WidgetState.hovered | WidgetState.pressed: typography.base.copyWith(\n      fontWeight: FontWeight.w500,\n      color: colors.foreground,\n      decoration: TextDecoration.underline,\n    ),\n    WidgetState.any: typography.base.copyWith(\n      fontWeight: FontWeight.w500,\n      color: colors.foreground,\n    ),\n  }),\n  childTextStyle: typography.sm.copyWith(color: colors.foreground),\n  iconStyle: FWidgetStateMap.all(\n    IconThemeData(color: colors.primary, size: 20),\n  ),\n  focusedOutlineStyle: style.focusedOutlineStyle,\n  dividerStyle: FDividerStyle(color: colors.border, padding: EdgeInsets.zero),\n  tappableStyle: style.tappableStyle.copyWith(\n    animationTween: FTappableAnimations.none,\n  ),\n  titlePadding: const EdgeInsets.symmetric(vertical: 15),\n  childPadding: const EdgeInsets.only(bottom: 15),\n  animationDuration: const Duration(milliseconds: 200),\n);\n',
  ),
  falertstyles(
    'FAlertStyles',
    <String>['alerts'],
    <String>['FAlertStyles'],
    'FAlertStyles alertStyles({\n  required FColors colors,\n  required FTypography typography,\n  required FStyle style,\n}) => FAlertStyles(\n  primary: FAlertStyle(\n    iconStyle: IconThemeData(color: colors.foreground, size: 20),\n    titleTextStyle: typography.base.copyWith(\n      fontWeight: FontWeight.w500,\n      color: colors.foreground,\n      height: 1.2,\n    ),\n    subtitleTextStyle: typography.sm.copyWith(color: colors.foreground),\n    decoration: BoxDecoration(\n      border: Border.all(color: colors.border),\n      borderRadius: style.borderRadius,\n      color: colors.background,\n    ),\n  ),\n  destructive: FAlertStyle(\n    iconStyle: IconThemeData(color: colors.destructive, size: 20),\n    titleTextStyle: typography.base.copyWith(\n      fontWeight: FontWeight.w500,\n      color: colors.destructive,\n      height: 1.2,\n    ),\n    subtitleTextStyle: typography.sm.copyWith(color: colors.destructive),\n    decoration: BoxDecoration(\n      border: Border.all(color: colors.destructive),\n      borderRadius: style.borderRadius,\n      color: colors.background,\n    ),\n  ),\n);\n',
  ),
  favatarstyle(
    'FAvatarStyle',
    <String>['avatar'],
    <String>['FAvatarStyle'],
    'FAvatarStyle avatarStyle({\n  required FColors colors,\n  required FTypography typography,\n}) => FAvatarStyle(\n  backgroundColor: colors.muted,\n  foregroundColor: colors.mutedForeground,\n  textStyle: typography.base.copyWith(color: colors.mutedForeground, height: 0),\n  fadeInDuration: const Duration(milliseconds: 500),\n);\n',
  ),
  fbadgestyles(
    'FBadgeStyles',
    <String>['badges'],
    <String>['FBadgeStyles'],
    'FBadgeStyles badgeStyles({\n  required FColors colors,\n  required FTypography typography,\n  required FStyle style,\n}) => FBadgeStyles(\n  primary: FBadgeStyle(\n    decoration: BoxDecoration(\n      color: colors.primary,\n      borderRadius: FBadgeStyles.defaultRadius,\n    ),\n    contentStyle: FBadgeContentStyle(\n      labelTextStyle: typography.sm.copyWith(\n        color: colors.primaryForeground,\n        fontWeight: FontWeight.w600,\n      ),\n    ),\n  ),\n  secondary: FBadgeStyle(\n    decoration: BoxDecoration(\n      color: colors.secondary,\n      borderRadius: FBadgeStyles.defaultRadius,\n    ),\n    contentStyle: FBadgeContentStyle(\n      labelTextStyle: typography.sm.copyWith(\n        color: colors.secondaryForeground,\n        fontWeight: FontWeight.w600,\n      ),\n    ),\n  ),\n  outline: FBadgeStyle(\n    decoration: BoxDecoration(\n      border: Border.all(color: colors.border, width: style.borderWidth),\n      borderRadius: FBadgeStyles.defaultRadius,\n    ),\n    contentStyle: FBadgeContentStyle(\n      labelTextStyle: typography.sm.copyWith(\n        color: colors.foreground,\n        fontWeight: FontWeight.w600,\n      ),\n    ),\n  ),\n  destructive: FBadgeStyle(\n    decoration: BoxDecoration(\n      color: colors.destructive,\n      borderRadius: FBadgeStyles.defaultRadius,\n    ),\n    contentStyle: FBadgeContentStyle(\n      labelTextStyle: typography.sm.copyWith(\n        color: colors.destructiveForeground,\n        fontWeight: FontWeight.w600,\n      ),\n    ),\n  ),\n);\n',
  ),
  fbottomnavigationbaritemstyle(
    'FBottomNavigationBarItemStyle',
    <String>['bottom-navigation-bar-item', 'bottomnavigationbaritem'],
    <String>['FBottomNavigationBarItemStyle'],
    'FBottomNavigationBarItemStyle bottomNavigationBarItemStyle({\n  required FColors colors,\n  required FTypography typography,\n  required FStyle style,\n}) => FBottomNavigationBarItemStyle(\n  iconStyle: FWidgetStateMap({\n    WidgetState.selected: IconThemeData(color: colors.primary, size: 24),\n    WidgetState.any: IconThemeData(\n      color: colors.disable(colors.foreground),\n      size: 24,\n    ),\n  }),\n  textStyle: FWidgetStateMap({\n    WidgetState.selected: typography.base.copyWith(\n      color: colors.primary,\n      fontSize: 10,\n    ),\n    WidgetState.any: typography.base.copyWith(\n      color: colors.disable(colors.foreground),\n      fontSize: 10,\n    ),\n  }),\n  tappableStyle: style.tappableStyle,\n  focusedOutlineStyle: style.focusedOutlineStyle,\n  padding: const EdgeInsets.all(5),\n  spacing: 2,\n);\n',
  ),
  fbottomnavigationbarstyle(
    'FBottomNavigationBarStyle',
    <String>['bottom-navigation-bar', 'bottomnavigationbar'],
    <String>['FBottomNavigationBarStyle', 'FBottomNavigationBarItemStyle'],
    'FBottomNavigationBarStyle bottomNavigationBarStyle({\n  required FColors colors,\n  required FTypography typography,\n  required FStyle style,\n}) => FBottomNavigationBarStyle(\n  decoration: BoxDecoration(\n    border: Border(top: BorderSide(color: colors.border)),\n    color: colors.background,\n  ),\n  itemStyle: _bottomNavigationBarItemStyle(\n    colors: colors,\n    typography: typography,\n    style: style,\n  ),\n  padding: const EdgeInsets.all(5),\n);\n',
  ),
  fbreadcrumbstyle(
    'FBreadcrumbStyle',
    <String>['breadcrumb'],
    <String>['FBreadcrumbStyle'],
    'FBreadcrumbStyle breadcrumbStyle({\n  required FColors colors,\n  required FTypography typography,\n  required FStyle style,\n}) => FBreadcrumbStyle(\n  textStyle: FWidgetStateMap({\n    WidgetState.selected &\n        (WidgetState.hovered | WidgetState.pressed): typography.sm.copyWith(\n      fontWeight: FontWeight.w400,\n      color: colors.foreground,\n      decoration: TextDecoration.underline,\n    ),\n    WidgetState.selected: typography.sm.copyWith(\n      fontWeight: FontWeight.w400,\n      color: colors.foreground,\n    ),\n    WidgetState.hovered | WidgetState.pressed: typography.sm.copyWith(\n      fontWeight: FontWeight.w400,\n      color: colors.primary,\n      decoration: TextDecoration.underline,\n    ),\n    WidgetState.any: typography.sm.copyWith(\n      fontWeight: FontWeight.w400,\n      color: colors.mutedForeground,\n    ),\n  }),\n  iconStyle: IconThemeData(color: colors.mutedForeground, size: 16),\n  tappableStyle: style.tappableStyle.copyWith(\n    animationTween: FTappableAnimations.none,\n  ),\n  focusedOutlineStyle: style.focusedOutlineStyle,\n  padding: const EdgeInsets.symmetric(horizontal: 5),\n);\n',
  ),
  fbuttoncontentstyle(
    'FButtonContentStyle',
    <String>['button-content', 'buttoncontent'],
    <String>['FButtonContentStyle'],
    'FButtonContentStyle buttonContentStyle({\n  required FTypography typography,\n  required Color enabled,\n  required Color disabled,\n}) => FButtonContentStyle(\n  textStyle: FWidgetStateMap({\n    WidgetState.disabled: typography.base.copyWith(\n      color: disabled,\n      fontWeight: FontWeight.w500,\n      height: 1,\n    ),\n    WidgetState.any: typography.base.copyWith(\n      color: enabled,\n      fontWeight: FontWeight.w500,\n      height: 1,\n    ),\n  }),\n  iconStyle: FWidgetStateMap({\n    WidgetState.disabled: IconThemeData(color: disabled, size: 20),\n    WidgetState.any: IconThemeData(color: enabled, size: 20),\n  }),\n  padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 12.5),\n);\n',
  ),
  fbuttoniconcontentstyle(
    'FButtonIconContentStyle',
    <String>['button-icon-content', 'buttoniconcontent'],
    <String>['FButtonIconContentStyle'],
    'FButtonIconContentStyle buttonIconContentStyle({\n  required Color enabled,\n  required Color disabled,\n}) => FButtonIconContentStyle(\n  iconStyle: FWidgetStateMap({\n    WidgetState.disabled: IconThemeData(color: disabled, size: 20),\n    WidgetState.any: IconThemeData(color: enabled, size: 20),\n  }),\n  padding: const EdgeInsets.all(7.5),\n);\n',
  ),
  fbuttonstyle(
    'FButtonStyle',
    <String>['button'],
    <String>['FButtonStyle', 'FButtonContentStyle'],
    'FButtonStyle buttonStyle({\n  required FColors colors,\n  required FTypography typography,\n  required FStyle style,\n  required Color color,\n  required Color foregroundColor,\n}) => FButtonStyle(\n  decoration: FWidgetStateMap({\n    WidgetState.disabled: BoxDecoration(\n      borderRadius: style.borderRadius,\n      color: colors.disable(color),\n    ),\n    WidgetState.hovered | WidgetState.pressed: BoxDecoration(\n      borderRadius: style.borderRadius,\n      color: colors.hover(color),\n    ),\n    WidgetState.any: BoxDecoration(\n      borderRadius: style.borderRadius,\n      color: color,\n    ),\n  }),\n  focusedOutlineStyle: style.focusedOutlineStyle,\n  contentStyle: _buttonContentStyle(\n    typography: typography,\n    enabled: foregroundColor,\n    disabled: colors.disable(foregroundColor, colors.disable(color)),\n  ),\n  iconContentStyle: FButtonIconContentStyle(\n    iconStyle: FWidgetStateMap({\n      WidgetState.disabled: IconThemeData(\n        color: colors.disable(foregroundColor, colors.disable(color)),\n        size: 20,\n      ),\n      WidgetState.any: IconThemeData(color: foregroundColor, size: 20),\n    }),\n  ),\n  tappableStyle: style.tappableStyle,\n);\n',
  ),
  fbuttonstyles(
    'FButtonStyles',
    <String>['buttons'],
    <String>['FButtonStyles', 'FButtonStyle', 'FButtonContentStyle', 'FButtonIconContentStyle'],
    'FButtonStyles buttonStyles({\n  required FColors colors,\n  required FTypography typography,\n  required FStyle style,\n}) => FButtonStyles(\n  primary: _buttonStyle(\n    colors: colors,\n    style: style,\n    typography: typography,\n    color: colors.primary,\n    foregroundColor: colors.primaryForeground,\n  ),\n  secondary: _buttonStyle(\n    colors: colors,\n    style: style,\n    typography: typography,\n    color: colors.secondary,\n    foregroundColor: colors.secondaryForeground,\n  ),\n  destructive: _buttonStyle(\n    colors: colors,\n    style: style,\n    typography: typography,\n    color: colors.destructive,\n    foregroundColor: colors.destructiveForeground,\n  ),\n  outline: FButtonStyle(\n    decoration: FWidgetStateMap({\n      WidgetState.disabled: BoxDecoration(\n        border: Border.all(color: colors.disable(colors.border)),\n        borderRadius: style.borderRadius,\n      ),\n      WidgetState.hovered | WidgetState.pressed: BoxDecoration(\n        border: Border.all(color: colors.border),\n        borderRadius: style.borderRadius,\n        color: colors.secondary,\n      ),\n      WidgetState.any: BoxDecoration(\n        border: Border.all(color: colors.border),\n        borderRadius: style.borderRadius,\n      ),\n    }),\n    focusedOutlineStyle: style.focusedOutlineStyle,\n    contentStyle: _buttonContentStyle(\n      typography: typography,\n      enabled: colors.secondaryForeground,\n      disabled: colors.disable(colors.secondaryForeground),\n    ),\n    iconContentStyle: _buttonIconContentStyle(\n      enabled: colors.secondaryForeground,\n      disabled: colors.disable(colors.secondaryForeground),\n    ),\n    tappableStyle: style.tappableStyle,\n  ),\n  ghost: FButtonStyle(\n    decoration: FWidgetStateMap({\n      WidgetState.disabled: BoxDecoration(borderRadius: style.borderRadius),\n      WidgetState.hovered | WidgetState.pressed: BoxDecoration(\n        borderRadius: style.borderRadius,\n        color: colors.secondary,\n      ),\n      WidgetState.any: BoxDecoration(borderRadius: style.borderRadius),\n    }),\n    focusedOutlineStyle: style.focusedOutlineStyle,\n    contentStyle: _buttonContentStyle(\n      typography: typography,\n      enabled: colors.secondaryForeground,\n      disabled: colors.disable(colors.secondaryForeground),\n    ),\n    iconContentStyle: _buttonIconContentStyle(\n      enabled: colors.secondaryForeground,\n      disabled: colors.disable(colors.secondaryForeground),\n    ),\n    tappableStyle: style.tappableStyle,\n  ),\n);\n',
  ),
  fcalendardaypickerstyle(
    'FCalendarDayPickerStyle',
    <String>['calendar-day-picker', 'calendardaypicker'],
    <String>['FCalendarDayPickerStyle'],
    'FCalendarDayPickerStyle calendarDayPickerStyle({\n  required FColors colors,\n  required FTypography typography,\n}) {\n  final mutedTextStyle = typography.base.copyWith(\n    color: colors.disable(colors.mutedForeground),\n    fontWeight: FontWeight.w500,\n  );\n  final background = {\n    WidgetState.disabled & WidgetState.selected: colors.primaryForeground,\n    WidgetState.disabled: colors.background,\n  };\n  final border = {\n    WidgetState.disabled & WidgetState.selected & WidgetState.focused:\n        colors.primaryForeground,\n    WidgetState.disabled & WidgetState.focused: colors.background,\n    WidgetState.focused: colors.foreground,\n  };\n  return FCalendarDayPickerStyle(\n    headerTextStyle: typography.xs.copyWith(color: colors.mutedForeground),\n    current: FCalendarEntryStyle(\n      backgroundColor: FWidgetStateMap({\n        ...background,\n        WidgetState.selected: colors.foreground,\n        ~WidgetState.selected & (WidgetState.hovered | WidgetState.pressed):\n            colors.secondary,\n        WidgetState.any: colors.background,\n      }),\n      borderColor: FWidgetStateMap(border),\n      textStyle: FWidgetStateMap({\n        WidgetState.disabled: mutedTextStyle,\n        WidgetState.selected: typography.base.copyWith(\n          color: colors.background,\n          fontWeight: FontWeight.w500,\n        ),\n        WidgetState.any: typography.base.copyWith(\n          color: colors.foreground,\n          fontWeight: FontWeight.w500,\n        ),\n      }),\n      radius: const Radius.circular(4),\n    ),\n    enclosing: FCalendarEntryStyle(\n      backgroundColor: FWidgetStateMap({\n        ...background,\n        WidgetState.selected: colors.primaryForeground,\n        ~WidgetState.selected & (WidgetState.hovered | WidgetState.pressed):\n            colors.secondary,\n        WidgetState.any: colors.background,\n      }),\n      borderColor: FWidgetStateMap(border),\n      textStyle: FWidgetStateMap.all(mutedTextStyle),\n      radius: const Radius.circular(4),\n    ),\n    tileSize: 42,\n  );\n}\n',
  ),
  fcalendarheaderstyle(
    'FCalendarHeaderStyle',
    <String>['calendar-header', 'calendarheader'],
    <String>['FCalendarHeaderStyle', 'FButtonStyles', 'FButtonStyle', 'FButtonContentStyle', 'FButtonIconContentStyle'],
    'FCalendarHeaderStyle calendarHeaderStyle({\n  required FColors colors,\n  required FTypography typography,\n  required FStyle style,\n}) {\n  final outline = _buttonStyles(\n    colors: colors,\n    typography: typography,\n    style: style,\n  ).outline;\n  return FCalendarHeaderStyle(\n    focusedOutlineStyle: style.focusedOutlineStyle,\n    buttonStyle: outline.copyWith(\n      decoration: outline.decoration.map(\n        (d) => d.copyWith(borderRadius: BorderRadius.circular(4)),\n      ),\n      iconContentStyle: FButtonIconContentStyle(\n        iconStyle: FWidgetStateMap({\n          WidgetState.disabled: IconThemeData(\n            color: colors.disable(colors.mutedForeground),\n            size: 17,\n          ),\n          WidgetState.any: IconThemeData(\n            color: colors.mutedForeground,\n            size: 17,\n          ),\n        }),\n      ),\n    ),\n    headerTextStyle: typography.base.copyWith(\n      color: colors.primary,\n      fontWeight: FontWeight.w600,\n    ),\n    animationDuration: const Duration(milliseconds: 200),\n  );\n}\n',
  ),
  fcalendarstyle(
    'FCalendarStyle',
    <String>['calendar'],
    <String>[
      'FCalendarStyle',
      'FCalendarHeaderStyle',
      'FButtonStyles',
      'FButtonStyle',
      'FButtonContentStyle',
      'FButtonIconContentStyle',
      'FCalendarDayPickerStyle',
    ],
    'FCalendarStyle calendarStyle({\n  required FColors colors,\n  required FTypography typography,\n  required FStyle style,\n}) => FCalendarStyle(\n  headerStyle: _calendarHeaderStyle(\n    colors: colors,\n    typography: typography,\n    style: style,\n  ),\n  dayPickerStyle: _calendarDayPickerStyle(\n    colors: colors,\n    typography: typography,\n  ),\n  yearMonthPickerStyle: FCalendarEntryStyle(\n    backgroundColor: FWidgetStateMap({\n      (WidgetState.hovered | WidgetState.pressed) & ~WidgetState.disabled:\n          colors.secondary,\n      WidgetState.any: colors.background,\n    }),\n    borderColor: FWidgetStateMap({\n      WidgetState.disabled: colors.background,\n      WidgetState.focused: colors.foreground,\n    }),\n    textStyle: FWidgetStateMap({\n      WidgetState.disabled: typography.base.copyWith(\n        color: colors.disable(colors.mutedForeground),\n        fontWeight: FontWeight.w500,\n      ),\n      WidgetState.any: typography.base.copyWith(\n        color: colors.foreground,\n        fontWeight: FontWeight.w500,\n      ),\n    }),\n    radius: const Radius.circular(8),\n  ),\n  decoration: BoxDecoration(\n    borderRadius: style.borderRadius,\n    border: Border.all(color: colors.border),\n    color: colors.background,\n  ),\n  padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 16),\n  pageAnimationDuration: const Duration(milliseconds: 200),\n);\n',
  ),
  fcardstyle(
    'FCardStyle',
    <String>['card'],
    <String>['FCardStyle'],
    'FCardStyle cardStyle({\n  required FColors colors,\n  required FTypography typography,\n  required FStyle style,\n}) => FCardStyle(\n  decoration: BoxDecoration(\n    border: Border.all(color: colors.border),\n    borderRadius: style.borderRadius,\n    color: colors.background,\n  ),\n  contentStyle: FCardContentStyle(\n    titleTextStyle: typography.xl2.copyWith(\n      fontWeight: FontWeight.w600,\n      color: colors.foreground,\n      height: 1.5,\n    ),\n    subtitleTextStyle: typography.sm.copyWith(color: colors.mutedForeground),\n  ),\n);\n',
  ),
  fcheckboxstyle(
    'FCheckboxStyle',
    <String>['checkbox'],
    <String>['FCheckboxStyle', 'FLabelStyles', 'FLabelStyle'],
    'FCheckboxStyle checkboxStyle({required FColors colors, required FStyle style}) {\n  final label = _labelStyles(style: style).horizontalStyle;\n  return FCheckboxStyle(\n    tappableStyle: style.tappableStyle.copyWith(\n      animationTween: FTappableAnimations.none,\n    ),\n    focusedOutlineStyle: style.focusedOutlineStyle.copyWith(\n      borderRadius: BorderRadius.circular(4),\n    ),\n    iconStyle: FWidgetStateMap({\n      WidgetState.selected & WidgetState.error: IconThemeData(\n        color: colors.errorForeground,\n        size: 14,\n      ),\n      WidgetState.selected & ~WidgetState.disabled: IconThemeData(\n        color: colors.primaryForeground,\n        size: 14,\n      ),\n      WidgetState.selected & WidgetState.disabled: IconThemeData(\n        color: colors.disable(colors.primaryForeground),\n        size: 14,\n      ),\n    }),\n    decoration: FWidgetStateMap({\n      WidgetState.error & WidgetState.selected: BoxDecoration(\n        borderRadius: style.borderRadius,\n        color: colors.error,\n      ),\n      WidgetState.error: BoxDecoration(\n        borderRadius: style.borderRadius,\n        border: Border.all(color: colors.error, width: 0.6),\n        color: colors.background,\n      ),\n      WidgetState.disabled & WidgetState.selected: BoxDecoration(\n        borderRadius: style.borderRadius,\n        color: colors.disable(colors.primary),\n      ),\n      WidgetState.disabled: BoxDecoration(\n        borderRadius: style.borderRadius,\n        border: Border.all(color: colors.disable(colors.primary), width: 0.6),\n        color: colors.disable(colors.background),\n      ),\n      WidgetState.selected: BoxDecoration(\n        borderRadius: style.borderRadius,\n        color: colors.primary,\n      ),\n      WidgetState.any: BoxDecoration(\n        borderRadius: style.borderRadius,\n        border: Border.all(color: colors.primary, width: 0.6),\n        color: colors.background,\n      ),\n    }),\n    labelTextStyle: style.formFieldStyle.labelTextStyle,\n    descriptionTextStyle: style.formFieldStyle.descriptionTextStyle,\n    errorTextStyle: style.formFieldStyle.errorTextStyle,\n    labelPadding: label.labelPadding,\n    descriptionPadding: label.descriptionPadding,\n    errorPadding: label.errorPadding,\n    childPadding: label.childPadding,\n    animationDuration: const Duration(milliseconds: 100),\n    curve: Curves.linear,\n    size: 16,\n  );\n}\n',
  ),
  fdatefieldstyle(
    'FDateFieldStyle',
    <String>['date-field', 'datefield'],
    <String>[
      'FDateFieldStyle',
      'FTextFieldStyle',
      'FLabelStyles',
      'FLabelStyle',
      'FPopoverStyle',
      'FCalendarStyle',
      'FCalendarHeaderStyle',
      'FButtonStyles',
      'FButtonStyle',
      'FButtonContentStyle',
      'FButtonIconContentStyle',
      'FCalendarDayPickerStyle',
    ],
    'FDateFieldStyle dateFieldStyle({\n  required FColors colors,\n  required FTypography typography,\n  required FStyle style,\n}) => FDateFieldStyle(\n  textFieldStyle: _textFieldStyle(\n    colors: colors,\n    typography: typography,\n    style: style,\n  ),\n  popoverStyle: _popoverStyle(colors: colors, style: style),\n  calendarStyle: _calendarStyle(\n    colors: colors,\n    typography: typography,\n    style: style,\n  ),\n  iconStyle: IconThemeData(color: colors.mutedForeground, size: 18),\n);\n',
  ),
  fdialogstyle(
    'FDialogStyle',
    <String>['dialog'],
    <String>['FDialogStyle'],
    'FDialogStyle dialogStyle({\n  required FStyle style,\n  required FColors colors,\n  required FTypography typography,\n}) {\n  final title = typography.lg.copyWith(\n    fontWeight: FontWeight.w600,\n    color: colors.foreground,\n  );\n  final body = typography.sm.copyWith(color: colors.mutedForeground);\n  return FDialogStyle(\n    decoration: BoxDecoration(\n      borderRadius: style.borderRadius,\n      color: colors.background,\n    ),\n    horizontalStyle: FDialogContentStyle(\n      titleTextStyle: title,\n      bodyTextStyle: body,\n      padding: const EdgeInsets.symmetric(horizontal: 25, vertical: 25),\n      actionSpacing: 7,\n    ),\n    verticalStyle: FDialogContentStyle(\n      titleTextStyle: title,\n      bodyTextStyle: body,\n      padding: const EdgeInsets.symmetric(horizontal: 30, vertical: 25),\n      actionSpacing: 8,\n    ),\n    insetAnimationDuration: const Duration(milliseconds: 100),\n    insetAnimationCurve: Curves.decelerate,\n    insetPadding: const EdgeInsets.symmetric(horizontal: 40, vertical: 24),\n  );\n}\n',
  ),
  fdividerstyles(
    'FDividerStyles',
    <String>['dividers'],
    <String>['FDividerStyles'],
    'FDividerStyles dividerStyles({\n  required FColors colors,\n  required FStyle style,\n}) => FDividerStyles(\n  horizontalStyle: FDividerStyle(\n    color: colors.secondary,\n    padding: FDividerStyle.defaultPadding.horizontalStyle,\n    width: style.borderWidth,\n  ),\n  verticalStyle: FDividerStyle(\n    color: colors.secondary,\n    padding: FDividerStyle.defaultPadding.verticalStyle,\n    width: style.borderWidth,\n  ),\n);\n',
  ),
  fformfieldstyle(
    'FFormFieldStyle',
    <String>['form-field', 'formfield'],
    <String>['FFormFieldStyle'],
    'FFormFieldStyle formFieldStyle({\n  required FColors colors,\n  required FTypography typography,\n}) => FFormFieldStyle(\n  labelTextStyle: FWidgetStateMap({\n    WidgetState.error: typography.sm.copyWith(\n      color: colors.error,\n      fontWeight: FontWeight.w600,\n    ),\n    WidgetState.disabled: typography.sm.copyWith(\n      color: colors.disable(colors.primary),\n      fontWeight: FontWeight.w600,\n    ),\n    WidgetState.any: typography.sm.copyWith(\n      color: colors.primary,\n      fontWeight: FontWeight.w600,\n    ),\n  }),\n  descriptionTextStyle: FWidgetStateMap({\n    WidgetState.error: typography.sm.copyWith(color: colors.mutedForeground),\n    WidgetState.disabled: typography.sm.copyWith(\n      color: colors.disable(colors.mutedForeground),\n    ),\n    WidgetState.any: typography.sm.copyWith(color: colors.mutedForeground),\n  }),\n  errorTextStyle: typography.sm.copyWith(\n    color: colors.error,\n    fontWeight: FontWeight.w600,\n  ),\n);\n',
  ),
  fheaderactionstyle(
    'FHeaderActionStyle',
    <String>['header-action', 'headeraction'],
    <String>['FHeaderActionStyle'],
    'FHeaderActionStyle headerActionStyle({\n  required FColors colors,\n  required FStyle style,\n  required double size,\n}) => FHeaderActionStyle(\n  iconStyle: FWidgetStateMap({\n    WidgetState.disabled: IconThemeData(\n      color: colors.disable(colors.foreground),\n      size: size,\n    ),\n    WidgetState.any: IconThemeData(color: colors.foreground, size: size),\n  }),\n  focusedOutlineStyle: style.focusedOutlineStyle,\n  tappableStyle: style.tappableStyle,\n);\n',
  ),
  fheaderstyles(
    'FHeaderStyles',
    <String>['headers'],
    <String>['FHeaderStyles', 'FHeaderActionStyle'],
    'FHeaderStyles headerStyles({\n  required FColors colors,\n  required FTypography typography,\n  required FStyle style,\n}) => FHeaderStyles(\n  rootStyle: FHeaderStyle(\n    titleTextStyle: typography.xl3.copyWith(\n      color: colors.foreground,\n      fontWeight: FontWeight.w700,\n      height: 1,\n    ),\n    actionStyle: _headerActionStyle(colors: colors, style: style, size: 30),\n    padding: style.pagePadding.copyWith(bottom: 15),\n  ),\n  nestedStyle: FHeaderStyle(\n    titleTextStyle: typography.xl.copyWith(\n      color: colors.foreground,\n      fontWeight: FontWeight.w600,\n      height: 1,\n    ),\n    actionStyle: _headerActionStyle(colors: colors, style: style, size: 25),\n    padding: style.pagePadding.copyWith(bottom: 15),\n  ),\n);\n',
  ),
  flabelstyle(
    'FLabelStyle',
    <String>['label'],
    <String>['FLabelStyle'],
    'FLabelStyle labelStyle({\n  required FStyle style,\n  EdgeInsetsGeometry labelPadding = EdgeInsets.zero,\n  EdgeInsetsGeometry descriptionPadding = EdgeInsets.zero,\n  EdgeInsetsGeometry errorPadding = EdgeInsets.zero,\n  EdgeInsetsGeometry childPadding = EdgeInsets.zero,\n}) => FLabelStyle.inherit(\n  style: style,\n  labelPadding: labelPadding,\n  descriptionPadding: descriptionPadding,\n  errorPadding: errorPadding,\n  childPadding: childPadding,\n);\n',
  ),
  flabelstyles(
    'FLabelStyles',
    <String>['labels'],
    <String>['FLabelStyles', 'FLabelStyle'],
    'FLabelStyles labelStyles({required FStyle style}) => FLabelStyles(\n  horizontalStyle: _labelStyle(\n    style: style,\n    descriptionPadding: const EdgeInsets.only(top: 2),\n    errorPadding: const EdgeInsets.only(top: 2),\n    childPadding: const EdgeInsets.symmetric(horizontal: 8),\n  ),\n  verticalStyle: _labelStyle(\n    style: style,\n    labelPadding: const EdgeInsets.only(bottom: 5),\n    descriptionPadding: const EdgeInsets.only(top: 5),\n    errorPadding: const EdgeInsets.only(top: 5),\n  ),\n);\n',
  ),
  flinecalendarstyle(
    'FLineCalendarStyle',
    <String>['line-calendar', 'linecalendar'],
    <String>['FLineCalendarStyle'],
    'FLineCalendarStyle lineCalendarStyle({\n  required FColors colors,\n  required FTypography typography,\n  required FStyle style,\n}) {\n  final focusedBorder = Border.all(\n    color: colors.primary,\n    width: style.borderWidth,\n  );\n  return FLineCalendarStyle(\n    decoration: FWidgetStateMap({\n      WidgetState.selected &\n          (WidgetState.hovered | WidgetState.pressed) &\n          WidgetState.focused: BoxDecoration(\n        color: colors.hover(colors.primary),\n        border: focusedBorder,\n        borderRadius: style.borderRadius,\n      ),\n      WidgetState.selected &\n          (WidgetState.hovered | WidgetState.pressed): BoxDecoration(\n        color: colors.hover(colors.primary),\n        borderRadius: style.borderRadius,\n      ),\n      WidgetState.selected & WidgetState.focused: BoxDecoration(\n        color: colors.primary,\n        border: focusedBorder,\n        borderRadius: style.borderRadius,\n      ),\n      WidgetState.selected: BoxDecoration(\n        color: colors.primary,\n        borderRadius: style.borderRadius,\n      ),\n      (WidgetState.hovered | WidgetState.pressed) &\n          WidgetState.focused: BoxDecoration(\n        color: colors.secondary,\n        border: focusedBorder,\n        borderRadius: style.borderRadius,\n      ),\n      (WidgetState.hovered | WidgetState.pressed): BoxDecoration(\n        color: colors.secondary,\n        border: Border.all(color: colors.border),\n        borderRadius: style.borderRadius,\n      ),\n      WidgetState.focused: BoxDecoration(\n        color: colors.background,\n        border: focusedBorder,\n        borderRadius: style.borderRadius,\n      ),\n      WidgetState.any: BoxDecoration(\n        color: colors.background,\n        border: Border.all(color: colors.border),\n        borderRadius: style.borderRadius,\n      ),\n    }),\n    todayIndicatorColor: FWidgetStateMap({\n      WidgetState.selected & (WidgetState.hovered | WidgetState.pressed): colors\n          .hover(colors.primaryForeground),\n      WidgetState.selected: colors.primaryForeground,\n      (WidgetState.hovered | WidgetState.pressed): colors.hover(colors.primary),\n      WidgetState.any: colors.primary,\n    }),\n    dateTextStyle: FWidgetStateMap({\n      WidgetState.selected: typography.xl.copyWith(\n        color: colors.primaryForeground,\n        fontWeight: FontWeight.w500,\n        height: 0,\n      ),\n      WidgetState.any: typography.xl.copyWith(\n        color: colors.primary,\n        fontWeight: FontWeight.w500,\n        height: 0,\n      ),\n    }),\n    weekdayTextStyle: FWidgetStateMap({\n      WidgetState.selected: typography.xs.copyWith(\n        color: colors.primaryForeground,\n        fontWeight: FontWeight.w500,\n        height: 0,\n      ),\n      WidgetState.any: typography.xs.copyWith(\n        color: colors.mutedForeground,\n        fontWeight: FontWeight.w500,\n        height: 0,\n      ),\n    }),\n    tappableStyle: style.tappableStyle,\n    padding: const EdgeInsets.symmetric(horizontal: 6.5),\n    contentEdgeSpacing: 15.5,\n    contentSpacing: 2,\n  );\n}\n',
  ),
  flinearprogressstyle(
    'FLinearProgressStyle',
    <String>['linear-progress', 'linearprogress'],
    <String>['FLinearProgressStyle'],
    'FLinearProgressStyle linearProgressStyle({\n  required FColors colors,\n  required FStyle style,\n}) => FLinearProgressStyle(\n  backgroundDecoration: BoxDecoration(\n    borderRadius: style.borderRadius,\n    color: colors.secondary,\n  ),\n  progressDecoration: BoxDecoration(\n    borderRadius: style.borderRadius,\n    color: colors.primary,\n  ),\n  constraints: const BoxConstraints.tightFor(height: 10.0),\n  curve: Curves.ease,\n);\n',
  ),
  fpaginationstyle(
    'FPaginationStyle',
    <String>['pagination'],
    <String>['FPaginationStyle'],
    'FPaginationStyle paginationStyle({\n  required FColors colors,\n  required FTypography typography,\n  required FStyle style,\n}) => FPaginationStyle(\n  itemIconStyle: FWidgetStateMap.all(\n    IconThemeData(color: colors.primary, size: 18),\n  ),\n  itemDecoration: FWidgetStateMap({\n    WidgetState.selected &\n        (WidgetState.hovered | WidgetState.pressed): BoxDecoration(\n      borderRadius: style.borderRadius,\n      color: colors.hover(colors.primary),\n    ),\n    WidgetState.selected: BoxDecoration(\n      borderRadius: style.borderRadius,\n      color: colors.primary,\n    ),\n    WidgetState.hovered: BoxDecoration(\n      borderRadius: style.borderRadius,\n      color: colors.border,\n    ),\n    WidgetState.any: BoxDecoration(\n      borderRadius: style.borderRadius,\n      color: colors.background,\n    ),\n  }),\n  itemTextStyle: FWidgetStateMap({\n    WidgetState.selected: typography.sm.copyWith(\n      color: colors.primaryForeground,\n    ),\n    WidgetState.any: typography.sm.copyWith(color: colors.primary),\n  }),\n  ellipsisTextStyle: typography.sm.copyWith(color: colors.primary),\n  actionTappableStyle: style.tappableStyle,\n  pageTappableStyle: style.tappableStyle,\n  itemPadding: const EdgeInsets.symmetric(horizontal: 2),\n  itemConstraints: const BoxConstraints.tightFor(width: 40.0, height: 40.0),\n);\n',
  ),
  fpickerstyle(
    'FPickerStyle',
    <String>['picker'],
    <String>['FPickerStyle'],
    'FPickerStyle pickerStyle({\n  required FColors colors,\n  required FStyle style,\n  required FTypography typography,\n}) => FPickerStyle(\n  textStyle: typography.base.copyWith(fontWeight: FontWeight.w500),\n  selectionBorderRadius: style.borderRadius,\n  selectionColor: colors.muted,\n  focusedOutlineStyle: style.focusedOutlineStyle,\n  diameterRatio: 1.07,\n  squeeze: 1,\n  magnification: 1,\n  overAndUnderCenterOpacity: 0.25,\n  spacing: 5,\n  textHeightBehavior: const TextHeightBehavior(\n    applyHeightToFirstAscent: false,\n    applyHeightToLastDescent: false,\n  ),\n  selectionHeightAdjustment: 0,\n);\n',
  ),
  fpopovermenustyle(
    'FPopoverMenuStyle',
    <String>['popover-menu', 'popovermenu'],
    <String>['FPopoverMenuStyle', 'FTileGroupStyle', 'FTileStyle', 'FTileContentStyle'],
    'FPopoverMenuStyle popoverMenuStyle({\n  required FColors colors,\n  required FStyle style,\n  required FTypography typography,\n}) => FPopoverMenuStyle.inherit(\n  colors: colors,\n  style: style,\n  typography: typography,\n);\n',
  ),
  fpopoverstyle(
    'FPopoverStyle',
    <String>['popover'],
    <String>['FPopoverStyle'],
    'FPopoverStyle popoverStyle({required FColors colors, required FStyle style}) =>\n    FPopoverStyle(\n      decoration: BoxDecoration(\n        color: colors.background,\n        borderRadius: style.borderRadius,\n        border: Border.all(width: style.borderWidth, color: colors.border),\n        boxShadow: style.shadow,\n      ),\n      viewInsets: const EdgeInsets.all(5),\n    );\n',
  ),
  fprogressstyles(
    'FProgressStyles',
    <String>['progresses'],
    <String>['FProgressStyles', 'FLinearProgressStyle'],
    'FProgressStyles progressStyles({\n  required FColors colors,\n  required FStyle style,\n}) => FProgressStyles(\n  linearProgressStyle: _linearProgressStyle(colors: colors, style: style),\n  circularIconProgressStyle: IconThemeData(\n    color: colors.mutedForeground,\n    size: 20,\n  ),\n);\n',
  ),
  fradiostyle(
    'FRadioStyle',
    <String>['radio'],
    <String>['FRadioStyle', 'FLabelStyles', 'FLabelStyle'],
    'FRadioStyle radioStyle({required FColors colors, required FStyle style}) {\n  final label = _labelStyles(style: style).horizontalStyle;\n  return FRadioStyle(\n    tappableStyle: style.tappableStyle.copyWith(\n      animationTween: FTappableAnimations.none,\n    ),\n    focusedOutlineStyle: FFocusedOutlineStyle(\n      color: colors.primary,\n      borderRadius: BorderRadius.circular(100),\n    ),\n    borderColor: FWidgetStateMap({\n      WidgetState.error: colors.error,\n      WidgetState.disabled: colors.disable(colors.primary),\n      WidgetState.any: colors.primary,\n    }),\n    backgroundColor: FWidgetStateMap.all(colors.background),\n    indicatorColor: FWidgetStateMap({\n      WidgetState.error: colors.error,\n      WidgetState.disabled: colors.disable(colors.primary),\n      WidgetState.any: colors.primary,\n    }),\n    labelTextStyle: style.formFieldStyle.labelTextStyle,\n    descriptionTextStyle: style.formFieldStyle.descriptionTextStyle,\n    errorTextStyle: style.formFieldStyle.errorTextStyle,\n    labelPadding: label.labelPadding,\n    descriptionPadding: label.descriptionPadding,\n    errorPadding: label.errorPadding,\n    childPadding: label.childPadding,\n    animationDuration: const Duration(milliseconds: 100),\n    curve: Curves.easeOutCirc,\n  );\n}\n',
  ),
  fresizablestyle(
    'FResizableStyle',
    <String>['resizable'],
    <String>['FResizableStyle'],
    'FResizableStyle resizableStyle({\n  required FColors colors,\n  required FStyle style,\n}) => FResizableStyle(\n  horizontalDividerStyle: FResizableDividerStyle(\n    color: colors.border,\n    focusedOutlineStyle: style.focusedOutlineStyle,\n    thumbStyle: FResizableDividerThumbStyle(\n      decoration: BoxDecoration(\n        color: colors.border,\n        borderRadius: style.borderRadius,\n      ),\n      foregroundColor: colors.foreground,\n      height: 20,\n      width: 10,\n    ),\n  ),\n  verticalDividerStyle: FResizableDividerStyle(\n    color: colors.border,\n    focusedOutlineStyle: style.focusedOutlineStyle,\n    thumbStyle: FResizableDividerThumbStyle(\n      decoration: BoxDecoration(\n        color: colors.border,\n        borderRadius: style.borderRadius,\n      ),\n      foregroundColor: colors.foreground,\n      height: 10,\n      width: 20,\n    ),\n  ),\n);\n',
  ),
  fscaffoldstyle(
    'FScaffoldStyle',
    <String>['scaffold'],
    <String>['FScaffoldStyle'],
    'FScaffoldStyle scaffoldStyle({\n  required FColors colors,\n  required FStyle style,\n}) => FScaffoldStyle(\n  backgroundColor: colors.background,\n  sidebarBackgroundColor: colors.background,\n  childPadding: style.pagePadding.copyWith(top: 0, bottom: 0),\n  footerDecoration: BoxDecoration(\n    border: Border(\n      top: BorderSide(color: colors.border, width: style.borderWidth),\n    ),\n  ),\n  headerDecoration: const BoxDecoration(),\n);\n',
  ),
  fselectcontentstyle(
    'FSelectContentStyle',
    <String>['select-content', 'selectcontent'],
    <String>['FSelectContentStyle', 'FSelectSectionStyle', 'FSelectItemStyle', 'FSelectScrollHandleStyle'],
    'FSelectContentStyle selectContentStyle({\n  required FColors colors,\n  required FStyle style,\n  required FTypography typography,\n}) => FSelectContentStyle(\n  sectionStyle: _selectSectionStyle(\n    colors: colors,\n    style: style,\n    typography: typography,\n  ),\n  scrollHandleStyle: _selectScrollHandleStyle(colors: colors),\n  padding: const EdgeInsets.symmetric(vertical: 5),\n);\n',
  ),
  fselectgroupstyle(
    'FSelectGroupStyle',
    <String>['select-group', 'selectgroup'],
    <String>['FSelectGroupStyle', 'FCheckboxStyle', 'FRadioStyle', 'FLabelStyles', 'FLabelStyle'],
    'FSelectGroupStyle selectGroupStyle({\n  required FColors colors,\n  required FTypography typography,\n  required FStyle style,\n}) {\n  final vertical = _labelStyles(style: style).verticalStyle;\n  final labelTextStyle = FWidgetStateMap({\n    WidgetState.disabled: typography.sm.copyWith(\n      color: colors.disable(colors.primary),\n      fontWeight: FontWeight.w500,\n    ),\n    WidgetState.any: typography.sm.copyWith(\n      color: colors.primary,\n      fontWeight: FontWeight.w500,\n    ),\n  });\n  final descriptionTextStyle = FWidgetStateMap({\n    WidgetState.disabled: typography.sm.copyWith(\n      color: colors.disable(colors.mutedForeground),\n    ),\n    WidgetState.any: typography.sm.copyWith(color: colors.mutedForeground),\n  });\n  final errorTextStyle = typography.sm.copyWith(\n    color: colors.error,\n    fontWeight: FontWeight.w500,\n  );\n  return FSelectGroupStyle(\n    checkboxStyle: _checkboxStyle(colors: colors, style: style).copyWith(\n      labelTextStyle: labelTextStyle,\n      descriptionTextStyle: descriptionTextStyle,\n      errorTextStyle: errorTextStyle,\n    ),\n    radioStyle: _radioStyle(colors: colors, style: style).copyWith(\n      labelTextStyle: labelTextStyle,\n      descriptionTextStyle: descriptionTextStyle,\n      errorTextStyle: errorTextStyle,\n    ),\n    labelTextStyle: style.formFieldStyle.labelTextStyle,\n    descriptionTextStyle: style.formFieldStyle.descriptionTextStyle,\n    errorTextStyle: style.formFieldStyle.errorTextStyle,\n    labelPadding: vertical.labelPadding,\n    descriptionPadding: vertical.descriptionPadding,\n    errorPadding: vertical.errorPadding,\n    childPadding: vertical.childPadding,\n  );\n}\n',
  ),
  fselectitemstyle(
    'FSelectItemStyle',
    <String>['select-item', 'selectitem'],
    <String>['FSelectItemStyle'],
    'FSelectItemStyle selectItemStyle({\n  required FColors colors,\n  required FStyle style,\n  required FTypography typography,\n}) => FSelectItemStyle(\n  decoration: FWidgetStateMap({\n    ~WidgetState.disabled &\n        (WidgetState.focused |\n            WidgetState.hovered |\n            WidgetState.pressed): BoxDecoration(\n      color: colors.secondary,\n      borderRadius: style.borderRadius,\n    ),\n  }),\n  textStyle: FWidgetStateMap({\n    WidgetState.disabled: typography.sm.copyWith(\n      color: colors.disable(colors.primary),\n    ),\n    WidgetState.any: typography.sm.copyWith(color: colors.primary),\n  }),\n  iconStyle: FWidgetStateMap({\n    WidgetState.disabled: IconThemeData(\n      color: colors.disable(colors.primary),\n      size: 15,\n    ),\n    WidgetState.any: IconThemeData(color: colors.primary, size: 15),\n  }),\n  tappableStyle: style.tappableStyle.copyWith(\n    animationTween: FTappableAnimations.none,\n  ),\n  padding: const EdgeInsetsDirectional.only(\n    start: 15,\n    top: 7.5,\n    bottom: 7.5,\n    end: 10,\n  ),\n);\n',
  ),
  fselectmenutilestyle(
    'FSelectMenuTileStyle',
    <String>['select-menu-tile', 'selectmenutile'],
    <String>['FSelectMenuTileStyle', 'FPopoverMenuStyle', 'FTileGroupStyle', 'FTileStyle', 'FTileContentStyle'],
    'FSelectMenuTileStyle selectMenuTileStyle({\n  required FColors colors,\n  required FTypography typography,\n  required FStyle style,\n}) {\n  final groupStyle = _tileGroupStyle(\n    colors: colors,\n    style: style,\n    typography: typography,\n  );\n  return FSelectMenuTileStyle(\n    menuStyle: _popoverMenuStyle(\n      colors: colors,\n      style: style,\n      typography: typography,\n    ),\n    tileStyle: groupStyle.tileStyle,\n    labelTextStyle: groupStyle.labelTextStyle,\n    descriptionTextStyle: groupStyle.descriptionTextStyle,\n    errorTextStyle: groupStyle.errorTextStyle,\n    labelPadding: groupStyle.labelPadding,\n    descriptionPadding: groupStyle.descriptionPadding,\n    errorPadding: groupStyle.errorPadding,\n  );\n}\n',
  ),
  fselectscrollhandlestyle(
    'FSelectScrollHandleStyle',
    <String>['select-scroll-handle', 'selectscrollhandle'],
    <String>['FSelectScrollHandleStyle'],
    'FSelectScrollHandleStyle selectScrollHandleStyle({required FColors colors}) =>\n    FSelectScrollHandleStyle(\n      iconStyle: IconThemeData(color: colors.primary, size: 17),\n      background: colors.background,\n      enterDuration: const Duration(milliseconds: 200),\n      pixelsPerSecond: 200,\n    );\n',
  ),
  fselectsearchstyle(
    'FSelectSearchStyle',
    <String>['select-search', 'selectsearch'],
    <String>[
      'FSelectSearchStyle',
      'FTextFieldStyle',
      'FLabelStyles',
      'FLabelStyle',
      'FButtonStyles',
      'FButtonStyle',
      'FButtonContentStyle',
      'FButtonIconContentStyle',
      'FDividerStyles',
      'FProgressStyles',
      'FLinearProgressStyle',
    ],
    'FSelectSearchStyle selectSearchStyle({\n  required FColors colors,\n  required FTypography typography,\n  required FStyle style,\n}) => FSelectSearchStyle(\n  textFieldStyle:\n      _textFieldStyle(\n        colors: colors,\n        typography: typography,\n        style: style,\n      ).copyWith(\n        border: FWidgetStateMap.all(\n          const OutlineInputBorder(\n            borderSide: BorderSide(color: Colors.transparent),\n          ),\n        ),\n      ),\n  iconStyle: IconThemeData(size: 15, color: colors.mutedForeground),\n  dividerStyle: _dividerStyles(\n    colors: colors,\n    style: style,\n  ).horizontalStyle.copyWith(width: 2, padding: EdgeInsets.zero),\n  loadingIndicatorStyle: _progressStyles(\n    colors: colors,\n    style: style,\n  ).circularIconProgressStyle,\n);\n',
  ),
  fselectsectionstyle(
    'FSelectSectionStyle',
    <String>['select-section', 'selectsection'],
    <String>['FSelectSectionStyle', 'FSelectItemStyle'],
    'FSelectSectionStyle selectSectionStyle({\n  required FColors colors,\n  required FStyle style,\n  required FTypography typography,\n}) => FSelectSectionStyle(\n  enabledLabelTextStyle: typography.sm.copyWith(\n    color: colors.primary,\n    fontWeight: FontWeight.w600,\n  ),\n  disabledLabelTextStyle: typography.sm.copyWith(\n    color: colors.disable(colors.primary),\n    fontWeight: FontWeight.w600,\n  ),\n  itemStyle: _selectItemStyle(\n    colors: colors,\n    style: style,\n    typography: typography,\n  ),\n  labelPadding: const EdgeInsetsDirectional.only(\n    start: 15,\n    top: 7.5,\n    bottom: 7.5,\n    end: 10,\n  ),\n);\n',
  ),
  fselectstyle(
    'FSelectStyle',
    <String>['select'],
    <String>[
      'FSelectStyle',
      'FPopoverStyle',
      'FSelectSearchStyle',
      'FTextFieldStyle',
      'FLabelStyles',
      'FLabelStyle',
      'FButtonStyles',
      'FButtonStyle',
      'FButtonContentStyle',
      'FButtonIconContentStyle',
      'FDividerStyles',
      'FProgressStyles',
      'FLinearProgressStyle',
      'FSelectContentStyle',
      'FSelectSectionStyle',
      'FSelectItemStyle',
      'FSelectScrollHandleStyle',
    ],
    'FSelectStyle selectStyle({\n  required FColors colors,\n  required FTypography typography,\n  required FStyle style,\n}) => FSelectStyle(\n  selectFieldStyle: _textFieldStyle(\n    colors: colors,\n    typography: typography,\n    style: style,\n  ),\n  iconStyle: IconThemeData(color: colors.mutedForeground, size: 18),\n  popoverStyle: _popoverStyle(colors: colors, style: style),\n  searchStyle: _selectSearchStyle(\n    colors: colors,\n    typography: typography,\n    style: style,\n  ),\n  contentStyle: _selectContentStyle(\n    colors: colors,\n    typography: typography,\n    style: style,\n  ),\n  emptyTextStyle: typography.sm,\n);\n',
  ),
  fsheetstyle(
    'FSheetStyle',
    <String>['sheet'],
    <String>['FSheetStyle'],
    'FSheetStyle sheetStyle({required FColors colors}) => FSheetStyle(\n  barrierColor: colors.barrier,\n  backgroundColor: colors.background,\n  enterDuration: const Duration(milliseconds: 200),\n  exitDuration: const Duration(milliseconds: 200),\n  flingVelocity: 700,\n  closeProgressThreshold: 0.5,\n);\n',
  ),
  fsliderstyle(
    'FSliderStyle',
    <String>['slider'],
    <String>['FSliderStyle', 'FTooltipStyle'],
    'FSliderStyle sliderStyle({\n  required FColors colors,\n  required FTypography typography,\n  required FStyle style,\n  required AlignmentGeometry labelAnchor,\n  required double labelOffset,\n  required EdgeInsetsGeometry descriptionPadding,\n  required EdgeInsetsGeometry childPadding,\n  AlignmentGeometry tooltipTipAnchor = Alignment.bottomCenter,\n  AlignmentGeometry tooltipThumbAnchor = Alignment.topCenter,\n}) => FSliderStyle(\n  activeColor: FWidgetStateMap({\n    WidgetState.error: colors.error,\n    WidgetState.disabled: colors.disable(colors.primary, colors.secondary),\n    WidgetState.any: colors.primary,\n  }),\n  inactiveColor: FWidgetStateMap.all(colors.secondary),\n  thumbStyle: FSliderThumbStyle(\n    color: FWidgetStateMap({\n      WidgetState.error: colors.errorForeground,\n      WidgetState.any: colors.primaryForeground,\n    }),\n    borderColor: FWidgetStateMap({\n      WidgetState.error: colors.error,\n      WidgetState.disabled: colors.disable(colors.primary),\n      WidgetState.any: colors.primary,\n    }),\n    focusedOutlineStyle: style.focusedOutlineStyle,\n  ),\n  markStyle: FSliderMarkStyle(\n    tickColor: FWidgetStateMap.all(colors.mutedForeground),\n    labelTextStyle: FWidgetStateMap({\n      WidgetState.error: typography.xs.copyWith(color: colors.error),\n      WidgetState.any: typography.xs.copyWith(color: colors.mutedForeground),\n    }),\n    labelAnchor: labelAnchor,\n    labelOffset: labelOffset,\n  ),\n  tooltipStyle: _tooltipStyle(\n    colors: colors,\n    typography: typography,\n    style: style,\n  ),\n  tooltipTipAnchor: tooltipTipAnchor,\n  tooltipThumbAnchor: tooltipThumbAnchor,\n  labelTextStyle: style.formFieldStyle.labelTextStyle,\n  descriptionTextStyle: style.formFieldStyle.descriptionTextStyle,\n  errorTextStyle: style.formFieldStyle.errorTextStyle,\n  descriptionPadding: descriptionPadding,\n  childPadding: childPadding,\n  borderRadius: const BorderRadius.all(Radius.circular(4)),\n  crossAxisExtent: 8,\n  labelPadding: const EdgeInsets.only(bottom: 5),\n  errorPadding: const EdgeInsets.only(top: 5),\n);\n',
  ),
  fsliderstyles(
    'FSliderStyles',
    <String>['sliders'],
    <String>['FSliderStyles', 'FSliderStyle', 'FTooltipStyle'],
    'FSliderStyles sliderStyles({\n  required FColors colors,\n  required FTypography typography,\n  required FStyle style,\n}) => FSliderStyles(\n  horizontalStyle: _sliderStyle(\n    colors: colors,\n    typography: typography,\n    style: style,\n    labelAnchor: Alignment.topCenter,\n    labelOffset: 10,\n    descriptionPadding: const EdgeInsets.only(top: 10),\n    childPadding: const EdgeInsets.only(\n      top: 10,\n      bottom: 20,\n      left: 10,\n      right: 10,\n    ),\n  ),\n  verticalStyle: _sliderStyle(\n    colors: colors,\n    typography: typography,\n    style: style,\n    labelAnchor: Alignment.centerRight,\n    labelOffset: -10,\n    tooltipTipAnchor: FTouch.primary\n        ? Alignment.bottomCenter\n        : Alignment.centerLeft,\n    tooltipThumbAnchor: FTouch.primary\n        ? Alignment.topCenter\n        : Alignment.centerRight,\n    descriptionPadding: const EdgeInsets.only(top: 5),\n    childPadding: const EdgeInsets.all(10),\n  ),\n);\n',
  ),
  fswitchstyle(
    'FSwitchStyle',
    <String>['switch'],
    <String>['FSwitchStyle', 'FLabelStyles', 'FLabelStyle'],
    'FSwitchStyle switchStyle({required FColors colors, required FStyle style}) {\n  final label = _labelStyles(style: style).horizontalStyle;\n  return FSwitchStyle(\n    focusColor: colors.primary,\n    trackColor: FWidgetStateMap({\n      WidgetState.disabled & WidgetState.selected: colors.disable(\n        colors.primary,\n      ),\n      WidgetState.disabled: colors.disable(colors.border),\n      WidgetState.selected: colors.primary,\n      WidgetState.any: colors.border,\n    }),\n    thumbColor: FWidgetStateMap.all(colors.background),\n    labelTextStyle: style.formFieldStyle.labelTextStyle,\n    descriptionTextStyle: style.formFieldStyle.descriptionTextStyle,\n    errorTextStyle: style.formFieldStyle.errorTextStyle,\n    labelPadding: label.labelPadding,\n    descriptionPadding: label.descriptionPadding,\n    errorPadding: label.errorPadding,\n    childPadding: label.childPadding,\n  );\n}\n',
  ),
  ftabsstyle(
    'FTabsStyle',
    <String>['tabs'],
    <String>['FTabsStyle'],
    'FTabsStyle tabsStyle({\n  required FColors colors,\n  required FTypography typography,\n  required FStyle style,\n}) => FTabsStyle(\n  decoration: BoxDecoration(\n    border: Border.all(color: colors.muted),\n    borderRadius: style.borderRadius,\n    color: colors.muted,\n  ),\n  selectedLabelTextStyle: typography.sm.copyWith(\n    fontWeight: FontWeight.w500,\n    fontFamily: typography.defaultFontFamily,\n    color: colors.foreground,\n  ),\n  unselectedLabelTextStyle: typography.sm.copyWith(\n    fontWeight: FontWeight.w500,\n    fontFamily: typography.defaultFontFamily,\n    color: colors.mutedForeground,\n  ),\n  indicatorDecoration: BoxDecoration(\n    color: colors.background,\n    borderRadius: style.borderRadius,\n  ),\n  focusedOutlineStyle: style.focusedOutlineStyle,\n  padding: const EdgeInsets.all(4),\n  indicatorSize: FTabBarIndicatorSize.tab,\n  height: 35,\n  spacing: 10,\n);\n',
  ),
  ftextfieldstyle(
    'FTextFieldStyle',
    <String>['text-field', 'textfield'],
    <String>[
      'FTextFieldStyle',
      'FLabelStyles',
      'FLabelStyle',
      'FButtonStyles',
      'FButtonStyle',
      'FButtonContentStyle',
      'FButtonIconContentStyle',
    ],
    'FTextFieldStyle textFieldStyle({\n  required FColors colors,\n  required FTypography typography,\n  required FStyle style,\n}) {\n  final label = _labelStyles(style: style).verticalStyle;\n  final ghost = _buttonStyles(\n    colors: colors,\n    typography: typography,\n    style: style,\n  ).ghost;\n  final textStyle = typography.sm.copyWith(\n    fontFamily: typography.defaultFontFamily,\n  );\n  return FTextFieldStyle(\n    keyboardAppearance: colors.brightness,\n    clearButtonStyle: ghost.copyWith(\n      iconContentStyle: ghost.iconContentStyle.copyWith(\n        iconStyle: FWidgetStateMap({\n          WidgetState.disabled: IconThemeData(\n            color: colors.disable(colors.mutedForeground),\n            size: 17,\n          ),\n          WidgetState.any: IconThemeData(\n            color: colors.mutedForeground,\n            size: 17,\n          ),\n        }),\n      ),\n    ),\n    contentTextStyle: FWidgetStateMap({\n      WidgetState.disabled: textStyle.copyWith(\n        color: colors.disable(colors.primary),\n      ),\n      WidgetState.any: textStyle.copyWith(color: colors.primary),\n    }),\n    hintTextStyle: FWidgetStateMap({\n      WidgetState.disabled: textStyle.copyWith(\n        color: colors.disable(colors.border),\n      ),\n      WidgetState.any: textStyle.copyWith(color: colors.mutedForeground),\n    }),\n    counterTextStyle: FWidgetStateMap({\n      WidgetState.disabled: textStyle.copyWith(\n        color: colors.disable(colors.primary),\n      ),\n      WidgetState.any: textStyle.copyWith(color: colors.primary),\n    }),\n    border: FWidgetStateMap({\n      WidgetState.error: OutlineInputBorder(\n        borderSide: BorderSide(color: colors.error, width: style.borderWidth),\n        borderRadius: style.borderRadius,\n      ),\n      WidgetState.disabled: OutlineInputBorder(\n        borderSide: BorderSide(\n          color: colors.disable(colors.border),\n          width: style.borderWidth,\n        ),\n        borderRadius: style.borderRadius,\n      ),\n      WidgetState.focused: OutlineInputBorder(\n        borderSide: BorderSide(color: colors.primary, width: style.borderWidth),\n        borderRadius: style.borderRadius,\n      ),\n      WidgetState.any: OutlineInputBorder(\n        borderSide: BorderSide(color: colors.border, width: style.borderWidth),\n        borderRadius: style.borderRadius,\n      ),\n    }),\n    labelTextStyle: style.formFieldStyle.labelTextStyle,\n    descriptionTextStyle: style.formFieldStyle.descriptionTextStyle,\n    errorTextStyle: style.formFieldStyle.errorTextStyle,\n    labelPadding: label.labelPadding,\n    descriptionPadding: label.descriptionPadding,\n    errorPadding: label.errorPadding,\n    childPadding: label.childPadding,\n    cursorColor: CupertinoColors.activeBlue,\n    filled: false,\n    contentPadding: const EdgeInsets.symmetric(horizontal: 14, vertical: 14),\n    clearButtonPadding: const EdgeInsetsDirectional.only(end: 4),\n    scrollPadding: const EdgeInsets.all(20),\n  );\n}\n',
  ),
  ftilecontentstyle(
    'FTileContentStyle',
    <String>['tile-content', 'tilecontent'],
    <String>['FTileContentStyle'],
    'FTileContentStyle tileContentStyle({\n  required FColors colors,\n  required FTypography typography,\n}) => FTileContentStyle(\n  prefixIconStyle: FWidgetStateMap({\n    WidgetState.disabled: IconThemeData(\n      color: colors.disable(colors.primary),\n      size: 18,\n    ),\n    WidgetState.any: IconThemeData(color: colors.primary, size: 18),\n  }),\n  titleTextStyle: FWidgetStateMap({\n    WidgetState.disabled: typography.base.copyWith(\n      color: colors.disable(colors.primary),\n    ),\n    WidgetState.any: typography.base,\n  }),\n  subtitleTextStyle: FWidgetStateMap({\n    WidgetState.disabled: typography.xs.copyWith(\n      color: colors.disable(colors.mutedForeground),\n    ),\n    WidgetState.any: typography.xs.copyWith(color: colors.mutedForeground),\n  }),\n  detailsTextStyle: FWidgetStateMap({\n    WidgetState.disabled: typography.base.copyWith(\n      color: colors.disable(colors.mutedForeground),\n    ),\n    WidgetState.any: typography.base.copyWith(color: colors.mutedForeground),\n  }),\n  suffixIconStyle: FWidgetStateMap({\n    WidgetState.disabled: IconThemeData(\n      color: colors.disable(colors.mutedForeground),\n      size: 18,\n    ),\n    WidgetState.any: IconThemeData(color: colors.mutedForeground, size: 18),\n  }),\n  padding: const EdgeInsetsDirectional.fromSTEB(15, 13, 10, 13),\n  prefixIconSpacing: 10,\n  titleSpacing: 3,\n  middleSpacing: 4,\n  suffixIconSpacing: 5,\n);\n',
  ),
  ftilegroupstyle(
    'FTileGroupStyle',
    <String>['tile-group', 'tilegroup'],
    <String>['FTileGroupStyle', 'FTileStyle', 'FTileContentStyle'],
    'FTileGroupStyle tileGroupStyle({\n  required FColors colors,\n  required FTypography typography,\n  required FStyle style,\n}) => FTileGroupStyle(\n  borderColor: colors.border,\n  borderWidth: style.borderWidth,\n  borderRadius: style.borderRadius,\n  tileStyle: _tileStyle(colors: colors, typography: typography, style: style),\n  labelTextStyle: FWidgetStateMap({\n    WidgetState.error: typography.base.copyWith(\n      color:\n          style.formFieldStyle.labelTextStyle.maybeResolve({})?.color ??\n          colors.primary,\n      fontWeight: FontWeight.w600,\n    ),\n    WidgetState.disabled: typography.base.copyWith(\n      color:\n          style.formFieldStyle.labelTextStyle.maybeResolve({\n            WidgetState.disabled,\n          })?.color ??\n          colors.disable(colors.primary),\n      fontWeight: FontWeight.w600,\n    ),\n    WidgetState.any: typography.base.copyWith(\n      color:\n          style.formFieldStyle.labelTextStyle.maybeResolve({})?.color ??\n          colors.primary,\n      fontWeight: FontWeight.w600,\n    ),\n  }),\n  descriptionTextStyle: style.formFieldStyle.descriptionTextStyle.map(\n    (s) => typography.xs.copyWith(color: s.color),\n  ),\n  errorTextStyle: typography.xs.copyWith(\n    color: style.formFieldStyle.errorTextStyle.color,\n  ),\n  labelPadding: const EdgeInsets.symmetric(vertical: 7.7),\n  descriptionPadding: const EdgeInsets.only(top: 7.5),\n  errorPadding: const EdgeInsets.only(top: 5),\n  childPadding: EdgeInsets.zero,\n);\n',
  ),
  ftilestyle(
    'FTileStyle',
    <String>['tile'],
    <String>['FTileStyle', 'FTileContentStyle'],
    'FTileStyle tileStyle({\n  required FColors colors,\n  required FTypography typography,\n  required FStyle style,\n}) {\n  final border = FWidgetStateMap({\n    WidgetState.focused: Border.all(\n      width: style.borderWidth,\n      color: colors.primary,\n    ),\n    WidgetState.any: Border.all(width: style.borderWidth, color: colors.border),\n  });\n  final divider = FWidgetStateMap({\n    WidgetState.any: FDividerStyle(\n      color: colors.border,\n      width: style.borderWidth,\n      padding: EdgeInsets.zero,\n    ),\n  });\n  return FTileStyle(\n    pressable: FTileStateStyle(\n      border: border,\n      borderRadius: style.borderRadius,\n      backgroundColor: FWidgetStateMap({\n        WidgetState.disabled: colors.disable(colors.secondary),\n        WidgetState.hovered | WidgetState.pressed: colors.secondary,\n        WidgetState.any: colors.background,\n      }),\n      dividerStyle: divider,\n      contentStyle: _tileContentStyle(colors: colors, typography: typography),\n      tappableStyle: style.tappableStyle.copyWith(\n        animationTween: FTappableAnimations.none,\n        pressedEnterDuration: Duration.zero,\n        pressedExitDuration: const Duration(milliseconds: 25),\n      ),\n    ),\n    unpressable: FTileStateStyle(\n      border: border,\n      borderRadius: style.borderRadius,\n      backgroundColor: FWidgetStateMap({\n        WidgetState.disabled: colors.disable(colors.secondary),\n        WidgetState.any: colors.background,\n      }),\n      dividerStyle: divider,\n      contentStyle: _tileContentStyle(colors: colors, typography: typography),\n      tappableStyle: style.tappableStyle.copyWith(\n        cursor: FWidgetStateMap.all(MouseCursor.defer),\n        animationTween: FTappableAnimations.none,\n        pressedEnterDuration: Duration.zero,\n        pressedExitDuration: const Duration(milliseconds: 25),\n      ),\n    ),\n  );\n}\n',
  ),
  ftimefieldstyle(
    'FTimeFieldStyle',
    <String>['time-field', 'timefield'],
    <String>[
      'FTimeFieldStyle',
      'FTextFieldStyle',
      'FLabelStyles',
      'FLabelStyle',
      'FButtonStyles',
      'FButtonStyle',
      'FButtonContentStyle',
      'FButtonIconContentStyle',
      'FPopoverStyle',
      'FTimePickerStyle',
    ],
    'FTimeFieldStyle timeFieldStyle({\n  required FColors colors,\n  required FTypography typography,\n  required FStyle style,\n}) => FTimeFieldStyle(\n  textFieldStyle: _textFieldStyle(\n    colors: colors,\n    typography: typography,\n    style: style,\n  ),\n  popoverStyle: _popoverStyle(colors: colors, style: style),\n  pickerStyle: _timePickerStyle(\n    colors: colors,\n    typography: typography,\n    style: style,\n  ),\n  iconStyle: IconThemeData(\n    color: colors.mutedForeground,\n    size: 18,\n    weight: 100,\n  ),\n  popoverConstraints: const FPortalConstraints(maxWidth: 200, maxHeight: 200),\n);\n',
  ),
  ftimepickerstyle(
    'FTimePickerStyle',
    <String>['time-picker', 'timepicker'],
    <String>['FTimePickerStyle'],
    'FTimePickerStyle timePickerStyle({\n  required FColors colors,\n  required FStyle style,\n  required FTypography typography,\n}) => FTimePickerStyle(\n  textStyle: typography.base.copyWith(fontWeight: FontWeight.w500),\n  selectionBorderRadius: style.borderRadius,\n  selectionColor: colors.muted,\n  selectionHeightAdjustment: 5,\n  spacing: 2,\n  focusedOutlineStyle: style.focusedOutlineStyle,\n  padding: const EdgeInsetsDirectional.only(start: 10, end: 10),\n  diameterRatio: 1.07,\n  squeeze: 1,\n  magnification: 1,\n  overAndUnderCenterOpacity: 0.25,\n  textHeightBehavior: const TextHeightBehavior(\n    applyHeightToFirstAscent: false,\n    applyHeightToLastDescent: false,\n  ),\n);\n',
  ),
  ftooltipstyle(
    'FTooltipStyle',
    <String>['tooltip'],
    <String>['FTooltipStyle'],
    'FTooltipStyle tooltipStyle({\n  required FColors colors,\n  required FTypography typography,\n  required FStyle style,\n}) => FTooltipStyle(\n  decoration: BoxDecoration(\n    color: colors.background,\n    borderRadius: style.borderRadius,\n    border: Border.all(width: style.borderWidth, color: colors.border),\n    boxShadow: FTooltipStyle.shadow,\n  ),\n  textStyle: typography.sm,\n  margin: const EdgeInsets.all(4),\n  padding: const EdgeInsets.symmetric(horizontal: 14, vertical: 10),\n);\n',
  );

  const Style(this.type, this.aliases, this.closure, this.source);

  /// The type name.
  final String type;

  /// The aliases.
  final List<String> aliases;

  /// The functions, including itself, needed to generate a fully compilable style.
  final List<String> closure;

  /// The function to generate.
  final String source;
}

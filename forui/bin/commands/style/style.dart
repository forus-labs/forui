// // GENERATED CODE - DO NOT MODIFY BY HAND
//
// **************************************************************************
// forui
// **************************************************************************
//
// ignore_for_file: type=lint
// ignore_for_file: deprecated_member_use

/// All styles in Forui. Generated by tool/cli_generator.
enum Style {
  faccordionstyle(
    'FAccordionStyle',
    <String>['FAccordion', 'Accordion'],
    <String>['FAccordionStyle'],
    'FAccordionStyle accordionStyle({\n  required FColors colors,\n  required FTypography typography,\n  required FStyle style,\n}) => FAccordionStyle(\n  titleTextStyle: typography.base.copyWith(\n    fontWeight: FontWeight.w500,\n    color: colors.foreground,\n  ),\n  childTextStyle: typography.sm.copyWith(color: colors.foreground),\n  iconStyle: IconThemeData(color: colors.primary, size: 20),\n  focusedOutlineStyle: style.focusedOutlineStyle,\n  dividerStyle: FDividerStyle(color: colors.border, padding: EdgeInsets.zero),\n  tappableStyle: style.tappableStyle.copyWith(\n    animationTween: FTappableAnimations.none,\n  ),\n);\n',
  ),
  falertstyles(
    'FAlertStyles',
    <String>['FAlert', 'Alert'],
    <String>['FAlertStyles'],
    'FAlertStyles alertStyles({\n  required FColors colors,\n  required FTypography typography,\n  required FStyle style,\n}) => FAlertStyles(\n  primary: FAlertStyle(\n    iconStyle: IconThemeData(color: colors.foreground, size: 20),\n    titleTextStyle: typography.base.copyWith(\n      fontWeight: FontWeight.w500,\n      color: colors.foreground,\n      height: 1.2,\n    ),\n    subtitleTextStyle: typography.sm.copyWith(color: colors.foreground),\n    decoration: BoxDecoration(\n      border: Border.all(color: colors.border),\n      borderRadius: style.borderRadius,\n      color: colors.background,\n    ),\n  ),\n  destructive: FAlertStyle(\n    iconStyle: IconThemeData(color: colors.destructive, size: 20),\n    titleTextStyle: typography.base.copyWith(\n      fontWeight: FontWeight.w500,\n      color: colors.destructive,\n      height: 1.2,\n    ),\n    subtitleTextStyle: typography.sm.copyWith(color: colors.destructive),\n    decoration: BoxDecoration(\n      border: Border.all(color: colors.destructive),\n      borderRadius: style.borderRadius,\n      color: colors.background,\n    ),\n  ),\n);\n',
  ),
  favatarstyle(
    'FAvatarStyle',
    <String>['FAvatar', 'Avatar'],
    <String>['FAvatarStyle'],
    'FAvatarStyle avatarStyle({\n  required FColors colors,\n  required FTypography typography,\n}) => FAvatarStyle(\n  backgroundColor: colors.muted,\n  foregroundColor: colors.mutedForeground,\n  textStyle: typography.base.copyWith(color: colors.mutedForeground, height: 0),\n);\n',
  ),
  fbadgestyles(
    'FBadgeStyles',
    <String>['FBadge', 'Badge'],
    <String>['FBadgeStyles'],
    'FBadgeStyles badgeStyles({\n  required FColors colors,\n  required FTypography typography,\n  required FStyle style,\n}) => FBadgeStyles(\n  primary: FBadgeStyle(\n    decoration: BoxDecoration(\n      color: colors.primary,\n      borderRadius: const BorderRadius.all(Radius.circular(100)),\n    ),\n    contentStyle: FBadgeContentStyle(\n      labelTextStyle: typography.sm.copyWith(\n        color: colors.primaryForeground,\n        fontWeight: FontWeight.w600,\n      ),\n    ),\n  ),\n  secondary: FBadgeStyle(\n    decoration: BoxDecoration(\n      color: colors.secondary,\n      borderRadius: const BorderRadius.all(Radius.circular(100)),\n    ),\n    contentStyle: FBadgeContentStyle(\n      labelTextStyle: typography.sm.copyWith(\n        color: colors.secondaryForeground,\n        fontWeight: FontWeight.w600,\n      ),\n    ),\n  ),\n  outline: FBadgeStyle(\n    decoration: BoxDecoration(\n      border: Border.all(color: colors.border, width: style.borderWidth),\n      borderRadius: const BorderRadius.all(Radius.circular(100)),\n    ),\n    contentStyle: FBadgeContentStyle(\n      labelTextStyle: typography.sm.copyWith(\n        color: colors.foreground,\n        fontWeight: FontWeight.w600,\n      ),\n    ),\n  ),\n  destructive: FBadgeStyle(\n    decoration: BoxDecoration(\n      color: colors.destructive,\n      borderRadius: const BorderRadius.all(Radius.circular(100)),\n    ),\n    contentStyle: FBadgeContentStyle(\n      labelTextStyle: typography.sm.copyWith(\n        color: colors.destructiveForeground,\n        fontWeight: FontWeight.w600,\n      ),\n    ),\n  ),\n);\n',
  ),
  fbottomnavigationbaritemstyle(
    'FBottomNavigationBarItemStyle',
    <String>[],
    <String>['FBottomNavigationBarItemStyle'],
    'FBottomNavigationBarItemStyle bottomNavigationBarItemStyle({\n  required FColors colors,\n  required FTypography typography,\n}) => FBottomNavigationBarItemStyle(\n  selectedIconStyle: IconThemeData(color: colors.primary, size: 24),\n  unselectedIconStyle: IconThemeData(\n    color: colors.disable(colors.foreground),\n    size: 24,\n  ),\n  selectedTextStyle: typography.base.copyWith(\n    color: colors.primary,\n    fontSize: 10,\n  ),\n  unselectedTextStyle: typography.base.copyWith(\n    color: colors.disable(colors.foreground),\n    fontSize: 10,\n  ),\n);\n',
  ),
  fbottomnavigationbarstyle(
    'FBottomNavigationBarStyle',
    <String>['FBottomNavigationBar', 'BottomNavigationBar'],
    <String>['FBottomNavigationBarStyle', 'FBottomNavigationBarItemStyle'],
    'FBottomNavigationBarStyle bottomNavigationBarStyle({\n  required FColors colors,\n  required FTypography typography,\n  required FStyle style,\n}) => FBottomNavigationBarStyle(\n  decoration: BoxDecoration(\n    border: Border(top: BorderSide(color: colors.border)),\n    color: colors.background,\n  ),\n  focusedOutlineStyle: style.focusedOutlineStyle,\n  itemStyle: _bottomNavigationBarItemStyle(\n    colors: colors,\n    typography: typography,\n  ),\n  tappableStyle: style.tappableStyle,\n);\n',
  ),
  fbreadcrumbstyle(
    'FBreadcrumbStyle',
    <String>['FBreadcrumb', 'Breadcrumb'],
    <String>['FBreadcrumbStyle'],
    'FBreadcrumbStyle breadcrumbStyle({\n  required FColors colors,\n  required FTypography typography,\n  required FStyle style,\n}) => FBreadcrumbStyle(\n  selectedTextStyle: typography.sm.copyWith(\n    fontWeight: FontWeight.w400,\n    color: colors.foreground,\n  ),\n  unselectedTextStyle: typography.sm.copyWith(\n    fontWeight: FontWeight.w400,\n    color: colors.mutedForeground,\n  ),\n  hoveredTextStyle: typography.sm.copyWith(\n    fontWeight: FontWeight.w400,\n    color: colors.primary,\n    decoration: TextDecoration.underline,\n  ),\n  iconStyle: IconThemeData(color: colors.mutedForeground, size: 16),\n  tappableStyle: style.tappableStyle,\n);\n',
  ),
  fbuttoncontentstyle(
    'FButtonContentStyle',
    <String>[],
    <String>['FButtonContentStyle'],
    'FButtonContentStyle buttonContentStyle({\n  required FTypography typography,\n  required Color enabled,\n  required Color disabled,\n}) => FButtonContentStyle(\n  enabledTextStyle: typography.base.copyWith(\n    color: enabled,\n    fontWeight: FontWeight.w500,\n    height: 1,\n  ),\n  disabledTextStyle: typography.base.copyWith(\n    color: disabled,\n    fontWeight: FontWeight.w500,\n    height: 1,\n  ),\n  enabledIconStyle: IconThemeData(color: enabled, size: 20),\n  disabledIconStyle: IconThemeData(color: disabled, size: 20),\n);\n',
  ),
  fbuttonstyle(
    'FButtonStyle',
    <String>[],
    <String>['FButtonStyle', 'FButtonContentStyle'],
    'FButtonStyle buttonStyle({\n  required FColors colors,\n  required FTypography typography,\n  required FStyle style,\n  required Color background,\n  required Color foreground,\n}) => FButtonStyle(\n  enabledBoxDecoration: BoxDecoration(\n    borderRadius: style.borderRadius,\n    color: background,\n  ),\n  enabledHoverBoxDecoration: BoxDecoration(\n    borderRadius: style.borderRadius,\n    color: colors.hover(background),\n  ),\n  disabledBoxDecoration: BoxDecoration(\n    borderRadius: style.borderRadius,\n    color: colors.disable(background),\n  ),\n  focusedOutlineStyle: style.focusedOutlineStyle,\n  contentStyle: _buttonContentStyle(\n    typography: typography,\n    enabled: foreground,\n    disabled: colors.disable(foreground, colors.disable(background)),\n  ),\n  iconContentStyle: FButtonIconContentStyle(\n    enabledStyle: IconThemeData(color: foreground, size: 20),\n    disabledStyle: IconThemeData(\n      color: colors.disable(foreground, colors.disable(background)),\n      size: 20,\n    ),\n  ),\n  tappableStyle: style.tappableStyle,\n);\n',
  ),
  fbuttonstyles(
    'FButtonStyles',
    <String>['FButton', 'Button'],
    <String>['FButtonStyles', 'FButtonStyle', 'FButtonContentStyle'],
    'FButtonStyles buttonStyles({\n  required FColors colors,\n  required FTypography typography,\n  required FStyle style,\n}) => FButtonStyles(\n  primary: _buttonStyle(\n    colors: colors,\n    style: style,\n    typography: typography,\n    background: colors.primary,\n    foreground: colors.primaryForeground,\n  ),\n  secondary: _buttonStyle(\n    colors: colors,\n    style: style,\n    typography: typography,\n    background: colors.secondary,\n    foreground: colors.secondaryForeground,\n  ),\n  destructive: _buttonStyle(\n    colors: colors,\n    style: style,\n    typography: typography,\n    background: colors.destructive,\n    foreground: colors.destructiveForeground,\n  ),\n  outline: FButtonStyle(\n    enabledBoxDecoration: BoxDecoration(\n      border: Border.all(color: colors.border),\n      borderRadius: style.borderRadius,\n    ),\n    enabledHoverBoxDecoration: BoxDecoration(\n      border: Border.all(color: colors.border),\n      borderRadius: style.borderRadius,\n      color: colors.secondary,\n    ),\n    disabledBoxDecoration: BoxDecoration(\n      border: Border.all(color: colors.disable(colors.border)),\n      borderRadius: style.borderRadius,\n    ),\n    focusedOutlineStyle: style.focusedOutlineStyle,\n    contentStyle: _buttonContentStyle(\n      typography: typography,\n      enabled: colors.secondaryForeground,\n      disabled: colors.disable(colors.secondaryForeground),\n    ),\n    iconContentStyle: FButtonIconContentStyle(\n      enabledStyle: IconThemeData(color: colors.secondaryForeground, size: 20),\n      disabledStyle: IconThemeData(\n        color: colors.disable(colors.secondaryForeground),\n        size: 20,\n      ),\n    ),\n    tappableStyle: style.tappableStyle,\n  ),\n  ghost: FButtonStyle(\n    enabledBoxDecoration: BoxDecoration(borderRadius: style.borderRadius),\n    enabledHoverBoxDecoration: BoxDecoration(\n      borderRadius: style.borderRadius,\n      color: colors.secondary,\n    ),\n    disabledBoxDecoration: BoxDecoration(borderRadius: style.borderRadius),\n    focusedOutlineStyle: style.focusedOutlineStyle,\n    contentStyle: _buttonContentStyle(\n      typography: typography,\n      enabled: colors.secondaryForeground,\n      disabled: colors.disable(colors.secondaryForeground),\n    ),\n    iconContentStyle: FButtonIconContentStyle(\n      enabledStyle: IconThemeData(color: colors.secondaryForeground, size: 20),\n      disabledStyle: IconThemeData(\n        color: colors.disable(colors.secondaryForeground),\n        size: 20,\n      ),\n    ),\n    tappableStyle: style.tappableStyle,\n  ),\n);\n',
  ),
  fcalendardaypickerstyle(
    'FCalendarDayPickerStyle',
    <String>[],
    <String>['FCalendarDayPickerStyle'],
    'FCalendarDayPickerStyle calendarDayPickerStyle({\n  required FColors colors,\n  required FTypography typography,\n  required FStyle style,\n}) {\n  final textStyle = typography.base.copyWith(\n    color: colors.foreground,\n    fontWeight: FontWeight.w500,\n  );\n  final mutedTextStyle = typography.base.copyWith(\n    color: colors.disable(colors.mutedForeground),\n    fontWeight: FontWeight.w500,\n  );\n  final disabled = FCalendarDayStyle(\n    selectedStyle: FCalendarEntryStyle(\n      backgroundColor: colors.primaryForeground,\n      textStyle: mutedTextStyle,\n      focusedBorderColor: colors.primaryForeground,\n      radius: const Radius.circular(4),\n      tappableStyle: style.tappableStyle.copyWith(\n        animationTween: FTappableAnimations.none,\n      ),\n    ),\n    unselectedStyle: FCalendarEntryStyle(\n      backgroundColor: colors.background,\n      textStyle: mutedTextStyle,\n      focusedBorderColor: colors.background,\n      radius: const Radius.circular(4),\n      tappableStyle: style.tappableStyle.copyWith(\n        animationTween: FTappableAnimations.none,\n      ),\n    ),\n  );\n  return FCalendarDayPickerStyle(\n    headerTextStyle: typography.xs.copyWith(color: colors.mutedForeground),\n    selectableStyles: (\n      current: FCalendarDayStyle(\n        selectedStyle: FCalendarEntryStyle(\n          backgroundColor: colors.foreground,\n          textStyle: typography.base.copyWith(\n            color: colors.background,\n            fontWeight: FontWeight.w500,\n          ),\n          focusedBorderColor: colors.foreground,\n          radius: const Radius.circular(4),\n          tappableStyle: style.tappableStyle.copyWith(\n            animationTween: FTappableAnimations.none,\n          ),\n        ),\n        unselectedStyle: FCalendarEntryStyle(\n          backgroundColor: colors.background,\n          textStyle: textStyle,\n          hoveredBackgroundColor: colors.secondary,\n          focusedBorderColor: colors.foreground,\n          radius: const Radius.circular(4),\n          tappableStyle: style.tappableStyle.copyWith(\n            animationTween: FTappableAnimations.none,\n          ),\n        ),\n      ),\n      enclosing: FCalendarDayStyle(\n        selectedStyle: FCalendarEntryStyle(\n          backgroundColor: colors.primaryForeground,\n          textStyle: mutedTextStyle,\n          focusedBorderColor: colors.foreground,\n          radius: const Radius.circular(4),\n          tappableStyle: style.tappableStyle.copyWith(\n            animationTween: FTappableAnimations.none,\n          ),\n        ),\n        unselectedStyle: FCalendarEntryStyle(\n          backgroundColor: colors.background,\n          textStyle: mutedTextStyle,\n          hoveredBackgroundColor: colors.secondary,\n          focusedBorderColor: colors.foreground,\n          radius: const Radius.circular(4),\n          tappableStyle: style.tappableStyle.copyWith(\n            animationTween: FTappableAnimations.none,\n          ),\n        ),\n      ),\n    ),\n    unselectableStyles: (current: disabled, enclosing: disabled),\n  );\n}\n',
  ),
  fcalendarheaderstyle(
    'FCalendarHeaderStyle',
    <String>[],
    <String>['FCalendarHeaderStyle', 'FButtonStyles', 'FButtonStyle', 'FButtonContentStyle'],
    'FCalendarHeaderStyle calendarHeaderStyle({\n  required FColors colors,\n  required FTypography typography,\n  required FStyle style,\n}) => FCalendarHeaderStyle(\n  focusedOutlineStyle: style.focusedOutlineStyle,\n  buttonStyle: _buttonStyles(\n    colors: colors,\n    typography: typography,\n    style: style,\n  ).outline.transform(\n    (style) => style.copyWith(\n      iconContentStyle: style.iconContentStyle.copyWith(\n        enabledStyle: IconThemeData(color: colors.mutedForeground, size: 17),\n        disabledStyle: IconThemeData(\n          color: colors.disable(colors.mutedForeground),\n          size: 17,\n        ),\n      ),\n    ),\n  ),\n  headerTextStyle: typography.base.copyWith(\n    color: colors.primary,\n    fontWeight: FontWeight.w600,\n  ),\n  tappableStyle: style.tappableStyle.copyWith(\n    animationTween: FTappableAnimations.none,\n  ),\n);\n',
  ),
  fcalendarstyle(
    'FCalendarStyle',
    <String>['FCalendar', 'Calendar'],
    <String>[
      'FCalendarStyle',
      'FCalendarHeaderStyle',
      'FButtonStyles',
      'FButtonStyle',
      'FButtonContentStyle',
      'FCalendarDayPickerStyle',
      'FCalendarYearMonthPickerStyle',
    ],
    'FCalendarStyle calendarStyle({\n  required FColors colors,\n  required FTypography typography,\n  required FStyle style,\n}) => FCalendarStyle(\n  headerStyle: _calendarHeaderStyle(\n    colors: colors,\n    typography: typography,\n    style: style,\n  ),\n  dayPickerStyle: _calendarDayPickerStyle(\n    colors: colors,\n    typography: typography,\n    style: style,\n  ),\n  yearMonthPickerStyle: _calendarYearMonthPickerStyle(\n    colors: colors,\n    typography: typography,\n    style: style,\n  ),\n  decoration: BoxDecoration(\n    borderRadius: style.borderRadius,\n    border: Border.all(color: colors.border),\n    color: colors.background,\n  ),\n);\n',
  ),
  fcalendaryearmonthpickerstyle(
    'FCalendarYearMonthPickerStyle',
    <String>[],
    <String>['FCalendarYearMonthPickerStyle'],
    'FCalendarYearMonthPickerStyle calendarYearMonthPickerStyle({\n  required FColors colors,\n  required FTypography typography,\n  required FStyle style,\n}) => FCalendarYearMonthPickerStyle(\n  enabledStyle: FCalendarEntryStyle(\n    backgroundColor: colors.background,\n    textStyle: typography.base.copyWith(\n      color: colors.foreground,\n      fontWeight: FontWeight.w500,\n    ),\n    hoveredBackgroundColor: colors.secondary,\n    focusedBorderColor: colors.foreground,\n    radius: const Radius.circular(8),\n    tappableStyle: style.tappableStyle.copyWith(\n      animationTween: FTappableAnimations.none,\n    ),\n  ),\n  disabledStyle: FCalendarEntryStyle(\n    backgroundColor: colors.background,\n    textStyle: typography.base.copyWith(\n      color: colors.disable(colors.mutedForeground),\n      fontWeight: FontWeight.w500,\n    ),\n    focusedBorderColor: colors.background,\n    radius: const Radius.circular(8),\n    tappableStyle: style.tappableStyle.copyWith(\n      animationTween: FTappableAnimations.none,\n    ),\n  ),\n);\n',
  ),
  fcardstyle(
    'FCardStyle',
    <String>['FCard', 'Card'],
    <String>['FCardStyle'],
    'FCardStyle cardStyle({\n  required FColors colors,\n  required FTypography typography,\n  required FStyle style,\n}) => FCardStyle(\n  decoration: BoxDecoration(\n    border: Border.all(color: colors.border),\n    borderRadius: style.borderRadius,\n    color: colors.background,\n  ),\n  contentStyle: FCardContentStyle(\n    titleTextStyle: typography.xl2.copyWith(\n      fontWeight: FontWeight.w600,\n      color: colors.foreground,\n      height: 1.5,\n    ),\n    subtitleTextStyle: typography.sm.copyWith(color: colors.mutedForeground),\n  ),\n);\n',
  ),
  fcheckboxselectgroupstyle(
    'FCheckboxSelectGroupStyle',
    <String>[],
    <String>['FCheckboxSelectGroupStyle'],
    'FCheckboxSelectGroupStyle checkboxSelectGroupStyle({\n  required FCheckboxStyle style,\n}) => FCheckboxSelectGroupStyle(\n  labelLayoutStyle: style.labelLayoutStyle,\n  focusedOutlineStyle: style.focusedOutlineStyle,\n  enabledStyle: style.enabledStyle,\n  disabledStyle: style.disabledStyle,\n  errorStyle: style.errorStyle,\n);\n',
  ),
  fcheckboxstyle(
    'FCheckboxStyle',
    <String>['FCheckbox', 'Checkbox'],
    <String>['FCheckboxStyle', 'FLabelStyles', 'FLabelStateStyles'],
    'FCheckboxStyle checkboxStyle({\n  required FColors colors,\n  required FStyle style,\n}) => FCheckboxStyle(\n  labelLayoutStyle: _labelStyles(style: style).horizontalStyle.layout,\n  focusedOutlineStyle: FFocusedOutlineStyle(\n    color: style.focusedOutlineStyle.color,\n    borderRadius: BorderRadius.circular(4),\n  ),\n  enabledStyle: FCheckboxStateStyle(\n    labelTextStyle: style.enabledFormFieldStyle.labelTextStyle,\n    descriptionTextStyle: style.enabledFormFieldStyle.descriptionTextStyle,\n    borderColor: colors.primary,\n    iconStyle: IconThemeData(color: colors.primaryForeground, size: 14),\n    checkedBackgroundColor: colors.primary,\n    uncheckedBackgroundColor: colors.background,\n  ),\n  disabledStyle: FCheckboxStateStyle(\n    labelTextStyle: style.disabledFormFieldStyle.labelTextStyle,\n    descriptionTextStyle: style.disabledFormFieldStyle.descriptionTextStyle,\n    borderColor: colors.disable(colors.primary),\n    iconStyle: IconThemeData(\n      color: colors.disable(colors.primaryForeground),\n      size: 14,\n    ),\n    checkedBackgroundColor: colors.disable(colors.primary),\n    uncheckedBackgroundColor: colors.disable(colors.background),\n  ),\n  errorStyle: FCheckboxErrorStyle(\n    labelTextStyle: style.errorFormFieldStyle.labelTextStyle,\n    descriptionTextStyle: style.errorFormFieldStyle.descriptionTextStyle,\n    errorTextStyle: style.errorFormFieldStyle.errorTextStyle,\n    borderColor: colors.error,\n    iconStyle: IconThemeData(color: colors.errorForeground, size: 14),\n    checkedBackgroundColor: colors.error,\n    uncheckedBackgroundColor: colors.background,\n  ),\n);\n',
  ),
  fdatefieldstyle(
    'FDateFieldStyle',
    <String>['FDateField', 'DateField'],
    <String>[
      'FDateFieldStyle',
      'FTextFieldStyle',
      'FLabelStyles',
      'FLabelStateStyles',
      'FTextFieldStateStyle',
      'FTextFieldBorderStyle',
      'FTextFieldErrorStyle',
      'FPopoverStyle',
      'FCalendarStyle',
      'FCalendarHeaderStyle',
      'FButtonStyles',
      'FButtonStyle',
      'FButtonContentStyle',
      'FCalendarDayPickerStyle',
      'FCalendarYearMonthPickerStyle',
    ],
    'FDateFieldStyle dateFieldStyle({\n  required FColors colors,\n  required FTypography typography,\n  required FStyle style,\n}) => FDateFieldStyle(\n  textFieldStyle: _textFieldStyle(\n    colors: colors,\n    typography: typography,\n    style: style,\n  ),\n  popoverStyle: _popoverStyle(colors: colors, style: style),\n  calendarStyle: _calendarStyle(\n    colors: colors,\n    typography: typography,\n    style: style,\n  ),\n  iconStyle: IconThemeData(color: colors.mutedForeground, size: 18),\n);\n',
  ),
  fdialogstyle(
    'FDialogStyle',
    <String>['FDialog', 'Dialog'],
    <String>['FDialogStyle'],
    'FDialogStyle dialogStyle({\n  required FStyle style,\n  required FColors colors,\n  required FTypography typography,\n}) {\n  final title = typography.lg.copyWith(\n    fontWeight: FontWeight.w600,\n    color: colors.foreground,\n  );\n  final body = typography.sm.copyWith(color: colors.mutedForeground);\n  return FDialogStyle(\n    decoration: BoxDecoration(\n      borderRadius: style.borderRadius,\n      color: colors.background,\n    ),\n    horizontalStyle: FDialogContentStyle(\n      titleTextStyle: title,\n      bodyTextStyle: body,\n      padding: const EdgeInsets.symmetric(horizontal: 25, vertical: 25),\n      actionSpacing: 7,\n    ),\n    verticalStyle: FDialogContentStyle(\n      titleTextStyle: title,\n      bodyTextStyle: body,\n      padding: const EdgeInsets.symmetric(horizontal: 30, vertical: 25),\n      actionSpacing: 8,\n    ),\n  );\n}\n',
  ),
  fdividerstyles(
    'FDividerStyles',
    <String>['FDivider', 'Divider'],
    <String>['FDividerStyles'],
    'FDividerStyles dividerStyles({\n  required FColors colors,\n  required FStyle style,\n}) => FDividerStyles(\n  horizontalStyle: FDividerStyle(\n    color: colors.secondary,\n    padding: FDividerStyle.defaultPadding.horizontalStyle,\n    width: style.borderWidth,\n  ),\n  verticalStyle: FDividerStyle(\n    color: colors.secondary,\n    padding: FDividerStyle.defaultPadding.verticalStyle,\n    width: style.borderWidth,\n  ),\n);\n',
  ),
  fformfielderrorstyle(
    'FFormFieldErrorStyle',
    <String>['FFormFieldError', 'FormFieldError'],
    <String>['FFormFieldErrorStyle'],
    'FFormFieldErrorStyle formFieldErrorStyle({\n  required Color errorColor,\n  required Color labelColor,\n  required Color descriptionColor,\n  required FTypography typography,\n}) => FFormFieldErrorStyle.inherit(\n  errorColor: errorColor,\n  labelColor: labelColor,\n  descriptionColor: descriptionColor,\n  typography: typography,\n);\n',
  ),
  fformfieldstyle(
    'FFormFieldStyle',
    <String>['FFormField', 'FormField'],
    <String>['FFormFieldStyle'],
    'FFormFieldStyle formFieldStyle({\n  required Color labelColor,\n  required Color descriptionColor,\n  required FTypography typography,\n}) => FFormFieldStyle(\n  labelTextStyle: typography.sm.copyWith(\n    color: labelColor,\n    fontWeight: FontWeight.w600,\n  ),\n  descriptionTextStyle: typography.sm.copyWith(color: descriptionColor),\n);\n',
  ),
  fheaderactionstyle(
    'FHeaderActionStyle',
    <String>[],
    <String>['FHeaderActionStyle'],
    'FHeaderActionStyle headerActionStyle({\n  required FColors colors,\n  required FStyle style,\n  required double size,\n}) => FHeaderActionStyle(\n  enabledStyle: IconThemeData(color: colors.foreground, size: size),\n  disabledStyle: IconThemeData(\n    color: colors.disable(colors.foreground),\n    size: size,\n  ),\n  focusedOutlineStyle: style.focusedOutlineStyle,\n  tappableStyle: style.tappableStyle,\n);\n',
  ),
  fheaderstyles(
    'FHeaderStyles',
    <String>['FHeader', 'Header'],
    <String>['FHeaderStyles', 'FHeaderActionStyle'],
    'FHeaderStyles headerStyles({\n  required FColors colors,\n  required FTypography typography,\n  required FStyle style,\n}) => FHeaderStyles(\n  rootStyle: FHeaderStyle(\n    titleTextStyle: typography.xl3.copyWith(\n      color: colors.foreground,\n      fontWeight: FontWeight.w700,\n      height: 1,\n    ),\n    actionStyle: _headerActionStyle(colors: colors, style: style, size: 30),\n    padding: style.pagePadding.copyWith(bottom: 15),\n  ),\n  nestedStyle: FHeaderStyle(\n    titleTextStyle: typography.xl.copyWith(\n      color: colors.foreground,\n      fontWeight: FontWeight.w600,\n      height: 1,\n    ),\n    actionStyle: _headerActionStyle(colors: colors, style: style, size: 25),\n    padding: style.pagePadding.copyWith(bottom: 15),\n  ),\n);\n',
  ),
  flabelstatestyles(
    'FLabelStateStyles',
    <String>[],
    <String>['FLabelStateStyles'],
    'FLabelStateStyles labelStateStyles({required FStyle style}) =>\n    FLabelStateStyles(\n      enabledStyle: style.enabledFormFieldStyle,\n      disabledStyle: style.disabledFormFieldStyle,\n      errorStyle: style.errorFormFieldStyle,\n    );\n',
  ),
  flabelstyles(
    'FLabelStyles',
    <String>['FLabel', 'Label'],
    <String>['FLabelStyles', 'FLabelStateStyles'],
    'FLabelStyles labelStyles({required FStyle style}) => FLabelStyles(\n  horizontalStyle: (\n    layout: const FLabelLayoutStyle(\n      childPadding: EdgeInsets.symmetric(horizontal: 8),\n      descriptionPadding: EdgeInsets.only(top: 2),\n      errorPadding: EdgeInsets.only(top: 2),\n    ),\n    state: _labelStateStyles(style: style),\n  ),\n  verticalStyle: (\n    layout: const FLabelLayoutStyle(\n      labelPadding: EdgeInsets.only(bottom: 5),\n      descriptionPadding: EdgeInsets.only(top: 5),\n      errorPadding: EdgeInsets.only(top: 5),\n    ),\n    state: _labelStateStyles(style: style),\n  ),\n);\n',
  ),
  flinecalendarstyle(
    'FLineCalendarStyle',
    <String>['FLineCalendar', 'LineCalendar'],
    <String>['FLineCalendarStyle'],
    'FLineCalendarStyle lineCalendarStyle({\n  required FColors colors,\n  required FTypography typography,\n  required FStyle style,\n}) {\n  final focused = BoxDecoration(\n    border: Border.all(color: colors.primary, width: style.borderWidth),\n    borderRadius: style.borderRadius,\n  );\n  final selectedDate = typography.xl.copyWith(\n    color: colors.primaryForeground,\n    fontWeight: FontWeight.w500,\n    height: 0,\n  );\n  final selectedWeekday = typography.xs.copyWith(\n    color: colors.primaryForeground,\n    fontWeight: FontWeight.w500,\n    height: 0,\n  );\n  final date = typography.xl.copyWith(\n    color: colors.primary,\n    fontWeight: FontWeight.w500,\n    height: 0,\n  );\n  final weekday = typography.xs.copyWith(\n    color: colors.mutedForeground,\n    fontWeight: FontWeight.w500,\n    height: 0,\n  );\n  return FLineCalendarStyle(\n    selectedItemStyle: FLineCalendarItemStyle(\n      decoration: BoxDecoration(\n        color: colors.primary,\n        borderRadius: style.borderRadius,\n      ),\n      focusedDecoration: focused.copyWith(color: colors.primary),\n      todayIndicatorColor: colors.primaryForeground,\n      dateTextStyle: selectedDate,\n      weekdayTextStyle: selectedWeekday,\n    ),\n    selectedHoveredItemStyle: FLineCalendarItemStyle(\n      decoration: BoxDecoration(\n        color: colors.hover(colors.primary),\n        borderRadius: style.borderRadius,\n      ),\n      focusedDecoration: focused.copyWith(color: colors.hover(colors.primary)),\n      todayIndicatorColor: colors.hover(colors.primaryForeground),\n      dateTextStyle: selectedDate,\n      weekdayTextStyle: selectedWeekday,\n    ),\n    unselectedItemStyle: FLineCalendarItemStyle(\n      decoration: BoxDecoration(\n        color: colors.background,\n        border: Border.all(color: colors.border),\n        borderRadius: style.borderRadius,\n      ),\n      focusedDecoration: focused.copyWith(color: colors.background),\n      todayIndicatorColor: colors.primary,\n      dateTextStyle: date,\n      weekdayTextStyle: weekday,\n    ),\n    unselectedHoveredItemStyle: FLineCalendarItemStyle(\n      decoration: BoxDecoration(\n        color: colors.secondary,\n        border: Border.all(color: colors.border),\n        borderRadius: style.borderRadius,\n      ),\n      focusedDecoration: focused.copyWith(color: colors.secondary),\n      todayIndicatorColor: colors.hover(colors.primary),\n      dateTextStyle: date,\n      weekdayTextStyle: weekday,\n    ),\n    tappableStyle: style.tappableStyle,\n  );\n}\n',
  ),
  flinearprogressstyle(
    'FLinearProgressStyle',
    <String>[],
    <String>['FLinearProgressStyle'],
    'FLinearProgressStyle linearProgressStyle({\n  required FColors colors,\n  required FStyle style,\n}) => FLinearProgressStyle(\n  backgroundDecoration: BoxDecoration(\n    borderRadius: style.borderRadius,\n    color: colors.secondary,\n  ),\n  progressDecoration: BoxDecoration(\n    borderRadius: style.borderRadius,\n    color: colors.primary,\n  ),\n);\n',
  ),
  fpaginationstyle(
    'FPaginationStyle',
    <String>['FPagination', 'Pagination'],
    <String>['FPaginationStyle'],
    'FPaginationStyle paginationStyle({\n  required FColors colors,\n  required FTypography typography,\n  required FStyle style,\n}) => FPaginationStyle(\n  selected: FPaginationStateStyle(\n    decoration: BoxDecoration(\n      borderRadius: style.borderRadius,\n      color: colors.primary,\n    ),\n    hoveredDecoration: BoxDecoration(\n      borderRadius: style.borderRadius,\n      color: colors.hover(colors.primary),\n    ),\n    textStyle: typography.sm.copyWith(color: colors.primaryForeground),\n  ),\n  unselected: FPaginationStateStyle(\n    decoration: BoxDecoration(\n      borderRadius: style.borderRadius,\n      color: colors.background,\n    ),\n    hoveredDecoration: BoxDecoration(\n      borderRadius: style.borderRadius,\n      color: colors.border,\n    ),\n    textStyle: typography.sm.copyWith(color: colors.primary),\n  ),\n  iconStyle: IconThemeData(color: colors.primary, size: 18),\n  actionTappableStyle: style.tappableStyle,\n  pageTappableStyle: style.tappableStyle,\n);\n',
  ),
  fpickerstyle(
    'FPickerStyle',
    <String>['FPicker', 'Picker'],
    <String>['FPickerStyle'],
    'FPickerStyle pickerStyle({\n  required FColors colors,\n  required FStyle style,\n  required FTypography typography,\n}) => FPickerStyle(\n  textStyle: typography.base.copyWith(fontWeight: FontWeight.w500),\n  selectionBorderRadius: style.borderRadius,\n  selectionColor: colors.muted,\n  focusedOutlineStyle: style.focusedOutlineStyle,\n);\n',
  ),
  fpopovermenustyle(
    'FPopoverMenuStyle',
    <String>['FPopoverMenu', 'PopoverMenu'],
    <String>['FPopoverMenuStyle', 'FTileGroupStyle', 'FTileStyle', 'FTileContentStyle'],
    'FPopoverMenuStyle popoverMenuStyle({\n  required FColors colors,\n  required FStyle style,\n  required FTypography typography,\n}) => FPopoverMenuStyle.inherit(\n  colors: colors,\n  style: style,\n  typography: typography,\n);\n',
  ),
  fpopoverstyle(
    'FPopoverStyle',
    <String>['FPopover', 'Popover'],
    <String>['FPopoverStyle'],
    'FPopoverStyle popoverStyle({required FColors colors, required FStyle style}) =>\n    FPopoverStyle(\n      decoration: BoxDecoration(\n        color: colors.background,\n        borderRadius: style.borderRadius,\n        border: Border.all(width: style.borderWidth, color: colors.border),\n        boxShadow: style.shadow,\n      ),\n    );\n',
  ),
  fprogressstyles(
    'FProgressStyles',
    <String>['FProgress', 'Progress'],
    <String>['FProgressStyles', 'FLinearProgressStyle'],
    'FProgressStyles progressStyles({\n  required FColors colors,\n  required FStyle style,\n}) => FProgressStyles(\n  linearProgressStyle: _linearProgressStyle(colors: colors, style: style),\n  circularIconProgressStyle: IconThemeData(\n    color: colors.mutedForeground,\n    size: 20,\n  ),\n);\n',
  ),
  fradioselectgroupstyle(
    'FRadioSelectGroupStyle',
    <String>[],
    <String>['FRadioSelectGroupStyle'],
    'FRadioSelectGroupStyle radioSelectGroupStyle({required FRadioStyle style}) =>\n    FRadioSelectGroupStyle(\n      animationDuration: style.animationDuration,\n      curve: style.curve,\n      labelLayoutStyle: style.labelLayoutStyle,\n      focusedOutlineStyle: style.focusedOutlineStyle,\n      enabledStyle: style.enabledStyle,\n      disabledStyle: style.disabledStyle,\n      errorStyle: style.errorStyle,\n    );\n',
  ),
  fradiostyle(
    'FRadioStyle',
    <String>['FRadio', 'Radio'],
    <String>['FRadioStyle', 'FLabelStyles', 'FLabelStateStyles'],
    'FRadioStyle radioStyle({required FColors colors, required FStyle style}) =>\n    FRadioStyle(\n      labelLayoutStyle: _labelStyles(style: style).horizontalStyle.layout,\n      focusedOutlineStyle: FFocusedOutlineStyle(\n        color: colors.primary,\n        borderRadius: BorderRadius.circular(100),\n      ),\n      enabledStyle: FRadioStateStyle(\n        labelTextStyle: style.enabledFormFieldStyle.labelTextStyle,\n        descriptionTextStyle: style.enabledFormFieldStyle.descriptionTextStyle,\n        borderColor: colors.primary,\n        selectedColor: colors.primary,\n        backgroundColor: colors.background,\n      ),\n      disabledStyle: FRadioStateStyle(\n        labelTextStyle: style.disabledFormFieldStyle.labelTextStyle,\n        descriptionTextStyle: style.disabledFormFieldStyle.descriptionTextStyle,\n        borderColor: colors.disable(colors.primary),\n        selectedColor: colors.disable(colors.primary),\n        backgroundColor: colors.background,\n      ),\n      errorStyle: FRadioErrorStyle(\n        labelTextStyle: style.errorFormFieldStyle.labelTextStyle,\n        descriptionTextStyle: style.errorFormFieldStyle.descriptionTextStyle,\n        errorTextStyle: style.errorFormFieldStyle.errorTextStyle,\n        borderColor: colors.error,\n        selectedColor: colors.error,\n        backgroundColor: colors.background,\n      ),\n    );\n',
  ),
  fresizablestyle(
    'FResizableStyle',
    <String>['FResizable', 'Resizable'],
    <String>['FResizableStyle'],
    'FResizableStyle resizableStyle({\n  required FColors colors,\n  required FStyle style,\n}) => FResizableStyle(\n  horizontalDividerStyle: FResizableDividerStyle(\n    color: colors.border,\n    focusedOutlineStyle: style.focusedOutlineStyle,\n    thumbStyle: FResizableDividerThumbStyle(\n      decoration: BoxDecoration(\n        color: colors.border,\n        borderRadius: style.borderRadius,\n      ),\n      foregroundColor: colors.foreground,\n      height: 20,\n      width: 10,\n    ),\n  ),\n  verticalDividerStyle: FResizableDividerStyle(\n    color: colors.border,\n    focusedOutlineStyle: style.focusedOutlineStyle,\n    thumbStyle: FResizableDividerThumbStyle(\n      decoration: BoxDecoration(\n        color: colors.border,\n        borderRadius: style.borderRadius,\n      ),\n      foregroundColor: colors.foreground,\n      height: 10,\n      width: 20,\n    ),\n  ),\n);\n',
  ),
  fscaffoldstyle(
    'FScaffoldStyle',
    <String>['FScaffold', 'Scaffold'],
    <String>['FScaffoldStyle'],
    'FScaffoldStyle scaffoldStyle({\n  required FColors colors,\n  required FStyle style,\n}) => FScaffoldStyle(\n  backgroundColor: colors.background,\n  childPadding: style.pagePadding.copyWith(top: 0, bottom: 0),\n  footerDecoration: BoxDecoration(\n    border: Border(\n      top: BorderSide(color: colors.border, width: style.borderWidth),\n    ),\n  ),\n);\n',
  ),
  fselectcontentstyle(
    'FSelectContentStyle',
    <String>[],
    <String>['FSelectContentStyle', 'FSelectSectionStyle', 'FSelectItemStyle', 'FSelectScrollHandleStyle'],
    'FSelectContentStyle selectContentStyle({\n  required FColors colors,\n  required FStyle style,\n  required FTypography typography,\n}) => FSelectContentStyle(\n  sectionStyle: _selectSectionStyle(\n    colors: colors,\n    style: style,\n    typography: typography,\n  ),\n  scrollHandleStyle: _selectScrollHandleStyle(colors: colors),\n);\n',
  ),
  fselectgroupstyle(
    'FSelectGroupStyle',
    <String>['FSelectGroup', 'SelectGroup'],
    <String>[
      'FSelectGroupStyle',
      'FCheckboxSelectGroupStyle',
      'FCheckboxStyle',
      'FRadioSelectGroupStyle',
      'FRadioStyle',
      'FLabelStyles',
      'FLabelStateStyles',
    ],
    'FSelectGroupStyle selectGroupStyle({\n  required FColors colors,\n  required FTypography typography,\n  required FStyle style,\n}) => FSelectGroupStyle(\n  labelLayoutStyle: _labelStyles(style: style).verticalStyle.layout,\n  enabledStyle: FSelectGroupStateStyle(\n    labelTextStyle: style.enabledFormFieldStyle.labelTextStyle,\n    descriptionTextStyle: style.enabledFormFieldStyle.descriptionTextStyle,\n  ),\n  disabledStyle: FSelectGroupStateStyle(\n    labelTextStyle: style.disabledFormFieldStyle.labelTextStyle,\n    descriptionTextStyle: style.disabledFormFieldStyle.descriptionTextStyle,\n  ),\n  errorStyle: FSelectGroupErrorStyle(\n    labelTextStyle: style.errorFormFieldStyle.labelTextStyle,\n    descriptionTextStyle: style.errorFormFieldStyle.descriptionTextStyle,\n    errorTextStyle: style.errorFormFieldStyle.errorTextStyle,\n  ),\n  checkboxStyle: _checkboxSelectGroupStyle(\n    style: _checkboxStyle(colors: colors, style: style).transform(\n      (style) => style.copyWith(\n        enabledStyle: style.enabledStyle.copyWith(\n          labelTextStyle: typography.sm.copyWith(\n            color: colors.primary,\n            fontWeight: FontWeight.w500,\n          ),\n          descriptionTextStyle: typography.sm.copyWith(\n            color: colors.mutedForeground,\n          ),\n        ),\n        disabledStyle: style.disabledStyle.copyWith(\n          labelTextStyle: typography.sm.copyWith(\n            color: colors.disable(colors.primary),\n            fontWeight: FontWeight.w500,\n          ),\n          descriptionTextStyle: typography.sm.copyWith(\n            color: colors.disable(colors.mutedForeground),\n          ),\n        ),\n        errorStyle: style.errorStyle.copyWith(\n          labelTextStyle: typography.sm.copyWith(\n            color: colors.primary,\n            fontWeight: FontWeight.w500,\n          ),\n          descriptionTextStyle: typography.sm.copyWith(\n            color: colors.mutedForeground,\n          ),\n          errorTextStyle: typography.sm.copyWith(\n            color: colors.error,\n            fontWeight: FontWeight.w500,\n          ),\n        ),\n      ),\n    ),\n  ),\n  radioStyle: _radioSelectGroupStyle(\n    style: _radioStyle(colors: colors, style: style).transform(\n      (style) => style.copyWith(\n        enabledStyle: style.enabledStyle.copyWith(\n          labelTextStyle: typography.sm.copyWith(\n            color: colors.primary,\n            fontWeight: FontWeight.w500,\n          ),\n          descriptionTextStyle: typography.sm.copyWith(\n            color: colors.mutedForeground,\n          ),\n        ),\n        disabledStyle: style.disabledStyle.copyWith(\n          labelTextStyle: typography.sm.copyWith(\n            color: colors.disable(colors.primary),\n            fontWeight: FontWeight.w500,\n          ),\n          descriptionTextStyle: typography.sm.copyWith(\n            color: colors.disable(colors.mutedForeground),\n          ),\n        ),\n        errorStyle: style.errorStyle.copyWith(\n          labelTextStyle: typography.sm.copyWith(\n            color: colors.primary,\n            fontWeight: FontWeight.w500,\n          ),\n          descriptionTextStyle: typography.sm.copyWith(\n            color: colors.mutedForeground,\n          ),\n          errorTextStyle: typography.sm.copyWith(\n            color: colors.error,\n            fontWeight: FontWeight.w500,\n          ),\n        ),\n      ),\n    ),\n  ),\n);\n',
  ),
  fselectitemstyle(
    'FSelectItemStyle',
    <String>[],
    <String>['FSelectItemStyle'],
    'FSelectItemStyle selectItemStyle({\n  required FColors colors,\n  required FStyle style,\n  required FTypography typography,\n}) => FSelectItemStyle(\n  enabledHoveredDecoration: BoxDecoration(\n    color: colors.secondary,\n    borderRadius: style.borderRadius,\n  ),\n  enabledTextStyle: typography.sm.copyWith(color: colors.primary),\n  disabledTextStyle: typography.sm.copyWith(\n    color: colors.disable(colors.primary),\n  ),\n  enabledIconStyle: IconThemeData(color: colors.primary, size: 15),\n  disabledIconStyle: IconThemeData(\n    color: colors.disable(colors.primary),\n    size: 15,\n  ),\n  tappableStyle: FTappableStyle(animationTween: FTappableAnimations.none),\n);\n',
  ),
  fselectmenutilestyle(
    'FSelectMenuTileStyle',
    <String>['FSelectMenuTile', 'SelectMenuTile'],
    <String>['FSelectMenuTileStyle', 'FPopoverMenuStyle', 'FTileGroupStyle', 'FTileStyle', 'FTileContentStyle'],
    'FSelectMenuTileStyle selectMenuTileStyle({\n  required FColors colors,\n  required FTypography typography,\n  required FStyle style,\n}) {\n  final groupStyle = _tileGroupStyle(\n    colors: colors,\n    style: style,\n    typography: typography,\n  );\n  return FSelectMenuTileStyle(\n    labelLayoutStyle: groupStyle.labelLayoutStyle,\n    menuStyle: _popoverMenuStyle(\n      colors: colors,\n      style: style,\n      typography: typography,\n    ),\n    tileStyle: groupStyle.tileStyle,\n    enabledStyle: groupStyle.enabledStyle,\n    disabledStyle: groupStyle.disabledStyle,\n    errorStyle: groupStyle.errorStyle,\n  );\n}\n',
  ),
  fselectscrollhandlestyle(
    'FSelectScrollHandleStyle',
    <String>[],
    <String>['FSelectScrollHandleStyle'],
    'FSelectScrollHandleStyle selectScrollHandleStyle({required FColors colors}) =>\n    FSelectScrollHandleStyle(\n      iconStyle: IconThemeData(color: colors.primary, size: 17),\n      background: colors.background,\n    );\n',
  ),
  fselectsearchstyle(
    'FSelectSearchStyle',
    <String>[],
    <String>[
      'FSelectSearchStyle',
      'FTextFieldStyle',
      'FLabelStyles',
      'FLabelStateStyles',
      'FButtonStyles',
      'FButtonStyle',
      'FButtonContentStyle',
      'FTextFieldStateStyle',
      'FTextFieldBorderStyle',
      'FTextFieldErrorStyle',
      'FDividerStyles',
      'FProgressStyles',
      'FLinearProgressStyle',
    ],
    'FSelectSearchStyle selectSearchStyle({\n  required FColors colors,\n  required FTypography typography,\n  required FStyle style,\n}) => FSelectSearchStyle(\n  textFieldStyle: _textFieldStyle(\n    colors: colors,\n    typography: typography,\n    style: style,\n  ).transform(\n    (style) => style.copyWith(\n      enabledStyle: style.enabledStyle.copyWith(\n        focusedStyle: style.enabledStyle.focusedStyle.copyWith(\n          color: Colors.transparent,\n          width: 0,\n        ),\n        unfocusedStyle: style.enabledStyle.unfocusedStyle.copyWith(\n          color: Colors.transparent,\n          width: 0,\n        ),\n      ),\n    ),\n  ),\n  iconStyle: IconThemeData(size: 15, color: colors.mutedForeground),\n  dividerStyle: _dividerStyles(\n    colors: colors,\n    style: style,\n  ).horizontalStyle.copyWith(width: 2, padding: EdgeInsets.zero),\n  loadingIndicatorStyle:\n      _progressStyles(colors: colors, style: style).circularIconProgressStyle,\n);\n',
  ),
  fselectsectionstyle(
    'FSelectSectionStyle',
    <String>[],
    <String>['FSelectSectionStyle', 'FSelectItemStyle'],
    'FSelectSectionStyle selectSectionStyle({\n  required FColors colors,\n  required FStyle style,\n  required FTypography typography,\n}) => FSelectSectionStyle(\n  enabledLabelTextStyle: typography.sm.copyWith(\n    color: colors.primary,\n    fontWeight: FontWeight.w600,\n  ),\n  disabledLabelTextStyle: typography.sm.copyWith(\n    color: colors.disable(colors.primary),\n    fontWeight: FontWeight.w600,\n  ),\n  itemStyle: _selectItemStyle(\n    colors: colors,\n    style: style,\n    typography: typography,\n  ),\n);\n',
  ),
  fselectstyle(
    'FSelectStyle',
    <String>['FSelect', 'Select'],
    <String>[
      'FSelectStyle',
      'FPopoverStyle',
      'FSelectSearchStyle',
      'FTextFieldStyle',
      'FLabelStyles',
      'FLabelStateStyles',
      'FButtonStyles',
      'FButtonStyle',
      'FButtonContentStyle',
      'FTextFieldStateStyle',
      'FTextFieldBorderStyle',
      'FTextFieldErrorStyle',
      'FDividerStyles',
      'FProgressStyles',
      'FLinearProgressStyle',
      'FSelectContentStyle',
      'FSelectSectionStyle',
      'FSelectItemStyle',
      'FSelectScrollHandleStyle',
    ],
    'FSelectStyle selectStyle({\n  required FColors colors,\n  required FTypography typography,\n  required FStyle style,\n}) => FSelectStyle(\n  selectFieldStyle: _textFieldStyle(\n    colors: colors,\n    typography: typography,\n    style: style,\n  ),\n  iconStyle: IconThemeData(color: colors.mutedForeground, size: 18),\n  popoverStyle: _popoverStyle(colors: colors, style: style),\n  searchStyle: _selectSearchStyle(\n    colors: colors,\n    typography: typography,\n    style: style,\n  ),\n  contentStyle: _selectContentStyle(\n    colors: colors,\n    typography: typography,\n    style: style,\n  ),\n  emptyTextStyle: typography.sm,\n);\n',
  ),
  fsheetstyle(
    'FSheetStyle',
    <String>['FSheet', 'Sheet'],
    <String>['FSheetStyle'],
    'FSheetStyle sheetStyle({required FColors colors}) => FSheetStyle(\n  barrierColor: colors.barrier,\n  backgroundColor: colors.background,\n);\n',
  ),
  fsliderstyles(
    'FSliderStyles',
    <String>['FSlider', 'Slider'],
    <String>['FSliderStyles', 'FTooltipStyle'],
    'FSliderStyles sliderStyles({\n  required FColors colors,\n  required FTypography typography,\n  required FStyle style,\n}) {\n  final enabledHorizontalStyle = FSliderStateStyle(\n    labelTextStyle: style.enabledFormFieldStyle.labelTextStyle,\n    descriptionTextStyle: style.enabledFormFieldStyle.descriptionTextStyle,\n    activeColor: colors.primary,\n    inactiveColor: colors.secondary,\n    markStyle: FSliderMarkStyle(\n      tickColor: colors.mutedForeground,\n      labelTextStyle: typography.xs.copyWith(color: colors.mutedForeground),\n      labelAnchor: Alignment.topCenter,\n      labelOffset: 10,\n    ),\n    tooltipStyle: _tooltipStyle(\n      colors: colors,\n      typography: typography,\n      style: style,\n    ),\n    thumbStyle: FSliderThumbStyle(\n      color: colors.primaryForeground,\n      borderColor: colors.primary,\n      focusedOutlineStyle: style.focusedOutlineStyle,\n    ),\n  );\n  final disabledHorizontalStyle = FSliderStateStyle(\n    labelTextStyle: style.disabledFormFieldStyle.labelTextStyle,\n    descriptionTextStyle: style.disabledFormFieldStyle.descriptionTextStyle,\n    activeColor: colors.disable(colors.primary, colors.secondary),\n    inactiveColor: colors.secondary,\n    markStyle: FSliderMarkStyle(\n      tickColor: colors.mutedForeground,\n      labelTextStyle: typography.xs.copyWith(color: colors.mutedForeground),\n      labelAnchor: Alignment.topCenter,\n      labelOffset: 10,\n    ),\n    tooltipStyle: _tooltipStyle(\n      colors: colors,\n      typography: typography,\n      style: style,\n    ),\n    thumbStyle: FSliderThumbStyle(\n      color: colors.primaryForeground,\n      borderColor: colors.disable(colors.primary),\n      focusedOutlineStyle: style.focusedOutlineStyle,\n    ),\n  );\n  final errorHorizontalStyle = FSliderErrorStyle(\n    labelTextStyle: style.errorFormFieldStyle.labelTextStyle,\n    descriptionTextStyle: style.errorFormFieldStyle.descriptionTextStyle,\n    errorTextStyle: style.errorFormFieldStyle.errorTextStyle,\n    activeColor: colors.error,\n    inactiveColor: colors.secondary,\n    markStyle: FSliderMarkStyle(\n      tickColor: colors.mutedForeground,\n      labelTextStyle: typography.xs.copyWith(color: colors.error),\n      labelAnchor: Alignment.topCenter,\n      labelOffset: 10,\n    ),\n    tooltipStyle: _tooltipStyle(\n      colors: colors,\n      typography: typography,\n      style: style,\n    ),\n    thumbStyle: FSliderThumbStyle(\n      color: colors.errorForeground,\n      borderColor: colors.error,\n      focusedOutlineStyle: style.focusedOutlineStyle,\n    ),\n  );\n  return FSliderStyles(\n    horizontalStyle: FSliderStyle(\n      labelLayoutStyle: const FLabelLayoutStyle(\n        labelPadding: EdgeInsets.only(bottom: 5),\n        childPadding: EdgeInsets.only(top: 10, bottom: 20, left: 10, right: 10),\n        descriptionPadding: EdgeInsets.only(top: 10),\n        errorPadding: EdgeInsets.only(top: 5),\n      ),\n      enabledStyle: enabledHorizontalStyle,\n      disabledStyle: disabledHorizontalStyle,\n      errorStyle: errorHorizontalStyle,\n    ),\n    verticalStyle: FSliderStyle(\n      labelLayoutStyle: const FLabelLayoutStyle(\n        labelPadding: EdgeInsets.only(bottom: 5),\n        childPadding: EdgeInsets.all(10),\n        descriptionPadding: EdgeInsets.only(top: 5),\n        errorPadding: EdgeInsets.only(top: 5),\n      ),\n      enabledStyle: enabledHorizontalStyle.transform(\n        (style) => style.copyWith(\n          markStyle: style.markStyle.copyWith(\n            labelAnchor: Alignment.centerRight,\n            labelOffset: -10,\n          ),\n        ),\n      ),\n      disabledStyle: disabledHorizontalStyle.transform(\n        (style) => style.copyWith(\n          markStyle: style.markStyle.copyWith(\n            labelAnchor: Alignment.centerRight,\n            labelOffset: -10,\n          ),\n        ),\n      ),\n      errorStyle: errorHorizontalStyle.transform(\n        (style) => style.copyWith(\n          markStyle: style.markStyle.copyWith(\n            labelAnchor: Alignment.centerRight,\n            labelOffset: -10,\n          ),\n        ),\n      ),\n      tooltipTipAnchor:\n          FTouch.primary ? Alignment.bottomCenter : Alignment.centerLeft,\n      tooltipThumbAnchor:\n          FTouch.primary ? Alignment.topCenter : Alignment.centerRight,\n    ),\n  );\n}\n',
  ),
  fswitchstyle(
    'FSwitchStyle',
    <String>['FSwitch', 'Switch'],
    <String>['FSwitchStyle', 'FLabelStyles', 'FLabelStateStyles'],
    'FSwitchStyle switchStyle({required FColors colors, required FStyle style}) =>\n    FSwitchStyle(\n      focusColor: colors.primary,\n      labelLayoutStyle: _labelStyles(style: style).horizontalStyle.layout,\n      enabledStyle: FSwitchStateStyle(\n        checkedColor: colors.primary,\n        uncheckedColor: colors.border,\n        thumbColor: colors.background,\n        labelTextStyle: style.enabledFormFieldStyle.labelTextStyle,\n        descriptionTextStyle: style.enabledFormFieldStyle.descriptionTextStyle,\n      ),\n      disabledStyle: FSwitchStateStyle(\n        checkedColor: colors.disable(colors.primary),\n        uncheckedColor: colors.disable(colors.border),\n        thumbColor: colors.background,\n        labelTextStyle: style.disabledFormFieldStyle.labelTextStyle,\n        descriptionTextStyle: style.disabledFormFieldStyle.descriptionTextStyle,\n      ),\n      errorStyle: FSwitchErrorStyle(\n        labelTextStyle: style.errorFormFieldStyle.labelTextStyle,\n        descriptionTextStyle: style.errorFormFieldStyle.descriptionTextStyle,\n        errorTextStyle: style.errorFormFieldStyle.errorTextStyle,\n      ),\n    );\n',
  ),
  ftabsstyle(
    'FTabsStyle',
    <String>['FTabs', 'Tabs'],
    <String>['FTabsStyle'],
    'FTabsStyle tabsStyle({\n  required FColors colors,\n  required FTypography typography,\n  required FStyle style,\n}) => FTabsStyle(\n  decoration: BoxDecoration(\n    border: Border.all(color: colors.muted),\n    borderRadius: style.borderRadius,\n    color: colors.muted,\n  ),\n  selectedLabelTextStyle: typography.sm.copyWith(\n    fontWeight: FontWeight.w500,\n    fontFamily: typography.defaultFontFamily,\n    color: colors.foreground,\n  ),\n  unselectedLabelTextStyle: typography.sm.copyWith(\n    fontWeight: FontWeight.w500,\n    fontFamily: typography.defaultFontFamily,\n    color: colors.mutedForeground,\n  ),\n  indicatorDecoration: BoxDecoration(\n    color: colors.background,\n    borderRadius: style.borderRadius,\n  ),\n  focusedOutlineStyle: style.focusedOutlineStyle,\n);\n',
  ),
  ftextfieldborderstyle(
    'FTextFieldBorderStyle',
    <String>[],
    <String>['FTextFieldBorderStyle'],
    'FTextFieldBorderStyle textFieldBorderStyle({\n  required Color color,\n  required FStyle style,\n}) => FTextFieldBorderStyle(\n  color: color,\n  width: style.borderWidth,\n  radius: style.borderRadius,\n);\n',
  ),
  ftextfielderrorstyle(
    'FTextFieldErrorStyle',
    <String>[],
    <String>['FTextFieldErrorStyle'],
    'FTextFieldErrorStyle textFieldErrorStyle({\n  required FFormFieldErrorStyle formFieldErrorStyle,\n  required Color contentColor,\n  required Color hintColor,\n  required Color focusedBorderColor,\n  required Color unfocusedBorderColor,\n  required FTypography typography,\n  required FStyle style,\n}) => FTextFieldErrorStyle.inherit(\n  formFieldErrorStyle: formFieldErrorStyle,\n  contentColor: contentColor,\n  hintColor: hintColor,\n  focusedBorderColor: focusedBorderColor,\n  unfocusedBorderColor: unfocusedBorderColor,\n  typography: typography,\n  style: style,\n);\n',
  ),
  ftextfieldstatestyle(
    'FTextFieldStateStyle',
    <String>[],
    <String>['FTextFieldStateStyle', 'FTextFieldBorderStyle'],
    'FTextFieldStateStyle textFieldStateStyle({\n  required Color contentColor,\n  required Color hintColor,\n  required Color focusedBorderColor,\n  required Color unfocusedBorderColor,\n  required FFormFieldStyle formFieldStyle,\n  required FTypography typography,\n  required FStyle style,\n}) => FTextFieldStateStyle(\n  labelTextStyle: formFieldStyle.labelTextStyle,\n  contentTextStyle: typography.sm.copyWith(\n    fontFamily: typography.defaultFontFamily,\n    color: contentColor,\n  ),\n  hintTextStyle: typography.sm.copyWith(\n    fontFamily: typography.defaultFontFamily,\n    color: hintColor,\n  ),\n  counterTextStyle: typography.sm.copyWith(\n    fontFamily: typography.defaultFontFamily,\n    color: contentColor,\n  ),\n  descriptionTextStyle: formFieldStyle.descriptionTextStyle,\n  focusedStyle: _textFieldBorderStyle(color: focusedBorderColor, style: style),\n  unfocusedStyle: _textFieldBorderStyle(\n    color: unfocusedBorderColor,\n    style: style,\n  ),\n);\n',
  ),
  ftextfieldstyle(
    'FTextFieldStyle',
    <String>['FTextField', 'TextField'],
    <String>[
      'FTextFieldStyle',
      'FLabelStyles',
      'FLabelStateStyles',
      'FButtonStyles',
      'FButtonStyle',
      'FButtonContentStyle',
      'FTextFieldStateStyle',
      'FTextFieldBorderStyle',
      'FTextFieldErrorStyle',
    ],
    'FTextFieldStyle textFieldStyle({\n  required FColors colors,\n  required FTypography typography,\n  required FStyle style,\n}) => FTextFieldStyle(\n  keyboardAppearance: colors.brightness,\n  labelLayoutStyle: _labelStyles(style: style).verticalStyle.layout,\n  clearButtonStyle: _buttonStyles(\n    colors: colors,\n    typography: typography,\n    style: style,\n  ).ghost.transform(\n    (ghost) => ghost.copyWith(\n      iconContentStyle: ghost.iconContentStyle.copyWith(\n        enabledStyle: IconThemeData(color: colors.mutedForeground, size: 17),\n      ),\n    ),\n  ),\n  enabledStyle: _textFieldStateStyle(\n    contentColor: colors.primary,\n    hintColor: colors.mutedForeground,\n    focusedBorderColor: colors.primary,\n    unfocusedBorderColor: colors.border,\n    formFieldStyle: style.enabledFormFieldStyle,\n    typography: typography,\n    style: style,\n  ),\n  disabledStyle: _textFieldStateStyle(\n    contentColor: colors.disable(colors.primary),\n    hintColor: colors.disable(colors.border),\n    focusedBorderColor: colors.disable(colors.border),\n    unfocusedBorderColor: colors.disable(colors.border),\n    formFieldStyle: style.disabledFormFieldStyle,\n    typography: typography,\n    style: style,\n  ),\n  errorStyle: _textFieldErrorStyle(\n    contentColor: colors.primary,\n    hintColor: colors.mutedForeground,\n    focusedBorderColor: colors.error,\n    unfocusedBorderColor: colors.error,\n    formFieldErrorStyle: style.errorFormFieldStyle,\n    typography: typography,\n    style: style,\n  ),\n);\n',
  ),
  ftilecontentstyle(
    'FTileContentStyle',
    <String>[],
    <String>['FTileContentStyle'],
    'FTileContentStyle tileContentStyle({\n  required FColors colors,\n  required FTypography typography,\n}) => FTileContentStyle(\n  enabledStyle: FTileContentStateStyle(\n    prefixIconStyle: IconThemeData(color: colors.primary, size: 18),\n    titleTextStyle: typography.base,\n    subtitleTextStyle: typography.xs.copyWith(color: colors.mutedForeground),\n    detailsTextStyle: typography.base.copyWith(color: colors.mutedForeground),\n    suffixIconStyle: IconThemeData(color: colors.mutedForeground, size: 18),\n  ),\n  enabledHoveredStyle: FTileContentStateStyle(\n    prefixIconStyle: IconThemeData(color: colors.primary, size: 18),\n    titleTextStyle: typography.base,\n    subtitleTextStyle: typography.xs.copyWith(color: colors.mutedForeground),\n    detailsTextStyle: typography.base.copyWith(color: colors.mutedForeground),\n    suffixIconStyle: IconThemeData(color: colors.mutedForeground, size: 18),\n  ),\n  disabledStyle: FTileContentStateStyle(\n    prefixIconStyle: IconThemeData(\n      color: colors.disable(colors.primary),\n      size: 18,\n    ),\n    titleTextStyle: typography.base.copyWith(\n      color: colors.disable(colors.primary),\n    ),\n    subtitleTextStyle: typography.xs.copyWith(\n      color: colors.disable(colors.mutedForeground),\n    ),\n    detailsTextStyle: typography.base.copyWith(\n      color: colors.disable(colors.mutedForeground),\n    ),\n    suffixIconStyle: IconThemeData(\n      color: colors.disable(colors.mutedForeground),\n      size: 18,\n    ),\n  ),\n);\n',
  ),
  ftilegroupstyle(
    'FTileGroupStyle',
    <String>['FTileGroup', 'TileGroup'],
    <String>['FTileGroupStyle', 'FTileStyle', 'FTileContentStyle'],
    'FTileGroupStyle tileGroupStyle({\n  required FColors colors,\n  required FTypography typography,\n  required FStyle style,\n}) => FTileGroupStyle(\n  borderColor: colors.border,\n  borderWidth: style.borderWidth,\n  borderRadius: style.borderRadius,\n  tileStyle: _tileStyle(colors: colors, typography: typography, style: style),\n  enabledStyle: FFormFieldStyle(\n    labelTextStyle: typography.base.copyWith(\n      color: style.enabledFormFieldStyle.labelTextStyle.color,\n      fontWeight: FontWeight.w600,\n    ),\n    descriptionTextStyle: typography.xs.copyWith(\n      color: style.enabledFormFieldStyle.descriptionTextStyle.color,\n    ),\n  ),\n  disabledStyle: FFormFieldStyle(\n    labelTextStyle: typography.base.copyWith(\n      color: style.disabledFormFieldStyle.labelTextStyle.color,\n      fontWeight: FontWeight.w600,\n    ),\n    descriptionTextStyle: typography.xs.copyWith(\n      color: style.disabledFormFieldStyle.descriptionTextStyle.color,\n    ),\n  ),\n  errorStyle: FFormFieldErrorStyle(\n    labelTextStyle: typography.base.copyWith(\n      color: style.enabledFormFieldStyle.labelTextStyle.color,\n      fontWeight: FontWeight.w600,\n    ),\n    descriptionTextStyle: typography.xs.copyWith(\n      color: style.errorFormFieldStyle.descriptionTextStyle.color,\n    ),\n    errorTextStyle: typography.xs.copyWith(\n      color: style.errorFormFieldStyle.errorTextStyle.color,\n    ),\n  ),\n);\n',
  ),
  ftilestyle(
    'FTileStyle',
    <String>[],
    <String>['FTileStyle', 'FTileContentStyle'],
    'FTileStyle tileStyle({\n  required FColors colors,\n  required FTypography typography,\n  required FStyle style,\n}) => FTileStyle(\n  border: Border.all(width: style.borderWidth, color: colors.border),\n  focusedBorder: Border.all(width: style.borderWidth, color: colors.primary),\n  borderRadius: style.borderRadius,\n  enabledBackgroundColor: colors.background,\n  enabledHoveredBackgroundColor: colors.secondary,\n  disabledBackgroundColor: colors.disable(colors.secondary),\n  dividerStyle: FDividerStyle(\n    color: colors.border,\n    width: style.borderWidth,\n    padding: EdgeInsets.zero,\n  ),\n  focusedDividerStyle: FDividerStyle(\n    color: colors.primary,\n    width: style.borderWidth,\n    padding: EdgeInsets.zero,\n  ),\n  tappableStyle: style.tappableStyle.copyWith(\n    touchHoverEnterDuration: Duration.zero,\n    touchHoverExitDuration: const Duration(milliseconds: 25),\n  ),\n  contentStyle: _tileContentStyle(colors: colors, typography: typography),\n);\n',
  ),
  ftimefieldstyle(
    'FTimeFieldStyle',
    <String>['FTimeField', 'TimeField'],
    <String>[
      'FTimeFieldStyle',
      'FTextFieldStyle',
      'FLabelStyles',
      'FLabelStateStyles',
      'FButtonStyles',
      'FButtonStyle',
      'FButtonContentStyle',
      'FTextFieldStateStyle',
      'FTextFieldBorderStyle',
      'FTextFieldErrorStyle',
      'FPopoverStyle',
      'FTimePickerStyle',
    ],
    'FTimeFieldStyle timeFieldStyle({\n  required FColors colors,\n  required FTypography typography,\n  required FStyle style,\n}) => FTimeFieldStyle(\n  textFieldStyle: _textFieldStyle(\n    colors: colors,\n    typography: typography,\n    style: style,\n  ),\n  popoverStyle: _popoverStyle(colors: colors, style: style),\n  pickerStyle: _timePickerStyle(\n    colors: colors,\n    typography: typography,\n    style: style,\n  ),\n  iconStyle: IconThemeData(color: colors.mutedForeground, size: 18),\n);\n',
  ),
  ftimepickerstyle(
    'FTimePickerStyle',
    <String>['FTimePicker', 'TimePicker'],
    <String>['FTimePickerStyle'],
    'FTimePickerStyle timePickerStyle({\n  required FColors colors,\n  required FStyle style,\n  required FTypography typography,\n}) => FTimePickerStyle(\n  textStyle: typography.base.copyWith(fontWeight: FontWeight.w500),\n  selectionBorderRadius: style.borderRadius,\n  selectionColor: colors.muted,\n  selectionHeightAdjustment: 5,\n  spacing: 2,\n  focusedOutlineStyle: style.focusedOutlineStyle,\n  padding: const EdgeInsetsDirectional.only(start: 10, end: 10),\n);\n',
  ),
  ftooltipstyle(
    'FTooltipStyle',
    <String>['FTooltip', 'Tooltip'],
    <String>['FTooltipStyle'],
    'FTooltipStyle tooltipStyle({\n  required FColors colors,\n  required FTypography typography,\n  required FStyle style,\n}) => FTooltipStyle(\n  decoration: BoxDecoration(\n    color: colors.background,\n    borderRadius: style.borderRadius,\n    border: Border.all(width: style.borderWidth, color: colors.border),\n    boxShadow: FTooltipStyle.shadow,\n  ),\n  textStyle: typography.sm,\n);\n',
  );

  const Style(this.type, this.aliases, this.closure, this.source);

  /// The type name.
  final String type;

  /// The aliases.
  final List<String> aliases;

  /// The functions, including itself, needed to generate a fully compilable style.
  final List<String> closure;

  /// The function to generate.
  final String source;
}

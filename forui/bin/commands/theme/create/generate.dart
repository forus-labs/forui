import 'dart:io';

import 'package:dart_style/dart_style.dart';
import 'package:sugar/sugar.dart';

import '../../../args/command.dart';
import '../../../configuration.dart';
import '../command.dart';
import 'command.dart';

const header = '''
import 'package:forui/forui.dart';
import 'package:flutter/material.dart';

/// Generated by Forui CLI.
///
/// Modify the generated function bodies to create your own custom style.
/// Then, call the modified function and pass it to [FTheme].
///
/// You can also generate styles to be used in the generated [FThemeData] using:
/// ```shell
/// dart forui style create [styles]
/// ```
/// 
/// See https://forui.dev/docs/cli for more information.''';

final _formatter = DartFormatter(languageVersion: DartFormatter.latestLanguageVersion);

extension GenerateColors on ThemeCreateCommand {
  void generateThemes(String argument, {required bool input, required bool force, required String output}) {
    final theme = registry[argument]!;
    final fileName = theme.toSnakeCase();
    final path =
        '${root.path}${Platform.pathSeparator}${output.endsWith('.dart') ? output : '$output${Platform.pathSeparator}$fileName.dart'}';

    if (!force && File(path).existsSync()) {
      _prompt(path, input: input);
    }

    _generate(path, theme);

    stdout.writeln('See https://forui.dev/docs/themes#customize-themes for how to use the generated themes.');
  }

  void _prompt(String existing, {required bool input}) {
    if (!input) {
      stdout.writeln('Theme file already exists. Skipping... ');
      exit(0);
    }

    while (true) {
      stdout.writeln('${emoji ? '⚠️' : '[Warning]'} $existing already exists. Overwrite it? [Y/n]');

      switch (stdin.readLineSync()) {
        case 'y' || 'Y' || '':
          return;
        case 'n' || 'N':
          exit(0);
        default:
          stdout.writeln('Invalid option. Please enter enter either "y" or "n".');
      }
    }
  }

  void _generate(String path, String theme) {
    stdout
      ..writeln('${emoji ? '⏳' : '[Waiting]'} Creating themes...')
      ..writeln();

    final buffer =
        StringBuffer('$header\n')
          ..writeln(theme)
          ..writeln();

    File(path)
      ..createSync(recursive: true)
      ..writeAsStringSync(_formatter.format(buffer.toString()));

    stdout.writeln('${emoji ? '✅' : '[Done]'} $path');
  }
}

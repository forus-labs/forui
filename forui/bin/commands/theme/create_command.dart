import 'dart:io';

import 'package:sugar/sugar.dart';

import '../../args/command.dart';
import '../../args/utils.dart';
import '../../configuration.dart';
import 'command.dart';

final separator = RegExp('_|-');

const header = '''
import 'package:forui/forui.dart';
import 'package:flutter/material.dart';

// ignore_for_file: avoid_redundant_argument_values

/// Generated by Forui CLI.
///
/// Modify the generated function bodies to create your own custom style.
/// Then, call the modified function and pass it to [FTheme].
///
/// You can also generate styles to be used in the generated [FThemeData] using:
/// ```shell
/// dart forui style create [styles]
/// ```
/// 
/// See https://forui.dev/docs/themes#customize-themes for more information.''';

class ThemeCreateCommand extends ForuiCommand {
  @override
  final name = 'create';

  @override
  final aliases = ['c'];

  @override
  final description = 'Creates a Forui theme file.';

  @override
  final arguments = '[theme]';

  final Configuration configuration;

  ThemeCreateCommand(this.configuration) {
    argParser
      ..addFlag(
        'force',
        abbr: 'f',
        help: 'Overwrite existing files if they exist.',
        negatable: false,
      )
      ..addOption(
        'output',
        abbr: 'o',
        help:
            'The output directory or file, relative to the project directory.',
        defaultsTo: configuration.theme,
      );
  }

  @override
  void run() {
    final input = !globalResults!.flag('no-input');
    final force = argResults!.flag('force');
    final output = argResults!['output'] as String;
    final arguments = argResults!.rest;

    if (arguments.length != 1) {
      printUsage();
      return;
    }

    if (!_validate(arguments.single)) {
      exit(1);
    }

    _generate(arguments.single, input: input, force: force, output: output);
  }

  bool _validate(String theme) {
    if (registry.containsKey(theme)) {
      return true;
    }

    final suggestions =
        registry.keys
            .map((e) => (e, e.startsWith(theme) ? 1 : distance(theme, e)))
            .where((e) => e.$2 <= 3)
            .toList()
          ..sort((a, b) => a.$2.compareTo(b.$2));

    stdout.writeln('Could not find a theme named "$theme".');

    if (suggestions.isNotEmpty) {
      stdout
        ..writeln()
        ..writeln('Did you mean one of these?');

      for (final (suggestion, _) in suggestions) {
        stdout.writeln('  $suggestion');
      }
    }

    stdout
      ..writeln()
      ..writeln('Run "dart run forui theme ls" to see all themes.');

    return false;
  }

  void _generate(
    String argument, {
    required bool input,
    required bool force,
    required String output,
  }) {
    final theme = registry[argument]!;
    final fileName = theme.toSnakeCase();
    final path =
        '${configuration.root.path}${Platform.pathSeparator}${output.endsWith('.dart') ? output : '$output${Platform.pathSeparator}$fileName.dart'}';

    if (!force && File(path).existsSync()) {
      _prompt(path, input: input);
    }

    stdout
      ..writeln('${emoji ? '⏳' : '[Waiting]'} Creating themes...')
      ..writeln();

    final buffer =
        StringBuffer('$header\n')
          ..writeln(theme)
          ..writeln();

    File(path)
      ..createSync(recursive: true)
      ..writeAsStringSync(formatter.format(buffer.toString()));

    stdout
      ..writeln('${emoji ? '✅' : '[Done]'} $path')
      ..writeln()
      ..writeln(
        'See https://forui.dev/docs/themes#customize-themes for how to use the generated theme.',
      );
  }

  void _prompt(String existing, {required bool input}) {
    if (!input) {
      stdout.writeln('Theme file already exists. Skipping... ');
      exit(0);
    }

    while (true) {
      stdout.write(
        '${emoji ? '⚠️' : '[Warning]'} $existing already exists. Overwrite it? [Y/n] ',
      );

      switch (stdin.readLineSync()) {
        case 'y' || 'Y' || '':
          return;
        case 'n' || 'N':
          exit(0);
        default:
          stdout.writeln(
            'Invalid option. Please enter enter either "y" or "n".',
          );
      }
    }
  }
}

import 'dart:io';

import 'package:analyzer/dart/analysis/analysis_context_collection.dart';
import 'package:analyzer/dart/analysis/results.dart';
import 'package:analyzer/dart/ast/ast.dart';
import 'package:analyzer/dart/ast/visitor.dart';
import 'package:code_builder/code_builder.dart';
import 'package:path/path.dart' as p;
import 'package:sugar/sugar.dart';

import 'main.dart';

const _materialThemeMapping = 'material-mapping';

String generateSnippets(Map<String, String> mapped) {
  final sources = [
    for (final MapEntry(:key, value: source) in [...mapped.entries])
      "'$key': r'''$source'''",
  ];

  final library =
      LibraryBuilder()
        ..comments.addAll([header])
        ..body.addAll([
          (FieldBuilder()
                ..docs.addAll([
                  '/// All snippets. Generated by tool/cli_generator.',
                ])
                ..name = 'snippets'
                ..modifier = FieldModifier.constant
                ..assignment = Code('{\n  ${sources.join(',\n  ')}\n}'))
              .build(),
        ]);

  return formatter.format(library.build().accept(emitter).toString());
}

Map<String, String> mapSnippets(Map<String, String> matches) => {...matches}
  ..[_materialThemeMapping] = _mapMaterialThemeMapping(
    matches[_materialThemeMapping]!,
  );

String _mapMaterialThemeMapping(String method) => formatter.format('''
import 'package:flutter/material.dart';
import 'package:forui/forui.dart';

extension CustomMaterialTheme on FThemeData {
  // Modify this method to customize how FThemeData is mapped to Material ThemeData.
  // 
  // To use this method:
  // ```dart
  // final theme = FTheme.zinc.light;
  //
  // MaterialApp(
  //   theme: theme.toCustomMaterialTheme(),
  // );
  // ```
  ${method.replaceAll('toApproximateMaterialTheme', 'toCustomMaterialTheme').replaceAll('@experimental', '')}
}
''');

/// Traverses the library and finds all targets to convert into snippets.
Future<Map<String, String>> traverseSnippets(
  AnalysisContextCollection collection,
) async {
  final directory = p.join(
    Directory.current.parent.path,
    'forui',
    'tool',
    'cli_generator',
    'snippets',
  );
  final staticSnippets = {
    for (final file
        in Directory(directory).listSync(recursive: true).whereType<File>())
      p.basenameWithoutExtension(file.path).toSnakeCase():
          file.readAsStringSync(),
  };

  final files =
      Directory(library)
          .listSync(recursive: true)
          .whereType<File>()
          .where((f) => f.path.endsWith('.dart'))
          .map((f) => f.path)
          .toList();

  final visitor = _Visitor();
  for (final file in files) {
    if (await collection.contextFor(file).currentSession.getResolvedUnit(file)
        case final ResolvedUnitResult result) {
      result.unit.accept(visitor);
    }
  }

  return {...staticSnippets, ...visitor.snippets};
}

class _Visitor extends RecursiveAstVisitor<void> {
  final Map<String, String> snippets = {};

  @override
  void visitClassDeclaration(ClassDeclaration declaration) {
    final name = declaration.name.lexeme;
    if (name == 'FThemeData') {
      super.visitClassDeclaration(declaration);
    }
  }

  @override
  void visitMethodDeclaration(MethodDeclaration declaration) {
    if (declaration.name.lexeme == 'toApproximateMaterialTheme') {
      snippets[_materialThemeMapping] = declaration.toSource();
    }
  }
}

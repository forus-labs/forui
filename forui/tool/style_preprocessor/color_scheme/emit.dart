import 'package:analyzer/dart/analysis/analysis_context_collection.dart';
import 'package:analyzer/dart/analysis/results.dart';
import 'package:analyzer/dart/ast/ast.dart';
import 'package:analyzer/dart/ast/visitor.dart';
import 'package:code_builder/code_builder.dart';
import 'package:path/path.dart' as path;
import 'package:sugar/sugar.dart';

import '../main.dart';

String emitColors(List<({String name, String literal})> fragments) {
  final registry =
      LibraryBuilder()
        ..comments.addAll([header])
        ..body.addAll([
          (EnumBuilder()
                ..docs.addAll([
                  '/// The registry for all color schemes in Forui. This was generated by tool/style_preprocessor.',
                ])
                ..name = 'ColorSchemeRegistry'
                ..values.addAll([
                  for (final (:name, :literal) in fragments)
                    (EnumValueBuilder()
                          ..name = name.toLowerCase().replaceAll('-', '')
                          ..arguments.addAll([literalString(name), literalString(literal)]))
                        .build(),
                ])
                ..fields.addAll([
                  (FieldBuilder()
                        ..docs.addAll(['/// The name.'])
                        ..name = 'name'
                        ..type = refer('String')
                        ..modifier = FieldModifier.final$)
                      .build(),
                  (FieldBuilder()
                        ..docs.addAll(['/// The code to generate.'])
                        ..name = 'source'
                        ..type = refer('String')
                        ..modifier = FieldModifier.final$)
                      .build(),
                ])
                ..constructors.add(
                  (ConstructorBuilder()
                        ..constant = true
                        ..requiredParameters.addAll([
                          Parameter((p) => p..name = 'this.name'),
                          Parameter((p) => p..name = 'this.source'),
                        ]))
                      .build(),
                ))
              .build(),
        ]);

  return formatter.format(registry.build().accept(emitter).toString());
}

List<({String name, String literal})> mapColors(Map<String, List<(String, String)>> colors) {
  final processed = [
    for (final MapEntry(key: name, value: invocations) in colors.entries)
      (
        name: name,
        literal: formatter.format(
          invocations.map((i) => 'const ${i.$1.toCamelCase()} = ${i.$2.replaceAll('const', '')};').join('\n\n'),
        ),
      ),
  ]..sort((a, b) => a.name.compareTo(b.name));

  return processed;
}

/// Traverses the library and finds all styles that have an inherit constructor.
Future<Map<String, List<(String, String)>>> traverseColors(AnalysisContextCollection collection) async {
  final themes = path.join(library, 'src', 'theme', 'themes.dart');
  if (await collection.contextFor(themes).currentSession.getResolvedUnit(themes) case final ResolvedUnitResult result) {
    final visitor = _Visitor();
    result.unit.accept(visitor);

    return visitor.colors;
  }

  throw Exception('Failed to parse $themes');
}

class _Visitor extends RecursiveAstVisitor<void> {
  final Map<String, List<(String, String)>> colors = {};

  @override
  void visitFieldDeclaration(FieldDeclaration field) {
    if (!field.isStatic) {
      return;
    }

    for (final variable in field.fields.variables) {
      final theme = variable.name.lexeme;

      if (variable.initializer case final RecordLiteral record) {
        for (final field in record.fields.whereType<NamedExpression>()) {
          final variant = field.name.label.name;

          if (field.expression case final InstanceCreationExpression creation) {
            for (final expression in creation.argumentList.arguments.whereType<NamedExpression>()) {
              if (expression.staticType?.element?.name == 'FColorScheme') {
                if (expression.expression case final InstanceCreationExpression creation) {
                  (colors[theme] ??= []).add(('$theme-$variant', creation.toSource()));
                  (colors['$theme-$variant'] ??= []).add(('$theme-$variant', creation.toSource()));
                }
              }
            }
          }
        }
      }
    }
  }
}

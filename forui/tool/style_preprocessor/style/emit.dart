import 'package:code_builder/code_builder.dart';

import '../main.dart';
import 'map.dart';

String emitStyles(Map<String, Fragment> fragments) {
  final registry =
      LibraryBuilder()
        ..comments.addAll([header])
        ..body.addAll([
          (EnumBuilder()
                ..docs.addAll([
                  '/// All styles in Forui. Generated by tool/style_preprocessor.',
                ])
                ..name = 'Style'
                ..values.addAll([
                  for (final MapEntry(:key, value: fragment) in fragments.entries)
                    (EnumValueBuilder()
                          ..name = key.toLowerCase()
                          ..arguments.addAll([
                            literalString(key),
                            literalNum(fragment.position),
                            literalString(fragment.source),
                            literalList(fragment.closure, refer('String')),
                          ]))
                        .build(),
                ])
                ..fields.addAll([
                  (FieldBuilder()
                        ..docs.addAll(['/// The type name.'])
                        ..name = 'type'
                        ..type = refer('String')
                        ..modifier = FieldModifier.final$)
                      .build(),
                  (FieldBuilder()
                        ..docs.addAll([
                          '/// The position, inclusive, in the source to add an _, to make the function private.',
                        ])
                        ..name = 'position'
                        ..type = refer('int')
                        ..modifier = FieldModifier.final$)
                      .build(),
                  (FieldBuilder()
                        ..docs.addAll(['/// The function to generate.'])
                        ..name = 'source'
                        ..type = refer('String')
                        ..modifier = FieldModifier.final$)
                      .build(),
                  (FieldBuilder()
                        ..docs.addAll([
                          '/// The functions, including itself, needed to generate a fully compilable style.',
                        ])
                        ..name = 'closure'
                        ..type = refer('List<String>')
                        ..modifier = FieldModifier.final$)
                      .build(),
                ])
                ..constructors.add(
                  (ConstructorBuilder()
                        ..constant = true
                        ..requiredParameters.addAll([
                          Parameter((p) => p..name = 'this.type'),
                          Parameter((p) => p..name = 'this.position'),
                          Parameter((p) => p..name = 'this.source'),
                          Parameter((p) => p..name = 'this.closure'),
                        ]))
                      .build(),
                ))
              .build(),
        ]);

  return formatter.format(registry.build().accept(emitter).toString());
}

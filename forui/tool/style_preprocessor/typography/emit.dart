import 'package:analyzer/dart/analysis/analysis_context_collection.dart';
import 'package:analyzer/dart/analysis/results.dart';
import 'package:analyzer/dart/ast/ast.dart';
import 'package:analyzer/dart/ast/visitor.dart';
import 'package:code_builder/code_builder.dart';

import '../main.dart';
import 'package:path/path.dart' as path;

String emitTypography(String assignment) {
  final field =
      LibraryBuilder()
        ..comments.addAll([header])
        ..body.addAll([
          (FieldBuilder()
                ..docs.addAll(['/// The typography in Forui. This was generated by tool/style_preprocessor.'])
                ..modifier = FieldModifier.constant
                ..name = 'typography'
                ..assignment = literalString(assignment).code)
              .build(),
        ]);

  return formatter.format(field.build().accept(emitter).toString());
}

String mapTypography(ConstructorDeclaration constructor) {
  if (constructor.body.toSource() != ';') {
    throw UnsupportedError('style_preprocessor does not support constructor bodies: ${constructor.toSource()}');
  }

  final parameters = <String>[];
  var constructorParameters = constructor.parameters.toSource();
  for (final parameter in constructor.parameters.parameters) {
    parameters.add('${parameter.name!.lexeme}: ${parameter.name!.lexeme},');

    if (parameter case final DefaultFormalParameter parameter) {
      if (parameter.parameter case final FieldFormalParameter parameter) {
        constructorParameters = constructorParameters.replaceAll(
          'this.${parameter.name.lexeme}',
          '${parameter.declaredElement?.type} ${parameter.name.lexeme}',
        );
      }
    }
  }

  final arguments =
      constructor.initializers
          .whereType<ConstructorFieldInitializer>()
          .map((initializer) => '${initializer.fieldName}: ${initializer.expression.toSource()},')
          .toList()
          .join();

  return formatter.format('FTypography typography$constructorParameters => FTypography($arguments);');
}

/// Finds the FTypography.inherit constructor.
Future<ConstructorDeclaration> traverseTypography(AnalysisContextCollection collection) async {
  final typography = path.join(library, 'src', 'theme', 'typography.dart');
  if (await collection.contextFor(typography).currentSession.getResolvedUnit(typography)
      case final ResolvedUnitResult result) {
    final visitor = _RootVisitor();
    result.unit.accept(visitor);

    if (visitor.constructor case final constructor?) {
      return constructor;
    }
  }

  throw Exception('Failed to parse $typography');
}

class _RootVisitor extends RecursiveAstVisitor<void> {
  ConstructorDeclaration? constructor;

  @override
  void visitClassDeclaration(ClassDeclaration declaration) {
    final name = declaration.name.lexeme;
    if (name == 'FTypography') {
      super.visitClassDeclaration(declaration);
    }
  }

  @override
  void visitConstructorDeclaration(ConstructorDeclaration declaration) {
    if (declaration.name?.lexeme == 'inherit') {
      constructor = declaration;
    }
  }
}

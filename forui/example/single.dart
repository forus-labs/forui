import 'package:forui/forui.dart';
import 'package:flutter/material.dart';

/// Generated by Forui CLI.
///
/// Modify the generated function bodies to create your own custom style.
/// Then, call the modified functions and pass the results to your FThemeData.
///
/// ### Example
/// Generated style:
/// ```dart
/// extension CustomFDividerStyles on Never {
///   // Modify this function's body.
///   static FDividerStyles dividerStyles({
///     required FColorScheme color,
///     required FStyle style,
///   }) => FDividerStyles(
///     horizontalStyle: FDividerStyle(
///       color: color.secondary,
///       padding: FDividerStyle.defaultPadding.horizontalStyle,
///       width: style.borderWidth,
///     ),
///     verticalStyle: FDividerStyle(
///       color: color.secondary,
///       padding: FDividerStyle.defaultPadding.verticalStyle,
///       width: style.borderWidth,
///     ),
///   );
/// }
/// ```
///
/// File that contains your `FThemeData`:
/// ```dart
/// import 'package:my_application/theme/divider_style.dart' // Your generated file.
///
/// FThemeData(
///  color: FThemes.zinc.light.color,
///  style: FThemes.zinc.light.style,
///  dividerStyles: CustomFDividerStyles.dividerStyles( // The function in your generated file.
///    color: FThemes.zinc.light.color,
///    style: FThemes.zinc.light.style,
///   ),
/// );
/// ```
///
/// See https://forui.dev/docs/cli for more information.
extension CustomFDividerStyles on Never {
  static FDividerStyles dividerStyles({
    required FColorScheme color,
    required FStyle style,
  }) => FDividerStyles(
    horizontalStyle: FDividerStyle(
      color: color.secondary,
      padding: FDividerStyle.defaultPadding.horizontalStyle,
      width: style.borderWidth,
    ),
    verticalStyle: FDividerStyle(
      color: color.secondary,
      padding: FDividerStyle.defaultPadding.verticalStyle,
      width: style.borderWidth,
    ),
  );
}

extension CustomFTextFieldStyle on Never {
  static FTextFieldStyle textFieldStyle({
    required FColorScheme color,
    required FTypography text,
    required FStyle style,
  }) => FTextFieldStyle(
    keyboardAppearance: color.brightness,
    labelLayoutStyle: _labelStyles(style: style).verticalStyle.layout,
    clearButtonStyle: _buttonStyles(
      color: color,
      text: text,
      style: style,
    ).ghost.transform(
      (ghost) => ghost.copyWith(
        iconContentStyle: ghost.iconContentStyle.copyWith(
          enabledStyle: IconThemeData(color: color.mutedForeground, size: 17),
        ),
      ),
    ),
    enabledStyle: _textFieldStateStyle(
      contentColor: color.primary,
      hintColor: color.mutedForeground,
      focusedBorderColor: color.primary,
      unfocusedBorderColor: color.border,
      formFieldStyle: style.enabledFormFieldStyle,
      text: text,
      style: style,
    ),
    disabledStyle: _textFieldStateStyle(
      contentColor: color.disable(color.primary),
      hintColor: color.disable(color.border),
      focusedBorderColor: color.disable(color.border),
      unfocusedBorderColor: color.disable(color.border),
      formFieldStyle: style.disabledFormFieldStyle,
      text: text,
      style: style,
    ),
    errorStyle: _textFieldErrorStyle(
      contentColor: color.primary,
      hintColor: color.mutedForeground,
      focusedBorderColor: color.error,
      unfocusedBorderColor: color.error,
      formFieldErrorStyle: style.errorFormFieldStyle,
      text: text,
      style: style,
    ),
  );

  static FLabelStyles _labelStyles({required FStyle style}) => FLabelStyles(
    horizontalStyle: (
      layout: const FLabelLayoutStyle(
        childPadding: EdgeInsets.symmetric(horizontal: 8),
        descriptionPadding: EdgeInsets.only(top: 2),
        errorPadding: EdgeInsets.only(top: 2),
      ),
      state: _labelStateStyles(style: style),
    ),
    verticalStyle: (
      layout: const FLabelLayoutStyle(
        labelPadding: EdgeInsets.only(bottom: 5),
        descriptionPadding: EdgeInsets.only(top: 5),
        errorPadding: EdgeInsets.only(top: 5),
      ),
      state: _labelStateStyles(style: style),
    ),
  );

  static FLabelStateStyles _labelStateStyles({required FStyle style}) =>
      FLabelStateStyles(
        enabledStyle: style.enabledFormFieldStyle,
        disabledStyle: style.disabledFormFieldStyle,
        errorStyle: style.errorFormFieldStyle,
      );

  static FButtonStyles _buttonStyles({
    required FColorScheme color,
    required FTypography text,
    required FStyle style,
  }) => FButtonStyles(
    primary: _buttonStyle(
      color: color,
      style: style,
      text: text,
      background: color.primary,
      foreground: color.primaryForeground,
    ),
    secondary: _buttonStyle(
      color: color,
      style: style,
      text: text,
      background: color.secondary,
      foreground: color.secondaryForeground,
    ),
    destructive: _buttonStyle(
      color: color,
      style: style,
      text: text,
      background: color.destructive,
      foreground: color.destructiveForeground,
    ),
    outline: FButtonStyle(
      enabledBoxDecoration: BoxDecoration(
        border: Border.all(color: color.border),
        borderRadius: style.borderRadius,
      ),
      enabledHoverBoxDecoration: BoxDecoration(
        border: Border.all(color: color.border),
        borderRadius: style.borderRadius,
        color: color.secondary,
      ),
      disabledBoxDecoration: BoxDecoration(
        border: Border.all(color: color.disable(color.border)),
        borderRadius: style.borderRadius,
      ),
      focusedOutlineStyle: style.focusedOutlineStyle,
      contentStyle: _buttonContentStyle(
        text: text,
        enabled: color.secondaryForeground,
        disabled: color.disable(color.secondaryForeground),
      ),
      iconContentStyle: FButtonIconContentStyle(
        enabledStyle: IconThemeData(color: color.secondaryForeground, size: 20),
        disabledStyle: IconThemeData(
          color: color.disable(color.secondaryForeground),
          size: 20,
        ),
      ),
      tappableStyle: style.tappableStyle,
    ),
    ghost: FButtonStyle(
      enabledBoxDecoration: BoxDecoration(borderRadius: style.borderRadius),
      enabledHoverBoxDecoration: BoxDecoration(
        borderRadius: style.borderRadius,
        color: color.secondary,
      ),
      disabledBoxDecoration: BoxDecoration(borderRadius: style.borderRadius),
      focusedOutlineStyle: style.focusedOutlineStyle,
      contentStyle: _buttonContentStyle(
        text: text,
        enabled: color.secondaryForeground,
        disabled: color.disable(color.secondaryForeground),
      ),
      iconContentStyle: FButtonIconContentStyle(
        enabledStyle: IconThemeData(color: color.secondaryForeground, size: 20),
        disabledStyle: IconThemeData(
          color: color.disable(color.secondaryForeground),
          size: 20,
        ),
      ),
      tappableStyle: style.tappableStyle,
    ),
  );

  static FButtonStyle _buttonStyle({
    required FColorScheme color,
    required FTypography text,
    required FStyle style,
    required Color background,
    required Color foreground,
  }) => FButtonStyle(
    enabledBoxDecoration: BoxDecoration(
      borderRadius: style.borderRadius,
      color: background,
    ),
    enabledHoverBoxDecoration: BoxDecoration(
      borderRadius: style.borderRadius,
      color: color.hover(background),
    ),
    disabledBoxDecoration: BoxDecoration(
      borderRadius: style.borderRadius,
      color: color.disable(background),
    ),
    focusedOutlineStyle: style.focusedOutlineStyle,
    contentStyle: _buttonContentStyle(
      text: text,
      enabled: foreground,
      disabled: color.disable(foreground, color.disable(background)),
    ),
    iconContentStyle: FButtonIconContentStyle(
      enabledStyle: IconThemeData(color: foreground, size: 20),
      disabledStyle: IconThemeData(
        color: color.disable(foreground, color.disable(background)),
        size: 20,
      ),
    ),
    tappableStyle: style.tappableStyle,
  );

  static FButtonContentStyle _buttonContentStyle({
    required FTypography text,
    required Color enabled,
    required Color disabled,
  }) => FButtonContentStyle(
    enabledTextStyle: text.base.copyWith(
      color: enabled,
      fontWeight: FontWeight.w500,
      height: 1,
    ),
    disabledTextStyle: text.base.copyWith(
      color: disabled,
      fontWeight: FontWeight.w500,
      height: 1,
    ),
    enabledIconStyle: IconThemeData(color: enabled, size: 20),
    disabledIconStyle: IconThemeData(color: disabled, size: 20),
  );

  static FTextFieldStateStyle _textFieldStateStyle({
    required Color contentColor,
    required Color hintColor,
    required Color focusedBorderColor,
    required Color unfocusedBorderColor,
    required FFormFieldStyle formFieldStyle,
    required FTypography text,
    required FStyle style,
  }) => FTextFieldStateStyle(
    labelTextStyle: formFieldStyle.labelTextStyle,
    contentTextStyle: text.sm.copyWith(
      fontFamily: text.defaultFontFamily,
      color: contentColor,
    ),
    hintTextStyle: text.sm.copyWith(
      fontFamily: text.defaultFontFamily,
      color: hintColor,
    ),
    counterTextStyle: text.sm.copyWith(
      fontFamily: text.defaultFontFamily,
      color: contentColor,
    ),
    descriptionTextStyle: formFieldStyle.descriptionTextStyle,
    focusedStyle: _textFieldBorderStyle(
      color: focusedBorderColor,
      style: style,
    ),
    unfocusedStyle: _textFieldBorderStyle(
      color: unfocusedBorderColor,
      style: style,
    ),
  );

  static FTextFieldBorderStyle _textFieldBorderStyle({
    required Color color,
    required FStyle style,
  }) => FTextFieldBorderStyle(
    color: color,
    width: style.borderWidth,
    radius: style.borderRadius,
  );

  static FTextFieldErrorStyle _textFieldErrorStyle({
    required FFormFieldErrorStyle formFieldErrorStyle,
    required Color contentColor,
    required Color hintColor,
    required Color focusedBorderColor,
    required Color unfocusedBorderColor,
    required FTypography text,
    required FStyle style,
  }) => FTextFieldErrorStyle.inherit(
    formFieldErrorStyle: formFieldErrorStyle,
    contentColor: contentColor,
    hintColor: hintColor,
    focusedBorderColor: focusedBorderColor,
    unfocusedBorderColor: unfocusedBorderColor,
    text: text,
    style: style,
  );
}
